/*
 * cpp_main.cpp
 *
 *  Created on: Mar 2, 2023
 *      Author: lenovo
 */

#include "cpp_main.h"
#include <vector>
#include <stdint.h>
#include "adc.h"
#include "dac.h"
#include "dma.h"
#include "gpio.h"

using namespace std;

float RampOut(long ramp_time);
uint16_t RampOut1(long ramp_time);
long getCurrentMicros(void);
static uint32_t LL_SYSTICK_IsActiveCounterFlag(void);


int t = 0;
uint8_t hello = 0;
vector<int> v1;
uint16_t PD[2];
uint16_t pd1, pd2;
float freq = 1;
float ramp_amp = 3.3;
long ramp_time = 0;
long current_time = 0;
float period = 1000000/1;
//long period = 1000000;
uint32_t out = 0;
float temp;
bool comp;


int alt_main(){

	HAL_ADC_Start_DMA(&hadc1, (uint32_t *)PD, 2);
	HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0);

	period /= freq;

	while (1)
	{
		float ramp_start_time = getCurrentMicros();
		ramp_time = 0;
		while(ramp_time <= period){
		current_time = getCurrentMicros();
		//----------------Generate Ramp----------------
		comp = current_time - ramp_start_time < 0;
		ramp_time = current_time - ramp_start_time;
		temp = RampOut(ramp_time)/3.3*4095;
		out = (uint32_t)temp;
		HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, (uint32_t)temp);
		pd1 = PD[0];
		pd2 = PD[1];
//		int i=10;
//		while(i--);
		HAL_Delay(1);
	  }
	}
	  return 0;
}


float RampOut(long ramp_time) {
  float ramp;
  float amp = ramp_amp;
  float offset = 0;
  if(ramp_time<=(period/2))
      ramp = (amp/(period/2))*ramp_time + offset;
    else
      ramp = 2*amp -(amp/(period/2))*ramp_time + offset;
  if(ramp < 0) ramp = 0;
    return ramp;
}

uint16_t RampOut1(long ramp_time) {
	uint16_t ramp;
	uint16_t amp = 4095;
	if(ramp_time<=(period))
		ramp = (amp/(period))*ramp_time;
    else
    	ramp = -(amp/(period))*ramp_time;
    return ramp;
}

long getCurrentMicros(void){
  /* Ensure COUNTFLAG is reset by reading SysTick control and status register */
  LL_SYSTICK_IsActiveCounterFlag();
  long m = HAL_GetTick();
  const long tms = SysTick->LOAD + 1;
  __IO long u = tms - SysTick->VAL;
  if (LL_SYSTICK_IsActiveCounterFlag()) {
    m = HAL_GetTick();
    u = tms - SysTick->VAL;
  }
  return (m * 1000 + (u * 1000) / tms);
}

static inline uint32_t LL_SYSTICK_IsActiveCounterFlag(void)
{
  return ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == (SysTick_CTRL_COUNTFLAG_Msk));
}

