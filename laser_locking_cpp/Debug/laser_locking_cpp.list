
laser_locking_cpp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000066fc  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000194  080068c4  080068c4  000168c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a58  08006a58  00020178  2**0
                  CONTENTS
  4 .ARM          00000008  08006a58  08006a58  00016a58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006a60  08006a60  00020178  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08006a60  08006a60  00016a60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08006a68  08006a68  00016a68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000178  20000000  08006a70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000194  20000178  08006be8  00020178  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000030c  08006be8  0002030c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020178  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a759  00000000  00000000  000201a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d40  00000000  00000000  0003a901  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f90  00000000  00000000  0003d648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e48  00000000  00000000  0003e5d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a70f  00000000  00000000  0003f420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ff7f  00000000  00000000  00069b2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000febd9  00000000  00000000  00079aae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00178687  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000059f4  00000000  00000000  001786d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000178 	.word	0x20000178
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080068ac 	.word	0x080068ac

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	2000017c 	.word	0x2000017c
 8000204:	080068ac 	.word	0x080068ac

08000208 <strlen>:
 8000208:	4603      	mov	r3, r0
 800020a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020e:	2a00      	cmp	r2, #0
 8000210:	d1fb      	bne.n	800020a <strlen+0x2>
 8000212:	1a18      	subs	r0, r3, r0
 8000214:	3801      	subs	r0, #1
 8000216:	4770      	bx	lr

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2f>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000acc:	bf24      	itt	cs
 8000ace:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ad6:	d90d      	bls.n	8000af4 <__aeabi_d2f+0x30>
 8000ad8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000adc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ae8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aec:	bf08      	it	eq
 8000aee:	f020 0001 	biceq.w	r0, r0, #1
 8000af2:	4770      	bx	lr
 8000af4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000af8:	d121      	bne.n	8000b3e <__aeabi_d2f+0x7a>
 8000afa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000afe:	bfbc      	itt	lt
 8000b00:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b04:	4770      	bxlt	lr
 8000b06:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b0e:	f1c2 0218 	rsb	r2, r2, #24
 8000b12:	f1c2 0c20 	rsb	ip, r2, #32
 8000b16:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b1e:	bf18      	it	ne
 8000b20:	f040 0001 	orrne.w	r0, r0, #1
 8000b24:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b28:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b2c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b30:	ea40 000c 	orr.w	r0, r0, ip
 8000b34:	fa23 f302 	lsr.w	r3, r3, r2
 8000b38:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b3c:	e7cc      	b.n	8000ad8 <__aeabi_d2f+0x14>
 8000b3e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b42:	d107      	bne.n	8000b54 <__aeabi_d2f+0x90>
 8000b44:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b48:	bf1e      	ittt	ne
 8000b4a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b4e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b52:	4770      	bxne	lr
 8000b54:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b58:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b5c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop

08000b64 <__aeabi_uldivmod>:
 8000b64:	b953      	cbnz	r3, 8000b7c <__aeabi_uldivmod+0x18>
 8000b66:	b94a      	cbnz	r2, 8000b7c <__aeabi_uldivmod+0x18>
 8000b68:	2900      	cmp	r1, #0
 8000b6a:	bf08      	it	eq
 8000b6c:	2800      	cmpeq	r0, #0
 8000b6e:	bf1c      	itt	ne
 8000b70:	f04f 31ff 	movne.w	r1, #4294967295
 8000b74:	f04f 30ff 	movne.w	r0, #4294967295
 8000b78:	f000 b974 	b.w	8000e64 <__aeabi_idiv0>
 8000b7c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b80:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b84:	f000 f806 	bl	8000b94 <__udivmoddi4>
 8000b88:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b90:	b004      	add	sp, #16
 8000b92:	4770      	bx	lr

08000b94 <__udivmoddi4>:
 8000b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b98:	9d08      	ldr	r5, [sp, #32]
 8000b9a:	4604      	mov	r4, r0
 8000b9c:	468e      	mov	lr, r1
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d14d      	bne.n	8000c3e <__udivmoddi4+0xaa>
 8000ba2:	428a      	cmp	r2, r1
 8000ba4:	4694      	mov	ip, r2
 8000ba6:	d969      	bls.n	8000c7c <__udivmoddi4+0xe8>
 8000ba8:	fab2 f282 	clz	r2, r2
 8000bac:	b152      	cbz	r2, 8000bc4 <__udivmoddi4+0x30>
 8000bae:	fa01 f302 	lsl.w	r3, r1, r2
 8000bb2:	f1c2 0120 	rsb	r1, r2, #32
 8000bb6:	fa20 f101 	lsr.w	r1, r0, r1
 8000bba:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bbe:	ea41 0e03 	orr.w	lr, r1, r3
 8000bc2:	4094      	lsls	r4, r2
 8000bc4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bc8:	0c21      	lsrs	r1, r4, #16
 8000bca:	fbbe f6f8 	udiv	r6, lr, r8
 8000bce:	fa1f f78c 	uxth.w	r7, ip
 8000bd2:	fb08 e316 	mls	r3, r8, r6, lr
 8000bd6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000bda:	fb06 f107 	mul.w	r1, r6, r7
 8000bde:	4299      	cmp	r1, r3
 8000be0:	d90a      	bls.n	8000bf8 <__udivmoddi4+0x64>
 8000be2:	eb1c 0303 	adds.w	r3, ip, r3
 8000be6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000bea:	f080 811f 	bcs.w	8000e2c <__udivmoddi4+0x298>
 8000bee:	4299      	cmp	r1, r3
 8000bf0:	f240 811c 	bls.w	8000e2c <__udivmoddi4+0x298>
 8000bf4:	3e02      	subs	r6, #2
 8000bf6:	4463      	add	r3, ip
 8000bf8:	1a5b      	subs	r3, r3, r1
 8000bfa:	b2a4      	uxth	r4, r4
 8000bfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c00:	fb08 3310 	mls	r3, r8, r0, r3
 8000c04:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c08:	fb00 f707 	mul.w	r7, r0, r7
 8000c0c:	42a7      	cmp	r7, r4
 8000c0e:	d90a      	bls.n	8000c26 <__udivmoddi4+0x92>
 8000c10:	eb1c 0404 	adds.w	r4, ip, r4
 8000c14:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c18:	f080 810a 	bcs.w	8000e30 <__udivmoddi4+0x29c>
 8000c1c:	42a7      	cmp	r7, r4
 8000c1e:	f240 8107 	bls.w	8000e30 <__udivmoddi4+0x29c>
 8000c22:	4464      	add	r4, ip
 8000c24:	3802      	subs	r0, #2
 8000c26:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c2a:	1be4      	subs	r4, r4, r7
 8000c2c:	2600      	movs	r6, #0
 8000c2e:	b11d      	cbz	r5, 8000c38 <__udivmoddi4+0xa4>
 8000c30:	40d4      	lsrs	r4, r2
 8000c32:	2300      	movs	r3, #0
 8000c34:	e9c5 4300 	strd	r4, r3, [r5]
 8000c38:	4631      	mov	r1, r6
 8000c3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c3e:	428b      	cmp	r3, r1
 8000c40:	d909      	bls.n	8000c56 <__udivmoddi4+0xc2>
 8000c42:	2d00      	cmp	r5, #0
 8000c44:	f000 80ef 	beq.w	8000e26 <__udivmoddi4+0x292>
 8000c48:	2600      	movs	r6, #0
 8000c4a:	e9c5 0100 	strd	r0, r1, [r5]
 8000c4e:	4630      	mov	r0, r6
 8000c50:	4631      	mov	r1, r6
 8000c52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c56:	fab3 f683 	clz	r6, r3
 8000c5a:	2e00      	cmp	r6, #0
 8000c5c:	d14a      	bne.n	8000cf4 <__udivmoddi4+0x160>
 8000c5e:	428b      	cmp	r3, r1
 8000c60:	d302      	bcc.n	8000c68 <__udivmoddi4+0xd4>
 8000c62:	4282      	cmp	r2, r0
 8000c64:	f200 80f9 	bhi.w	8000e5a <__udivmoddi4+0x2c6>
 8000c68:	1a84      	subs	r4, r0, r2
 8000c6a:	eb61 0303 	sbc.w	r3, r1, r3
 8000c6e:	2001      	movs	r0, #1
 8000c70:	469e      	mov	lr, r3
 8000c72:	2d00      	cmp	r5, #0
 8000c74:	d0e0      	beq.n	8000c38 <__udivmoddi4+0xa4>
 8000c76:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c7a:	e7dd      	b.n	8000c38 <__udivmoddi4+0xa4>
 8000c7c:	b902      	cbnz	r2, 8000c80 <__udivmoddi4+0xec>
 8000c7e:	deff      	udf	#255	; 0xff
 8000c80:	fab2 f282 	clz	r2, r2
 8000c84:	2a00      	cmp	r2, #0
 8000c86:	f040 8092 	bne.w	8000dae <__udivmoddi4+0x21a>
 8000c8a:	eba1 010c 	sub.w	r1, r1, ip
 8000c8e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c92:	fa1f fe8c 	uxth.w	lr, ip
 8000c96:	2601      	movs	r6, #1
 8000c98:	0c20      	lsrs	r0, r4, #16
 8000c9a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c9e:	fb07 1113 	mls	r1, r7, r3, r1
 8000ca2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ca6:	fb0e f003 	mul.w	r0, lr, r3
 8000caa:	4288      	cmp	r0, r1
 8000cac:	d908      	bls.n	8000cc0 <__udivmoddi4+0x12c>
 8000cae:	eb1c 0101 	adds.w	r1, ip, r1
 8000cb2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cb6:	d202      	bcs.n	8000cbe <__udivmoddi4+0x12a>
 8000cb8:	4288      	cmp	r0, r1
 8000cba:	f200 80cb 	bhi.w	8000e54 <__udivmoddi4+0x2c0>
 8000cbe:	4643      	mov	r3, r8
 8000cc0:	1a09      	subs	r1, r1, r0
 8000cc2:	b2a4      	uxth	r4, r4
 8000cc4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cc8:	fb07 1110 	mls	r1, r7, r0, r1
 8000ccc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000cd0:	fb0e fe00 	mul.w	lr, lr, r0
 8000cd4:	45a6      	cmp	lr, r4
 8000cd6:	d908      	bls.n	8000cea <__udivmoddi4+0x156>
 8000cd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000cdc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ce0:	d202      	bcs.n	8000ce8 <__udivmoddi4+0x154>
 8000ce2:	45a6      	cmp	lr, r4
 8000ce4:	f200 80bb 	bhi.w	8000e5e <__udivmoddi4+0x2ca>
 8000ce8:	4608      	mov	r0, r1
 8000cea:	eba4 040e 	sub.w	r4, r4, lr
 8000cee:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000cf2:	e79c      	b.n	8000c2e <__udivmoddi4+0x9a>
 8000cf4:	f1c6 0720 	rsb	r7, r6, #32
 8000cf8:	40b3      	lsls	r3, r6
 8000cfa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cfe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d02:	fa20 f407 	lsr.w	r4, r0, r7
 8000d06:	fa01 f306 	lsl.w	r3, r1, r6
 8000d0a:	431c      	orrs	r4, r3
 8000d0c:	40f9      	lsrs	r1, r7
 8000d0e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d12:	fa00 f306 	lsl.w	r3, r0, r6
 8000d16:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d1a:	0c20      	lsrs	r0, r4, #16
 8000d1c:	fa1f fe8c 	uxth.w	lr, ip
 8000d20:	fb09 1118 	mls	r1, r9, r8, r1
 8000d24:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d28:	fb08 f00e 	mul.w	r0, r8, lr
 8000d2c:	4288      	cmp	r0, r1
 8000d2e:	fa02 f206 	lsl.w	r2, r2, r6
 8000d32:	d90b      	bls.n	8000d4c <__udivmoddi4+0x1b8>
 8000d34:	eb1c 0101 	adds.w	r1, ip, r1
 8000d38:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d3c:	f080 8088 	bcs.w	8000e50 <__udivmoddi4+0x2bc>
 8000d40:	4288      	cmp	r0, r1
 8000d42:	f240 8085 	bls.w	8000e50 <__udivmoddi4+0x2bc>
 8000d46:	f1a8 0802 	sub.w	r8, r8, #2
 8000d4a:	4461      	add	r1, ip
 8000d4c:	1a09      	subs	r1, r1, r0
 8000d4e:	b2a4      	uxth	r4, r4
 8000d50:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d54:	fb09 1110 	mls	r1, r9, r0, r1
 8000d58:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d5c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d60:	458e      	cmp	lr, r1
 8000d62:	d908      	bls.n	8000d76 <__udivmoddi4+0x1e2>
 8000d64:	eb1c 0101 	adds.w	r1, ip, r1
 8000d68:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d6c:	d26c      	bcs.n	8000e48 <__udivmoddi4+0x2b4>
 8000d6e:	458e      	cmp	lr, r1
 8000d70:	d96a      	bls.n	8000e48 <__udivmoddi4+0x2b4>
 8000d72:	3802      	subs	r0, #2
 8000d74:	4461      	add	r1, ip
 8000d76:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d7a:	fba0 9402 	umull	r9, r4, r0, r2
 8000d7e:	eba1 010e 	sub.w	r1, r1, lr
 8000d82:	42a1      	cmp	r1, r4
 8000d84:	46c8      	mov	r8, r9
 8000d86:	46a6      	mov	lr, r4
 8000d88:	d356      	bcc.n	8000e38 <__udivmoddi4+0x2a4>
 8000d8a:	d053      	beq.n	8000e34 <__udivmoddi4+0x2a0>
 8000d8c:	b15d      	cbz	r5, 8000da6 <__udivmoddi4+0x212>
 8000d8e:	ebb3 0208 	subs.w	r2, r3, r8
 8000d92:	eb61 010e 	sbc.w	r1, r1, lr
 8000d96:	fa01 f707 	lsl.w	r7, r1, r7
 8000d9a:	fa22 f306 	lsr.w	r3, r2, r6
 8000d9e:	40f1      	lsrs	r1, r6
 8000da0:	431f      	orrs	r7, r3
 8000da2:	e9c5 7100 	strd	r7, r1, [r5]
 8000da6:	2600      	movs	r6, #0
 8000da8:	4631      	mov	r1, r6
 8000daa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dae:	f1c2 0320 	rsb	r3, r2, #32
 8000db2:	40d8      	lsrs	r0, r3
 8000db4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000db8:	fa21 f303 	lsr.w	r3, r1, r3
 8000dbc:	4091      	lsls	r1, r2
 8000dbe:	4301      	orrs	r1, r0
 8000dc0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dc4:	fa1f fe8c 	uxth.w	lr, ip
 8000dc8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000dcc:	fb07 3610 	mls	r6, r7, r0, r3
 8000dd0:	0c0b      	lsrs	r3, r1, #16
 8000dd2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000dd6:	fb00 f60e 	mul.w	r6, r0, lr
 8000dda:	429e      	cmp	r6, r3
 8000ddc:	fa04 f402 	lsl.w	r4, r4, r2
 8000de0:	d908      	bls.n	8000df4 <__udivmoddi4+0x260>
 8000de2:	eb1c 0303 	adds.w	r3, ip, r3
 8000de6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000dea:	d22f      	bcs.n	8000e4c <__udivmoddi4+0x2b8>
 8000dec:	429e      	cmp	r6, r3
 8000dee:	d92d      	bls.n	8000e4c <__udivmoddi4+0x2b8>
 8000df0:	3802      	subs	r0, #2
 8000df2:	4463      	add	r3, ip
 8000df4:	1b9b      	subs	r3, r3, r6
 8000df6:	b289      	uxth	r1, r1
 8000df8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000dfc:	fb07 3316 	mls	r3, r7, r6, r3
 8000e00:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e04:	fb06 f30e 	mul.w	r3, r6, lr
 8000e08:	428b      	cmp	r3, r1
 8000e0a:	d908      	bls.n	8000e1e <__udivmoddi4+0x28a>
 8000e0c:	eb1c 0101 	adds.w	r1, ip, r1
 8000e10:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e14:	d216      	bcs.n	8000e44 <__udivmoddi4+0x2b0>
 8000e16:	428b      	cmp	r3, r1
 8000e18:	d914      	bls.n	8000e44 <__udivmoddi4+0x2b0>
 8000e1a:	3e02      	subs	r6, #2
 8000e1c:	4461      	add	r1, ip
 8000e1e:	1ac9      	subs	r1, r1, r3
 8000e20:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e24:	e738      	b.n	8000c98 <__udivmoddi4+0x104>
 8000e26:	462e      	mov	r6, r5
 8000e28:	4628      	mov	r0, r5
 8000e2a:	e705      	b.n	8000c38 <__udivmoddi4+0xa4>
 8000e2c:	4606      	mov	r6, r0
 8000e2e:	e6e3      	b.n	8000bf8 <__udivmoddi4+0x64>
 8000e30:	4618      	mov	r0, r3
 8000e32:	e6f8      	b.n	8000c26 <__udivmoddi4+0x92>
 8000e34:	454b      	cmp	r3, r9
 8000e36:	d2a9      	bcs.n	8000d8c <__udivmoddi4+0x1f8>
 8000e38:	ebb9 0802 	subs.w	r8, r9, r2
 8000e3c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e40:	3801      	subs	r0, #1
 8000e42:	e7a3      	b.n	8000d8c <__udivmoddi4+0x1f8>
 8000e44:	4646      	mov	r6, r8
 8000e46:	e7ea      	b.n	8000e1e <__udivmoddi4+0x28a>
 8000e48:	4620      	mov	r0, r4
 8000e4a:	e794      	b.n	8000d76 <__udivmoddi4+0x1e2>
 8000e4c:	4640      	mov	r0, r8
 8000e4e:	e7d1      	b.n	8000df4 <__udivmoddi4+0x260>
 8000e50:	46d0      	mov	r8, sl
 8000e52:	e77b      	b.n	8000d4c <__udivmoddi4+0x1b8>
 8000e54:	3b02      	subs	r3, #2
 8000e56:	4461      	add	r1, ip
 8000e58:	e732      	b.n	8000cc0 <__udivmoddi4+0x12c>
 8000e5a:	4630      	mov	r0, r6
 8000e5c:	e709      	b.n	8000c72 <__udivmoddi4+0xde>
 8000e5e:	4464      	add	r4, ip
 8000e60:	3802      	subs	r0, #2
 8000e62:	e742      	b.n	8000cea <__udivmoddi4+0x156>

08000e64 <__aeabi_idiv0>:
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop

08000e68 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b084      	sub	sp, #16
 8000e6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e6e:	463b      	mov	r3, r7
 8000e70:	2200      	movs	r2, #0
 8000e72:	601a      	str	r2, [r3, #0]
 8000e74:	605a      	str	r2, [r3, #4]
 8000e76:	609a      	str	r2, [r3, #8]
 8000e78:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000e7a:	4b28      	ldr	r3, [pc, #160]	; (8000f1c <MX_ADC1_Init+0xb4>)
 8000e7c:	4a28      	ldr	r2, [pc, #160]	; (8000f20 <MX_ADC1_Init+0xb8>)
 8000e7e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 8000e80:	4b26      	ldr	r3, [pc, #152]	; (8000f1c <MX_ADC1_Init+0xb4>)
 8000e82:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000e86:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e88:	4b24      	ldr	r3, [pc, #144]	; (8000f1c <MX_ADC1_Init+0xb4>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000e8e:	4b23      	ldr	r3, [pc, #140]	; (8000f1c <MX_ADC1_Init+0xb4>)
 8000e90:	2201      	movs	r2, #1
 8000e92:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000e94:	4b21      	ldr	r3, [pc, #132]	; (8000f1c <MX_ADC1_Init+0xb4>)
 8000e96:	2201      	movs	r2, #1
 8000e98:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e9a:	4b20      	ldr	r3, [pc, #128]	; (8000f1c <MX_ADC1_Init+0xb4>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ea2:	4b1e      	ldr	r3, [pc, #120]	; (8000f1c <MX_ADC1_Init+0xb4>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ea8:	4b1c      	ldr	r3, [pc, #112]	; (8000f1c <MX_ADC1_Init+0xb4>)
 8000eaa:	4a1e      	ldr	r2, [pc, #120]	; (8000f24 <MX_ADC1_Init+0xbc>)
 8000eac:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000eae:	4b1b      	ldr	r3, [pc, #108]	; (8000f1c <MX_ADC1_Init+0xb4>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000eb4:	4b19      	ldr	r3, [pc, #100]	; (8000f1c <MX_ADC1_Init+0xb4>)
 8000eb6:	2202      	movs	r2, #2
 8000eb8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000eba:	4b18      	ldr	r3, [pc, #96]	; (8000f1c <MX_ADC1_Init+0xb4>)
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ec2:	4b16      	ldr	r3, [pc, #88]	; (8000f1c <MX_ADC1_Init+0xb4>)
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ec8:	4814      	ldr	r0, [pc, #80]	; (8000f1c <MX_ADC1_Init+0xb4>)
 8000eca:	f003 f9d5 	bl	8004278 <HAL_ADC_Init>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000ed4:	f002 ffdc 	bl	8003e90 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000ed8:	2306      	movs	r3, #6
 8000eda:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000edc:	2301      	movs	r3, #1
 8000ede:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8000ee0:	2306      	movs	r3, #6
 8000ee2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ee4:	463b      	mov	r3, r7
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	480c      	ldr	r0, [pc, #48]	; (8000f1c <MX_ADC1_Init+0xb4>)
 8000eea:	f003 fa09 	bl	8004300 <HAL_ADC_ConfigChannel>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000ef4:	f002 ffcc 	bl	8003e90 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000ef8:	2305      	movs	r3, #5
 8000efa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000efc:	2302      	movs	r3, #2
 8000efe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f00:	463b      	mov	r3, r7
 8000f02:	4619      	mov	r1, r3
 8000f04:	4805      	ldr	r0, [pc, #20]	; (8000f1c <MX_ADC1_Init+0xb4>)
 8000f06:	f003 f9fb 	bl	8004300 <HAL_ADC_ConfigChannel>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d001      	beq.n	8000f14 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000f10:	f002 ffbe 	bl	8003e90 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f14:	bf00      	nop
 8000f16:	3710      	adds	r7, #16
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	20000194 	.word	0x20000194
 8000f20:	40012000 	.word	0x40012000
 8000f24:	0f000001 	.word	0x0f000001

08000f28 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b08a      	sub	sp, #40	; 0x28
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f30:	f107 0314 	add.w	r3, r7, #20
 8000f34:	2200      	movs	r2, #0
 8000f36:	601a      	str	r2, [r3, #0]
 8000f38:	605a      	str	r2, [r3, #4]
 8000f3a:	609a      	str	r2, [r3, #8]
 8000f3c:	60da      	str	r2, [r3, #12]
 8000f3e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4a2d      	ldr	r2, [pc, #180]	; (8000ffc <HAL_ADC_MspInit+0xd4>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d153      	bne.n	8000ff2 <HAL_ADC_MspInit+0xca>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f4a:	4b2d      	ldr	r3, [pc, #180]	; (8001000 <HAL_ADC_MspInit+0xd8>)
 8000f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f4e:	4a2c      	ldr	r2, [pc, #176]	; (8001000 <HAL_ADC_MspInit+0xd8>)
 8000f50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f54:	6453      	str	r3, [r2, #68]	; 0x44
 8000f56:	4b2a      	ldr	r3, [pc, #168]	; (8001000 <HAL_ADC_MspInit+0xd8>)
 8000f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f5e:	613b      	str	r3, [r7, #16]
 8000f60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f62:	4b27      	ldr	r3, [pc, #156]	; (8001000 <HAL_ADC_MspInit+0xd8>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f66:	4a26      	ldr	r2, [pc, #152]	; (8001000 <HAL_ADC_MspInit+0xd8>)
 8000f68:	f043 0301 	orr.w	r3, r3, #1
 8000f6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f6e:	4b24      	ldr	r3, [pc, #144]	; (8001000 <HAL_ADC_MspInit+0xd8>)
 8000f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f72:	f003 0301 	and.w	r3, r3, #1
 8000f76:	60fb      	str	r3, [r7, #12]
 8000f78:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000f7a:	2360      	movs	r3, #96	; 0x60
 8000f7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f7e:	2303      	movs	r3, #3
 8000f80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f82:	2300      	movs	r3, #0
 8000f84:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f86:	f107 0314 	add.w	r3, r7, #20
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	481d      	ldr	r0, [pc, #116]	; (8001004 <HAL_ADC_MspInit+0xdc>)
 8000f8e:	f004 f873 	bl	8005078 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000f92:	4b1d      	ldr	r3, [pc, #116]	; (8001008 <HAL_ADC_MspInit+0xe0>)
 8000f94:	4a1d      	ldr	r2, [pc, #116]	; (800100c <HAL_ADC_MspInit+0xe4>)
 8000f96:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000f98:	4b1b      	ldr	r3, [pc, #108]	; (8001008 <HAL_ADC_MspInit+0xe0>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f9e:	4b1a      	ldr	r3, [pc, #104]	; (8001008 <HAL_ADC_MspInit+0xe0>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fa4:	4b18      	ldr	r3, [pc, #96]	; (8001008 <HAL_ADC_MspInit+0xe0>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000faa:	4b17      	ldr	r3, [pc, #92]	; (8001008 <HAL_ADC_MspInit+0xe0>)
 8000fac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fb0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000fb2:	4b15      	ldr	r3, [pc, #84]	; (8001008 <HAL_ADC_MspInit+0xe0>)
 8000fb4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000fb8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000fba:	4b13      	ldr	r3, [pc, #76]	; (8001008 <HAL_ADC_MspInit+0xe0>)
 8000fbc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000fc0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000fc2:	4b11      	ldr	r3, [pc, #68]	; (8001008 <HAL_ADC_MspInit+0xe0>)
 8000fc4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fc8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000fca:	4b0f      	ldr	r3, [pc, #60]	; (8001008 <HAL_ADC_MspInit+0xe0>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000fd0:	4b0d      	ldr	r3, [pc, #52]	; (8001008 <HAL_ADC_MspInit+0xe0>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000fd6:	480c      	ldr	r0, [pc, #48]	; (8001008 <HAL_ADC_MspInit+0xe0>)
 8000fd8:	f003 fd64 	bl	8004aa4 <HAL_DMA_Init>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 8000fe2:	f002 ff55 	bl	8003e90 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	4a07      	ldr	r2, [pc, #28]	; (8001008 <HAL_ADC_MspInit+0xe0>)
 8000fea:	639a      	str	r2, [r3, #56]	; 0x38
 8000fec:	4a06      	ldr	r2, [pc, #24]	; (8001008 <HAL_ADC_MspInit+0xe0>)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000ff2:	bf00      	nop
 8000ff4:	3728      	adds	r7, #40	; 0x28
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	40012000 	.word	0x40012000
 8001000:	40023800 	.word	0x40023800
 8001004:	40020000 	.word	0x40020000
 8001008:	200001dc 	.word	0x200001dc
 800100c:	40026410 	.word	0x40026410

08001010 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
 8001018:	6039      	str	r1, [r7, #0]
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	4618      	mov	r0, r3
 800101e:	370c      	adds	r7, #12
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr

08001028 <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001032:	edd7 7a01 	vldr	s15, [r7, #4]
 8001036:	eef0 7ae7 	vabs.f32	s15, s15
 800103a:	eeb0 0a67 	vmov.f32	s0, s15
 800103e:	370c      	adds	r7, #12
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr

08001048 <_ZSt16__deque_buf_sizej>:
#define _GLIBCXX_DEQUE_BUF_SIZE 512
#endif

  _GLIBCXX_CONSTEXPR inline size_t
  __deque_buf_size(size_t __size)
  { return (__size < _GLIBCXX_DEQUE_BUF_SIZE
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
	    ? size_t(_GLIBCXX_DEQUE_BUF_SIZE / __size) : size_t(1)); }
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001056:	d205      	bcs.n	8001064 <_ZSt16__deque_buf_sizej+0x1c>
 8001058:	f44f 7200 	mov.w	r2, #512	; 0x200
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001062:	e000      	b.n	8001066 <_ZSt16__deque_buf_sizej+0x1e>
 8001064:	2301      	movs	r3, #1
 8001066:	4618      	mov	r0, r3
 8001068:	370c      	adds	r7, #12
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
	...

08001074 <alt_main>:
int df_size = 10;
// Queue deri_filter(df_size);

//====================================================================================//

int alt_main(){
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
//	period /= freq;

	while (1)
	{
		//---------------- Scanning Mode -------------------
		if(lock_state == 0){
 800107a:	4b39      	ldr	r3, [pc, #228]	; (8001160 <alt_main+0xec>)
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d113      	bne.n	80010aa <alt_main+0x36>
			// generate ramp
			uint16_t ramp_time = 0;
 8001082:	2300      	movs	r3, #0
 8001084:	80fb      	strh	r3, [r7, #6]
			uint16_t ramp_end_time = 8190;
 8001086:	f641 73fe 	movw	r3, #8190	; 0x1ffe
 800108a:	80bb      	strh	r3, [r7, #4]

			while(ramp_time < ramp_end_time){
 800108c:	88fa      	ldrh	r2, [r7, #6]
 800108e:	88bb      	ldrh	r3, [r7, #4]
 8001090:	429a      	cmp	r2, r3
 8001092:	d20a      	bcs.n	80010aa <alt_main+0x36>
				//-------------- Generate Ramp ---------------
				analogWrite(RampOut1(ramp_time++));
 8001094:	88fb      	ldrh	r3, [r7, #6]
 8001096:	1c5a      	adds	r2, r3, #1
 8001098:	80fa      	strh	r2, [r7, #6]
 800109a:	4618      	mov	r0, r3
 800109c:	f000 fb22 	bl	80016e4 <_Z8RampOut1l>
 80010a0:	4603      	mov	r3, r0
 80010a2:	4618      	mov	r0, r3
 80010a4:	f000 fb4e 	bl	8001744 <_Z11analogWritet>
			while(ramp_time < ramp_end_time){
 80010a8:	e7f0      	b.n	800108c <alt_main+0x18>
			}

		}
		//---------------- Locking Mode --------------------
		if(lock_state == 1){
 80010aa:	4b2d      	ldr	r3, [pc, #180]	; (8001160 <alt_main+0xec>)
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	2b01      	cmp	r3, #1
 80010b0:	d1e3      	bne.n	800107a <alt_main+0x6>

			// initialization

			// PID parameters
			accumulator = 0;
 80010b2:	4b2c      	ldr	r3, [pc, #176]	; (8001164 <alt_main+0xf0>)
 80010b4:	f04f 0200 	mov.w	r2, #0
 80010b8:	601a      	str	r2, [r3, #0]
			accumulator_squared = 0;
 80010ba:	4b2b      	ldr	r3, [pc, #172]	; (8001168 <alt_main+0xf4>)
 80010bc:	f04f 0200 	mov.w	r2, #0
 80010c0:	601a      	str	r2, [r3, #0]
			error_previous = 0;
 80010c2:	4b2a      	ldr	r3, [pc, #168]	; (800116c <alt_main+0xf8>)
 80010c4:	f04f 0200 	mov.w	r2, #0
 80010c8:	601a      	str	r2, [r3, #0]
			d_error_previous = 0;
 80010ca:	4b29      	ldr	r3, [pc, #164]	; (8001170 <alt_main+0xfc>)
 80010cc:	f04f 0200 	mov.w	r2, #0
 80010d0:	601a      	str	r2, [r3, #0]

			// obtain set point
			set_point_time = getSetPoint();
 80010d2:	f000 f865 	bl	80011a0 <_Z11getSetPointv>
 80010d6:	4603      	mov	r3, r0
 80010d8:	ee07 3a90 	vmov	s15, r3
 80010dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010e0:	4b24      	ldr	r3, [pc, #144]	; (8001174 <alt_main+0x100>)
 80010e2:	edc3 7a00 	vstr	s15, [r3]
			// start PID
			startPID();
 80010e6:	f000 fb7f 	bl	80017e8 <_Z8startPIDv>
			analogWrite(RampOut1(PIID_out+set_point_offset));
 80010ea:	4b23      	ldr	r3, [pc, #140]	; (8001178 <alt_main+0x104>)
 80010ec:	ed93 7a00 	vldr	s14, [r3]
 80010f0:	4b22      	ldr	r3, [pc, #136]	; (800117c <alt_main+0x108>)
 80010f2:	edd3 7a00 	vldr	s15, [r3]
 80010f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010fe:	ee17 0a90 	vmov	r0, s15
 8001102:	f000 faef 	bl	80016e4 <_Z8RampOut1l>
 8001106:	4603      	mov	r3, r0
 8001108:	4618      	mov	r0, r3
 800110a:	f000 fb1b 	bl	8001744 <_Z11analogWritet>
			// auto re-locking
			if(abs(accumulator)>50) {
 800110e:	4b15      	ldr	r3, [pc, #84]	; (8001164 <alt_main+0xf0>)
 8001110:	edd3 7a00 	vldr	s15, [r3]
 8001114:	eeb0 0a67 	vmov.f32	s0, s15
 8001118:	f7ff ff86 	bl	8001028 <_ZSt3absf>
 800111c:	eef0 7a40 	vmov.f32	s15, s0
 8001120:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8001180 <alt_main+0x10c>
 8001124:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001128:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800112c:	bfcc      	ite	gt
 800112e:	2301      	movgt	r3, #1
 8001130:	2300      	movle	r3, #0
 8001132:	b2db      	uxtb	r3, r3
 8001134:	2b00      	cmp	r3, #0
 8001136:	d0a0      	beq.n	800107a <alt_main+0x6>
//				Serial.println("Out of lock!");
				// loop_counter = 0;
				accumulator = 0;
 8001138:	4b0a      	ldr	r3, [pc, #40]	; (8001164 <alt_main+0xf0>)
 800113a:	f04f 0200 	mov.w	r2, #0
 800113e:	601a      	str	r2, [r3, #0]
				accumulator_squared = 0;
 8001140:	4b09      	ldr	r3, [pc, #36]	; (8001168 <alt_main+0xf4>)
 8001142:	f04f 0200 	mov.w	r2, #0
 8001146:	601a      	str	r2, [r3, #0]
				set_point_time = getSetPoint();
 8001148:	f000 f82a 	bl	80011a0 <_Z11getSetPointv>
 800114c:	4603      	mov	r3, r0
 800114e:	ee07 3a90 	vmov	s15, r3
 8001152:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001156:	4b07      	ldr	r3, [pc, #28]	; (8001174 <alt_main+0x100>)
 8001158:	edc3 7a00 	vstr	s15, [r3]
			}

		}
	}
 800115c:	e78d      	b.n	800107a <alt_main+0x6>
 800115e:	bf00      	nop
 8001160:	20000244 	.word	0x20000244
 8001164:	2000026c 	.word	0x2000026c
 8001168:	20000270 	.word	0x20000270
 800116c:	20000260 	.word	0x20000260
 8001170:	20000268 	.word	0x20000268
 8001174:	2000024c 	.word	0x2000024c
 8001178:	20000254 	.word	0x20000254
 800117c:	20000250 	.word	0x20000250
 8001180:	42480000 	.word	0x42480000

08001184 <_ZNSt5dequeItSaItEEC1Ev>:

      /**
       *  @brief  Creates a %deque with no elements.
       */
#if __cplusplus >= 201103L
      deque() = default;
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	4618      	mov	r0, r3
 8001190:	f000 fcce 	bl	8001b30 <_ZNSt11_Deque_baseItSaItEEC1Ev>
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	4618      	mov	r0, r3
 8001198:	3708      	adds	r7, #8
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
	...

080011a0 <_Z11getSetPointv>:
	  return 0;
}

uint16_t getSetPoint(){
 80011a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011a2:	b0bf      	sub	sp, #252	; 0xfc
 80011a4:	af00      	add	r7, sp, #0
	// ----------------- Filter Initialization -----------------
	// signal filter
	deque<float> signal_filter(sf_size, 0);
 80011a6:	4bdb      	ldr	r3, [pc, #876]	; (8001514 <_Z11getSetPointv+0x374>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	461c      	mov	r4, r3
 80011ac:	f04f 0300 	mov.w	r3, #0
 80011b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80011b4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80011b8:	4618      	mov	r0, r3
 80011ba:	f000 fc55 	bl	8001a68 <_ZNSaIfEC1Ev>
 80011be:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80011c2:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80011c6:	f107 0084 	add.w	r0, r7, #132	; 0x84
 80011ca:	4621      	mov	r1, r4
 80011cc:	f000 fc64 	bl	8001a98 <_ZNSt5dequeIfSaIfEEC1EjRKfRKS0_>
 80011d0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80011d4:	4618      	mov	r0, r3
 80011d6:	f000 fc53 	bl	8001a80 <_ZNSaIfED1Ev>

	// derivative filter
	deque<float> deri_filter(df_size, 0);
 80011da:	4bcf      	ldr	r3, [pc, #828]	; (8001518 <_Z11getSetPointv+0x378>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	461c      	mov	r4, r3
 80011e0:	f04f 0300 	mov.w	r3, #0
 80011e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80011e8:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80011ec:	4618      	mov	r0, r3
 80011ee:	f000 fc3b 	bl	8001a68 <_ZNSaIfEC1Ev>
 80011f2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80011f6:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 80011fa:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 80011fe:	4621      	mov	r1, r4
 8001200:	f000 fc4a 	bl	8001a98 <_ZNSt5dequeIfSaIfEEC1EjRKfRKS0_>
 8001204:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001208:	4618      	mov	r0, r3
 800120a:	f000 fc39 	bl	8001a80 <_ZNSaIfED1Ev>

	// --------------------- Peak Finding ----------------------
	float max_val = -5;
 800120e:	4bc3      	ldr	r3, [pc, #780]	; (800151c <_Z11getSetPointv+0x37c>)
 8001210:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
	float min_val = 5;
 8001214:	4bc2      	ldr	r3, [pc, #776]	; (8001520 <_Z11getSetPointv+0x380>)
 8001216:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
	uint16_t max_val_time = 0;
 800121a:	2300      	movs	r3, #0
 800121c:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint16_t min_val_time = 0;
 8001220:	2300      	movs	r3, #0
 8001222:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58

	deque<uint16_t> minima_time;
 8001226:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800122a:	4618      	mov	r0, r3
 800122c:	f7ff ffaa 	bl	8001184 <_ZNSt5dequeItSaItEEC1Ev>
	deque<uint16_t> maxima_time;
 8001230:	f107 0308 	add.w	r3, r7, #8
 8001234:	4618      	mov	r0, r3
 8001236:	f7ff ffa5 	bl	8001184 <_ZNSt5dequeItSaItEEC1Ev>

	float err_sig = 0;
 800123a:	f04f 0300 	mov.w	r3, #0
 800123e:	607b      	str	r3, [r7, #4]
	float err_sig_prev = 0;
 8001240:	f04f 0300 	mov.w	r3, #0
 8001244:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	float err_sig_avg = 0;
 8001248:	f04f 0300 	mov.w	r3, #0
 800124c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
	float err_sig_avg_prev = 0;
 8001250:	f04f 0300 	mov.w	r3, #0
 8001254:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0

	float deri_avg = 0;
 8001258:	f04f 0300 	mov.w	r3, #0
 800125c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
	float deri_avg_prev = 0;
 8001260:	f04f 0300 	mov.w	r3, #0
 8001264:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc

	bool find_max = false;
 8001268:	2300      	movs	r3, #0
 800126a:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
	bool find_min = true;
 800126e:	2301      	movs	r3, #1
 8001270:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6
	bool lockpoint_found = false;
 8001274:	2300      	movs	r3, #0
 8001276:	f887 30e5 	strb.w	r3, [r7, #229]	; 0xe5

	float ramp_time = 0;
 800127a:	f04f 0300 	mov.w	r3, #0
 800127e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
	float ramp_end_time = 8190;
 8001282:	4ba8      	ldr	r3, [pc, #672]	; (8001524 <_Z11getSetPointv+0x384>)
 8001284:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

	while(ramp_time < ramp_end_time){
 8001288:	ed97 7a38 	vldr	s14, [r7, #224]	; 0xe0
 800128c:	edd7 7a32 	vldr	s15, [r7, #200]	; 0xc8
 8001290:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001294:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001298:	f140 8150 	bpl.w	800153c <_Z11getSetPointv+0x39c>
		err_sig_prev = err_sig;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
		//-------------- Generate Ramp ---------------
		analogWrite(RampOut1(ramp_time++));
 80012a2:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 80012a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80012aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80012ae:	ed87 7a38 	vstr	s14, [r7, #224]	; 0xe0
 80012b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012b6:	ee17 0a90 	vmov	r0, s15
 80012ba:	f000 fa13 	bl	80016e4 <_Z8RampOut1l>
 80012be:	4603      	mov	r3, r0
 80012c0:	4618      	mov	r0, r3
 80012c2:	f000 fa3f 	bl	8001744 <_Z11analogWritet>

		//-------------- Read Signal -----------------
		pd1 = toVoltage(PD[0]);
 80012c6:	4b98      	ldr	r3, [pc, #608]	; (8001528 <_Z11getSetPointv+0x388>)
 80012c8:	881b      	ldrh	r3, [r3, #0]
 80012ca:	4618      	mov	r0, r3
 80012cc:	f000 fa58 	bl	8001780 <_Z9toVoltaget>
 80012d0:	eef0 7a40 	vmov.f32	s15, s0
 80012d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012d8:	ee17 3a90 	vmov	r3, s15
 80012dc:	b29a      	uxth	r2, r3
 80012de:	4b93      	ldr	r3, [pc, #588]	; (800152c <_Z11getSetPointv+0x38c>)
 80012e0:	801a      	strh	r2, [r3, #0]
		pd2 = toVoltage(PD[1]);
 80012e2:	4b91      	ldr	r3, [pc, #580]	; (8001528 <_Z11getSetPointv+0x388>)
 80012e4:	885b      	ldrh	r3, [r3, #2]
 80012e6:	4618      	mov	r0, r3
 80012e8:	f000 fa4a 	bl	8001780 <_Z9toVoltaget>
 80012ec:	eef0 7a40 	vmov.f32	s15, s0
 80012f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012f4:	ee17 3a90 	vmov	r3, s15
 80012f8:	b29a      	uxth	r2, r3
 80012fa:	4b8d      	ldr	r3, [pc, #564]	; (8001530 <_Z11getSetPointv+0x390>)
 80012fc:	801a      	strh	r2, [r3, #0]
		err_sig = pd1-pd2;
 80012fe:	4b8b      	ldr	r3, [pc, #556]	; (800152c <_Z11getSetPointv+0x38c>)
 8001300:	881b      	ldrh	r3, [r3, #0]
 8001302:	461a      	mov	r2, r3
 8001304:	4b8a      	ldr	r3, [pc, #552]	; (8001530 <_Z11getSetPointv+0x390>)
 8001306:	881b      	ldrh	r3, [r3, #0]
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	ee07 3a90 	vmov	s15, r3
 800130e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001312:	edc7 7a01 	vstr	s15, [r7, #4]

		//-------------- update signal ---------------
		float temp_sig = signal_filter[0];
 8001316:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800131a:	2100      	movs	r1, #0
 800131c:	4618      	mov	r0, r3
 800131e:	f000 fc5f 	bl	8001be0 <_ZNSt5dequeIfSaIfEEixEj>
 8001322:	4603      	mov	r3, r0
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
		signal_filter.pop_front();
 800132a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800132e:	4618      	mov	r0, r3
 8001330:	f000 fc67 	bl	8001c02 <_ZNSt5dequeIfSaIfEE9pop_frontEv>
		signal_filter.push_back(err_sig);
 8001334:	1d3a      	adds	r2, r7, #4
 8001336:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800133a:	4611      	mov	r1, r2
 800133c:	4618      	mov	r0, r3
 800133e:	f000 fc83 	bl	8001c48 <_ZNSt5dequeIfSaIfEE9push_backERKf>

		err_sig_avg_prev = err_sig_avg;
 8001342:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001346:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
		err_sig_avg = (err_sig_avg_prev*sf_size - temp_sig + err_sig)/sf_size;
 800134a:	4b72      	ldr	r3, [pc, #456]	; (8001514 <_Z11getSetPointv+0x374>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	ee07 3a90 	vmov	s15, r3
 8001352:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001356:	edd7 7a34 	vldr	s15, [r7, #208]	; 0xd0
 800135a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800135e:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8001362:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001366:	edd7 7a01 	vldr	s15, [r7, #4]
 800136a:	ee77 6a27 	vadd.f32	s13, s14, s15
 800136e:	4b69      	ldr	r3, [pc, #420]	; (8001514 <_Z11getSetPointv+0x374>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	ee07 3a90 	vmov	s15, r3
 8001376:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800137a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800137e:	edc7 7a3b 	vstr	s15, [r7, #236]	; 0xec

		//----------- update derivative --------------
		temp_sig = deri_filter[0];
 8001382:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001386:	2100      	movs	r1, #0
 8001388:	4618      	mov	r0, r3
 800138a:	f000 fc29 	bl	8001be0 <_ZNSt5dequeIfSaIfEEixEj>
 800138e:	4603      	mov	r3, r0
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
		deri_filter.pop_front();
 8001396:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800139a:	4618      	mov	r0, r3
 800139c:	f000 fc31 	bl	8001c02 <_ZNSt5dequeIfSaIfEE9pop_frontEv>
		deri_filter.push_back(err_sig - err_sig_prev);
 80013a0:	ed97 7a01 	vldr	s14, [r7, #4]
 80013a4:	edd7 7a35 	vldr	s15, [r7, #212]	; 0xd4
 80013a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013ac:	edc7 7a2f 	vstr	s15, [r7, #188]	; 0xbc
 80013b0:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 80013b4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80013b8:	4611      	mov	r1, r2
 80013ba:	4618      	mov	r0, r3
 80013bc:	f000 fc65 	bl	8001c8a <_ZNSt5dequeIfSaIfEE9push_backEOf>

		deri_avg_prev = deri_avg;
 80013c0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80013c4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
		deri_avg = (deri_avg_prev*df_size - temp_sig + (err_sig - err_sig_prev))/df_size;
 80013c8:	4b53      	ldr	r3, [pc, #332]	; (8001518 <_Z11getSetPointv+0x378>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	ee07 3a90 	vmov	s15, r3
 80013d0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013d4:	edd7 7a33 	vldr	s15, [r7, #204]	; 0xcc
 80013d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013dc:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 80013e0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80013e4:	edd7 6a01 	vldr	s13, [r7, #4]
 80013e8:	edd7 7a35 	vldr	s15, [r7, #212]	; 0xd4
 80013ec:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80013f0:	ee77 6a27 	vadd.f32	s13, s14, s15
 80013f4:	4b48      	ldr	r3, [pc, #288]	; (8001518 <_Z11getSetPointv+0x378>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	ee07 3a90 	vmov	s15, r3
 80013fc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001400:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001404:	edc7 7a3a 	vstr	s15, [r7, #232]	; 0xe8

		if(ramp_time > 1023 && ramp_time < 2730){
 8001408:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 800140c:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8001534 <_Z11getSetPointv+0x394>
 8001410:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001414:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001418:	dd7b      	ble.n	8001512 <_Z11getSetPointv+0x372>
 800141a:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 800141e:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8001538 <_Z11getSetPointv+0x398>
 8001422:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001426:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800142a:	d572      	bpl.n	8001512 <_Z11getSetPointv+0x372>
			//find maximum if find_max = true
			if(err_sig_avg > max_val && find_max){
 800142c:	ed97 7a3b 	vldr	s14, [r7, #236]	; 0xec
 8001430:	edd7 7a3d 	vldr	s15, [r7, #244]	; 0xf4
 8001434:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001438:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800143c:	dd10      	ble.n	8001460 <_Z11getSetPointv+0x2c0>
 800143e:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 8001442:	2b00      	cmp	r3, #0
 8001444:	d00c      	beq.n	8001460 <_Z11getSetPointv+0x2c0>
				max_val = err_sig_avg;
 8001446:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800144a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
				max_val_time = ramp_time;
 800144e:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 8001452:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001456:	ee17 3a90 	vmov	r3, s15
 800145a:	b29b      	uxth	r3, r3
 800145c:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			}
			//find minimum if find_min = true
			if(err_sig_avg < min_val && find_min){
 8001460:	ed97 7a3b 	vldr	s14, [r7, #236]	; 0xec
 8001464:	edd7 7a3c 	vldr	s15, [r7, #240]	; 0xf0
 8001468:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800146c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001470:	d510      	bpl.n	8001494 <_Z11getSetPointv+0x2f4>
 8001472:	f897 30e6 	ldrb.w	r3, [r7, #230]	; 0xe6
 8001476:	2b00      	cmp	r3, #0
 8001478:	d00c      	beq.n	8001494 <_Z11getSetPointv+0x2f4>
				min_val = err_sig_avg;
 800147a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800147e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
				min_val_time = ramp_time;
 8001482:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 8001486:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800148a:	ee17 3a90 	vmov	r3, s15
 800148e:	b29b      	uxth	r3, r3
 8001490:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
			}

			if(deri_avg_prev * deri_avg < 0){
 8001494:	ed97 7a33 	vldr	s14, [r7, #204]	; 0xcc
 8001498:	edd7 7a3a 	vldr	s15, [r7, #232]	; 0xe8
 800149c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014a0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80014a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014a8:	d533      	bpl.n	8001512 <_Z11getSetPointv+0x372>
				// find local minima
				if(min_val < err_sig_avg){
 80014aa:	ed97 7a3c 	vldr	s14, [r7, #240]	; 0xf0
 80014ae:	edd7 7a3b 	vldr	s15, [r7, #236]	; 0xec
 80014b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014ba:	d510      	bpl.n	80014de <_Z11getSetPointv+0x33e>
					minima_time.push_back(min_val_time);
 80014bc:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80014c0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80014c4:	4611      	mov	r1, r2
 80014c6:	4618      	mov	r0, r3
 80014c8:	f000 fbf0 	bl	8001cac <_ZNSt5dequeItSaItEE9push_backERKt>
					min_val = 5;
 80014cc:	4b14      	ldr	r3, [pc, #80]	; (8001520 <_Z11getSetPointv+0x380>)
 80014ce:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
					find_min = false;
 80014d2:	2300      	movs	r3, #0
 80014d4:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6
					find_max = true;
 80014d8:	2301      	movs	r3, #1
 80014da:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
				}
				// find local maxima
				if(max_val >err_sig_avg){
 80014de:	ed97 7a3d 	vldr	s14, [r7, #244]	; 0xf4
 80014e2:	edd7 7a3b 	vldr	s15, [r7, #236]	; 0xec
 80014e6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014ee:	dd10      	ble.n	8001512 <_Z11getSetPointv+0x372>
					maxima_time.push_back(max_val_time);
 80014f0:	f107 025a 	add.w	r2, r7, #90	; 0x5a
 80014f4:	f107 0308 	add.w	r3, r7, #8
 80014f8:	4611      	mov	r1, r2
 80014fa:	4618      	mov	r0, r3
 80014fc:	f000 fbd6 	bl	8001cac <_ZNSt5dequeItSaItEE9push_backERKt>
					max_val = -5;
 8001500:	4b06      	ldr	r3, [pc, #24]	; (800151c <_Z11getSetPointv+0x37c>)
 8001502:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
					find_max = false;
 8001506:	2300      	movs	r3, #0
 8001508:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
					find_min = true;
 800150c:	2301      	movs	r3, #1
 800150e:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6
	while(ramp_time < ramp_end_time){
 8001512:	e6b9      	b.n	8001288 <_Z11getSetPointv+0xe8>
 8001514:	20000100 	.word	0x20000100
 8001518:	20000104 	.word	0x20000104
 800151c:	c0a00000 	.word	0xc0a00000
 8001520:	40a00000 	.word	0x40a00000
 8001524:	45fff000 	.word	0x45fff000
 8001528:	2000023c 	.word	0x2000023c
 800152c:	20000240 	.word	0x20000240
 8001530:	20000242 	.word	0x20000242
 8001534:	447fc000 	.word	0x447fc000
 8001538:	452aa000 	.word	0x452aa000
			}
		}
	}

	//finding lockpoint
	int len = maxima_time.size();
 800153c:	f107 0308 	add.w	r3, r7, #8
 8001540:	4618      	mov	r0, r3
 8001542:	f000 fbd4 	bl	8001cee <_ZNKSt5dequeItSaItEE4sizeEv>
 8001546:	4603      	mov	r3, r0
 8001548:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	float sig_amp = 0;
 800154c:	f04f 0300 	mov.w	r3, #0
 8001550:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

	for (uint8_t i=0; i<len; i++){
 8001554:	2300      	movs	r3, #0
 8001556:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
 800155a:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 800155e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8001562:	429a      	cmp	r2, r3
 8001564:	f340 8082 	ble.w	800166c <_Z11getSetPointv+0x4cc>
	    if(i == maxima_time.size()-1) break;
 8001568:	f897 40db 	ldrb.w	r4, [r7, #219]	; 0xdb
 800156c:	f107 0308 	add.w	r3, r7, #8
 8001570:	4618      	mov	r0, r3
 8001572:	f000 fbbc 	bl	8001cee <_ZNKSt5dequeItSaItEE4sizeEv>
 8001576:	4603      	mov	r3, r0
 8001578:	3b01      	subs	r3, #1
 800157a:	429c      	cmp	r4, r3
 800157c:	bf0c      	ite	eq
 800157e:	2301      	moveq	r3, #1
 8001580:	2300      	movne	r3, #0
 8001582:	b2db      	uxtb	r3, r3
 8001584:	2b00      	cmp	r3, #0
 8001586:	d170      	bne.n	800166a <_Z11getSetPointv+0x4ca>
	    sig_amp = maxima_time[i] - minima_time[i];
 8001588:	f897 20db 	ldrb.w	r2, [r7, #219]	; 0xdb
 800158c:	f107 0308 	add.w	r3, r7, #8
 8001590:	4611      	mov	r1, r2
 8001592:	4618      	mov	r0, r3
 8001594:	f000 fbbd 	bl	8001d12 <_ZNSt5dequeItSaItEEixEj>
 8001598:	4603      	mov	r3, r0
 800159a:	881b      	ldrh	r3, [r3, #0]
 800159c:	461c      	mov	r4, r3
 800159e:	f897 20db 	ldrb.w	r2, [r7, #219]	; 0xdb
 80015a2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80015a6:	4611      	mov	r1, r2
 80015a8:	4618      	mov	r0, r3
 80015aa:	f000 fbb2 	bl	8001d12 <_ZNSt5dequeItSaItEEixEj>
 80015ae:	4603      	mov	r3, r0
 80015b0:	881b      	ldrh	r3, [r3, #0]
 80015b2:	1ae3      	subs	r3, r4, r3
 80015b4:	ee07 3a90 	vmov	s15, r3
 80015b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015bc:	edc7 7a37 	vstr	s15, [r7, #220]	; 0xdc
//	    sig_amp = *(max_ptr+(i+max_front)%len) - *(min_ptr+(i+min_front)%len);
	    if(abs(threshold-sig_amp)<0.25*sig_amp){
 80015c0:	4b42      	ldr	r3, [pc, #264]	; (80016cc <_Z11getSetPointv+0x52c>)
 80015c2:	ed93 7a00 	vldr	s14, [r3]
 80015c6:	edd7 7a37 	vldr	s15, [r7, #220]	; 0xdc
 80015ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015ce:	eeb0 0a67 	vmov.f32	s0, s15
 80015d2:	f7ff fd29 	bl	8001028 <_ZSt3absf>
 80015d6:	ee10 3a10 	vmov	r3, s0
 80015da:	4618      	mov	r0, r3
 80015dc:	f7fe ff80 	bl	80004e0 <__aeabi_f2d>
 80015e0:	4604      	mov	r4, r0
 80015e2:	460d      	mov	r5, r1
 80015e4:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 80015e8:	f7fe ff7a 	bl	80004e0 <__aeabi_f2d>
 80015ec:	f04f 0200 	mov.w	r2, #0
 80015f0:	4b37      	ldr	r3, [pc, #220]	; (80016d0 <_Z11getSetPointv+0x530>)
 80015f2:	f7fe ffcd 	bl	8000590 <__aeabi_dmul>
 80015f6:	4602      	mov	r2, r0
 80015f8:	460b      	mov	r3, r1
 80015fa:	2101      	movs	r1, #1
 80015fc:	460e      	mov	r6, r1
 80015fe:	4620      	mov	r0, r4
 8001600:	4629      	mov	r1, r5
 8001602:	f7ff fa37 	bl	8000a74 <__aeabi_dcmplt>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d101      	bne.n	8001610 <_Z11getSetPointv+0x470>
 800160c:	2300      	movs	r3, #0
 800160e:	461e      	mov	r6, r3
 8001610:	b2f3      	uxtb	r3, r6
 8001612:	2b00      	cmp	r3, #0
 8001614:	d023      	beq.n	800165e <_Z11getSetPointv+0x4be>
	      lockpoint_found = true;
 8001616:	2301      	movs	r3, #1
 8001618:	f887 30e5 	strb.w	r3, [r7, #229]	; 0xe5
	      set_point_time = (maxima_time[i] + minima_time[i])/2;
 800161c:	f897 20db 	ldrb.w	r2, [r7, #219]	; 0xdb
 8001620:	f107 0308 	add.w	r3, r7, #8
 8001624:	4611      	mov	r1, r2
 8001626:	4618      	mov	r0, r3
 8001628:	f000 fb73 	bl	8001d12 <_ZNSt5dequeItSaItEEixEj>
 800162c:	4603      	mov	r3, r0
 800162e:	881b      	ldrh	r3, [r3, #0]
 8001630:	461c      	mov	r4, r3
 8001632:	f897 20db 	ldrb.w	r2, [r7, #219]	; 0xdb
 8001636:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800163a:	4611      	mov	r1, r2
 800163c:	4618      	mov	r0, r3
 800163e:	f000 fb68 	bl	8001d12 <_ZNSt5dequeItSaItEEixEj>
 8001642:	4603      	mov	r3, r0
 8001644:	881b      	ldrh	r3, [r3, #0]
 8001646:	4423      	add	r3, r4
 8001648:	2b00      	cmp	r3, #0
 800164a:	da00      	bge.n	800164e <_Z11getSetPointv+0x4ae>
 800164c:	3301      	adds	r3, #1
 800164e:	105b      	asrs	r3, r3, #1
 8001650:	ee07 3a90 	vmov	s15, r3
 8001654:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001658:	4b1e      	ldr	r3, [pc, #120]	; (80016d4 <_Z11getSetPointv+0x534>)
 800165a:	edc3 7a00 	vstr	s15, [r3]
	for (uint8_t i=0; i<len; i++){
 800165e:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8001662:	3301      	adds	r3, #1
 8001664:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
 8001668:	e777      	b.n	800155a <_Z11getSetPointv+0x3ba>
	    if(i == maxima_time.size()-1) break;
 800166a:	bf00      	nop
	    }
	  }
	if(lockpoint_found){
 800166c:	f897 30e5 	ldrb.w	r3, [r7, #229]	; 0xe5
 8001670:	2b00      	cmp	r3, #0
 8001672:	d003      	beq.n	800167c <_Z11getSetPointv+0x4dc>
	    set_point = sig_amp;
 8001674:	4a18      	ldr	r2, [pc, #96]	; (80016d8 <_Z11getSetPointv+0x538>)
 8001676:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800167a:	6013      	str	r3, [r2, #0]
//	    Serial.print(" mV; Lock-point time (from start of scan): ");
//	    Serial.print((max_front+min_front)/2/1000.);
//	    Serial.println(" ms");
	  }

	  if(lockpoint_found==false) {
 800167c:	f897 30e5 	ldrb.w	r3, [r7, #229]	; 0xe5
 8001680:	2b00      	cmp	r3, #0
 8001682:	d102      	bne.n	800168a <_Z11getSetPointv+0x4ea>
	      accumulator = 100; //triggers relocking
 8001684:	4b15      	ldr	r3, [pc, #84]	; (80016dc <_Z11getSetPointv+0x53c>)
 8001686:	4a16      	ldr	r2, [pc, #88]	; (80016e0 <_Z11getSetPointv+0x540>)
 8001688:	601a      	str	r2, [r3, #0]
//	      Serial.println("Lock-point not found");
	    }

	  return set_point_time;
 800168a:	4b12      	ldr	r3, [pc, #72]	; (80016d4 <_Z11getSetPointv+0x534>)
 800168c:	edd3 7a00 	vldr	s15, [r3]
 8001690:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001694:	ee17 3a90 	vmov	r3, s15
 8001698:	b29c      	uxth	r4, r3
	deque<uint16_t> maxima_time;
 800169a:	f107 0308 	add.w	r3, r7, #8
 800169e:	4618      	mov	r0, r3
 80016a0:	f000 fa79 	bl	8001b96 <_ZNSt5dequeItSaItEED1Ev>
	deque<uint16_t> minima_time;
 80016a4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80016a8:	4618      	mov	r0, r3
 80016aa:	f000 fa74 	bl	8001b96 <_ZNSt5dequeItSaItEED1Ev>
	deque<float> deri_filter(df_size, 0);
 80016ae:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80016b2:	4618      	mov	r0, r3
 80016b4:	f000 fa0b 	bl	8001ace <_ZNSt5dequeIfSaIfEED1Ev>
	deque<float> signal_filter(sf_size, 0);
 80016b8:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80016bc:	4618      	mov	r0, r3
 80016be:	f000 fa06 	bl	8001ace <_ZNSt5dequeIfSaIfEED1Ev>
	  return set_point_time;
 80016c2:	4623      	mov	r3, r4
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	37fc      	adds	r7, #252	; 0xfc
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016cc:	200000fc 	.word	0x200000fc
 80016d0:	3fd00000 	.word	0x3fd00000
 80016d4:	2000024c 	.word	0x2000024c
 80016d8:	20000248 	.word	0x20000248
 80016dc:	2000026c 	.word	0x2000026c
 80016e0:	42c80000 	.word	0x42c80000

080016e4 <_Z8RampOut1l>:

uint16_t RampOut1(long ramp_time) {
 80016e4:	b480      	push	{r7}
 80016e6:	b085      	sub	sp, #20
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
	uint16_t ramp;
	uint16_t amp = 4095;
 80016ec:	f640 73ff 	movw	r3, #4095	; 0xfff
 80016f0:	81bb      	strh	r3, [r7, #12]
	uint16_t half_period = 4095;
 80016f2:	f640 73ff 	movw	r3, #4095	; 0xfff
 80016f6:	817b      	strh	r3, [r7, #10]
	if(ramp_time <= half_period)
 80016f8:	897b      	ldrh	r3, [r7, #10]
 80016fa:	687a      	ldr	r2, [r7, #4]
 80016fc:	429a      	cmp	r2, r3
 80016fe:	dc0a      	bgt.n	8001716 <_Z8RampOut1l+0x32>
		ramp = (amp/(half_period))*ramp_time;
 8001700:	89ba      	ldrh	r2, [r7, #12]
 8001702:	897b      	ldrh	r3, [r7, #10]
 8001704:	fbb2 f3f3 	udiv	r3, r2, r3
 8001708:	b29a      	uxth	r2, r3
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	b29b      	uxth	r3, r3
 800170e:	fb12 f303 	smulbb	r3, r2, r3
 8001712:	81fb      	strh	r3, [r7, #14]
 8001714:	e00e      	b.n	8001734 <_Z8RampOut1l+0x50>
    else
    	ramp = 2*amp-(amp/(half_period))*ramp_time;
 8001716:	89bb      	ldrh	r3, [r7, #12]
 8001718:	005b      	lsls	r3, r3, #1
 800171a:	b29a      	uxth	r2, r3
 800171c:	89b9      	ldrh	r1, [r7, #12]
 800171e:	897b      	ldrh	r3, [r7, #10]
 8001720:	fbb1 f3f3 	udiv	r3, r1, r3
 8001724:	b299      	uxth	r1, r3
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	b29b      	uxth	r3, r3
 800172a:	fb11 f303 	smulbb	r3, r1, r3
 800172e:	b29b      	uxth	r3, r3
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	81fb      	strh	r3, [r7, #14]
    return ramp;
 8001734:	89fb      	ldrh	r3, [r7, #14]
}
 8001736:	4618      	mov	r0, r3
 8001738:	3714      	adds	r7, #20
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr
	...

08001744 <_Z11analogWritet>:

void analogWrite(uint16_t val){
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
 800174a:	4603      	mov	r3, r0
 800174c:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin (GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 800174e:	2200      	movs	r2, #0
 8001750:	2108      	movs	r1, #8
 8001752:	4809      	ldr	r0, [pc, #36]	; (8001778 <_Z11analogWritet+0x34>)
 8001754:	f003 fe3c 	bl	80053d0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit (&hspi1, (uint8_t *)&val, sizeof(val)/sizeof(uint16_t), 1);
 8001758:	1db9      	adds	r1, r7, #6
 800175a:	2301      	movs	r3, #1
 800175c:	2201      	movs	r2, #1
 800175e:	4807      	ldr	r0, [pc, #28]	; (800177c <_Z11analogWritet+0x38>)
 8001760:	f004 fb51 	bl	8005e06 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin (GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 8001764:	2201      	movs	r2, #1
 8001766:	2108      	movs	r1, #8
 8001768:	4803      	ldr	r0, [pc, #12]	; (8001778 <_Z11analogWritet+0x34>)
 800176a:	f003 fe31 	bl	80053d0 <HAL_GPIO_WritePin>
}
 800176e:	bf00      	nop
 8001770:	3708      	adds	r7, #8
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	40020000 	.word	0x40020000
 800177c:	2000028c 	.word	0x2000028c

08001780 <_Z9toVoltaget>:

float toVoltage(uint16_t value){
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
 8001786:	4603      	mov	r3, r0
 8001788:	80fb      	strh	r3, [r7, #6]
	return float(value)*3300.0/4095.0;
 800178a:	88fb      	ldrh	r3, [r7, #6]
 800178c:	ee07 3a90 	vmov	s15, r3
 8001790:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001794:	ee17 0a90 	vmov	r0, s15
 8001798:	f7fe fea2 	bl	80004e0 <__aeabi_f2d>
 800179c:	a30e      	add	r3, pc, #56	; (adr r3, 80017d8 <_Z9toVoltaget+0x58>)
 800179e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017a2:	f7fe fef5 	bl	8000590 <__aeabi_dmul>
 80017a6:	4602      	mov	r2, r0
 80017a8:	460b      	mov	r3, r1
 80017aa:	4610      	mov	r0, r2
 80017ac:	4619      	mov	r1, r3
 80017ae:	a30c      	add	r3, pc, #48	; (adr r3, 80017e0 <_Z9toVoltaget+0x60>)
 80017b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017b4:	f7ff f816 	bl	80007e4 <__aeabi_ddiv>
 80017b8:	4602      	mov	r2, r0
 80017ba:	460b      	mov	r3, r1
 80017bc:	4610      	mov	r0, r2
 80017be:	4619      	mov	r1, r3
 80017c0:	f7ff f980 	bl	8000ac4 <__aeabi_d2f>
 80017c4:	4603      	mov	r3, r0
 80017c6:	ee07 3a90 	vmov	s15, r3
}
 80017ca:	eeb0 0a67 	vmov.f32	s0, s15
 80017ce:	3708      	adds	r7, #8
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	f3af 8000 	nop.w
 80017d8:	00000000 	.word	0x00000000
 80017dc:	40a9c800 	.word	0x40a9c800
 80017e0:	00000000 	.word	0x00000000
 80017e4:	40affe00 	.word	0x40affe00

080017e8 <_Z8startPIDv>:

void startPID(){
 80017e8:	b5b0      	push	{r4, r5, r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
//	Serial.println("In PID loop");
	// float err_sig = (analogRead(0) - analogRead(1))/1024*5;
	pd1 = toVoltage(PD[0]);
 80017ee:	4b8a      	ldr	r3, [pc, #552]	; (8001a18 <_Z8startPIDv+0x230>)
 80017f0:	881b      	ldrh	r3, [r3, #0]
 80017f2:	4618      	mov	r0, r3
 80017f4:	f7ff ffc4 	bl	8001780 <_Z9toVoltaget>
 80017f8:	eef0 7a40 	vmov.f32	s15, s0
 80017fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001800:	ee17 3a90 	vmov	r3, s15
 8001804:	b29a      	uxth	r2, r3
 8001806:	4b85      	ldr	r3, [pc, #532]	; (8001a1c <_Z8startPIDv+0x234>)
 8001808:	801a      	strh	r2, [r3, #0]
	pd2 = toVoltage(PD[1]);
 800180a:	4b83      	ldr	r3, [pc, #524]	; (8001a18 <_Z8startPIDv+0x230>)
 800180c:	885b      	ldrh	r3, [r3, #2]
 800180e:	4618      	mov	r0, r3
 8001810:	f7ff ffb6 	bl	8001780 <_Z9toVoltaget>
 8001814:	eef0 7a40 	vmov.f32	s15, s0
 8001818:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800181c:	ee17 3a90 	vmov	r3, s15
 8001820:	b29a      	uxth	r2, r3
 8001822:	4b7f      	ldr	r3, [pc, #508]	; (8001a20 <_Z8startPIDv+0x238>)
 8001824:	801a      	strh	r2, [r3, #0]
	float error_sig = pd1-pd2;
 8001826:	4b7d      	ldr	r3, [pc, #500]	; (8001a1c <_Z8startPIDv+0x234>)
 8001828:	881b      	ldrh	r3, [r3, #0]
 800182a:	461a      	mov	r2, r3
 800182c:	4b7c      	ldr	r3, [pc, #496]	; (8001a20 <_Z8startPIDv+0x238>)
 800182e:	881b      	ldrh	r3, [r3, #0]
 8001830:	1ad3      	subs	r3, r2, r3
 8001832:	ee07 3a90 	vmov	s15, r3
 8001836:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800183a:	edc7 7a01 	vstr	s15, [r7, #4]
	// float error_sig = 0;
//	Serial.println("Hello");
	float dt = 1000/loop_speed.param_value;
 800183e:	4b79      	ldr	r3, [pc, #484]	; (8001a24 <_Z8startPIDv+0x23c>)
 8001840:	ed93 7a06 	vldr	s14, [r3, #24]
 8001844:	eddf 6a78 	vldr	s13, [pc, #480]	; 8001a28 <_Z8startPIDv+0x240>
 8001848:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800184c:	edc7 7a00 	vstr	s15, [r7]
	error = set_point - error_sig;
 8001850:	4b76      	ldr	r3, [pc, #472]	; (8001a2c <_Z8startPIDv+0x244>)
 8001852:	ed93 7a00 	vldr	s14, [r3]
 8001856:	edd7 7a01 	vldr	s15, [r7, #4]
 800185a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800185e:	4b74      	ldr	r3, [pc, #464]	; (8001a30 <_Z8startPIDv+0x248>)
 8001860:	edc3 7a00 	vstr	s15, [r3]
	error = (alpha.param_value*error_previous) + (1-alpha.param_value)*error;
 8001864:	4b73      	ldr	r3, [pc, #460]	; (8001a34 <_Z8startPIDv+0x24c>)
 8001866:	ed93 7a06 	vldr	s14, [r3, #24]
 800186a:	4b73      	ldr	r3, [pc, #460]	; (8001a38 <_Z8startPIDv+0x250>)
 800186c:	edd3 7a00 	vldr	s15, [r3]
 8001870:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001874:	4b6f      	ldr	r3, [pc, #444]	; (8001a34 <_Z8startPIDv+0x24c>)
 8001876:	edd3 7a06 	vldr	s15, [r3, #24]
 800187a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800187e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001882:	4b6b      	ldr	r3, [pc, #428]	; (8001a30 <_Z8startPIDv+0x248>)
 8001884:	edd3 7a00 	vldr	s15, [r3]
 8001888:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800188c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001890:	4b67      	ldr	r3, [pc, #412]	; (8001a30 <_Z8startPIDv+0x248>)
 8001892:	edc3 7a00 	vstr	s15, [r3]
	P_out = pterm_piezo.param_value*(error);
 8001896:	4b69      	ldr	r3, [pc, #420]	; (8001a3c <_Z8startPIDv+0x254>)
 8001898:	ed93 7a06 	vldr	s14, [r3, #24]
 800189c:	4b64      	ldr	r3, [pc, #400]	; (8001a30 <_Z8startPIDv+0x248>)
 800189e:	edd3 7a00 	vldr	s15, [r3]
 80018a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018a6:	4b66      	ldr	r3, [pc, #408]	; (8001a40 <_Z8startPIDv+0x258>)
 80018a8:	edc3 7a00 	vstr	s15, [r3]

	if(P_out>=4)
 80018ac:	4b64      	ldr	r3, [pc, #400]	; (8001a40 <_Z8startPIDv+0x258>)
 80018ae:	edd3 7a00 	vldr	s15, [r3]
 80018b2:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80018b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018be:	db03      	blt.n	80018c8 <_Z8startPIDv+0xe0>
	P_out = 4;
 80018c0:	4b5f      	ldr	r3, [pc, #380]	; (8001a40 <_Z8startPIDv+0x258>)
 80018c2:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 80018c6:	601a      	str	r2, [r3, #0]
	if(P_out<=-4)
 80018c8:	4b5d      	ldr	r3, [pc, #372]	; (8001a40 <_Z8startPIDv+0x258>)
 80018ca:	edd3 7a00 	vldr	s15, [r3]
 80018ce:	eeb9 7a00 	vmov.f32	s14, #144	; 0xc0800000 -4.0
 80018d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018da:	d802      	bhi.n	80018e2 <_Z8startPIDv+0xfa>
	P_out = -4;
 80018dc:	4b58      	ldr	r3, [pc, #352]	; (8001a40 <_Z8startPIDv+0x258>)
 80018de:	4a59      	ldr	r2, [pc, #356]	; (8001a44 <_Z8startPIDv+0x25c>)
 80018e0:	601a      	str	r2, [r3, #0]

	accumulator += error;  // accumulator is sum of errors (for integral gain term)
 80018e2:	4b59      	ldr	r3, [pc, #356]	; (8001a48 <_Z8startPIDv+0x260>)
 80018e4:	ed93 7a00 	vldr	s14, [r3]
 80018e8:	4b51      	ldr	r3, [pc, #324]	; (8001a30 <_Z8startPIDv+0x248>)
 80018ea:	edd3 7a00 	vldr	s15, [r3]
 80018ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018f2:	4b55      	ldr	r3, [pc, #340]	; (8001a48 <_Z8startPIDv+0x260>)
 80018f4:	edc3 7a00 	vstr	s15, [r3]
	accumulator_squared += error + (1/stime.param_value)*accumulator*dt;
 80018f8:	4b54      	ldr	r3, [pc, #336]	; (8001a4c <_Z8startPIDv+0x264>)
 80018fa:	edd3 7a06 	vldr	s15, [r3, #24]
 80018fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001902:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001906:	4b50      	ldr	r3, [pc, #320]	; (8001a48 <_Z8startPIDv+0x260>)
 8001908:	edd3 7a00 	vldr	s15, [r3]
 800190c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001910:	edd7 7a00 	vldr	s15, [r7]
 8001914:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001918:	4b45      	ldr	r3, [pc, #276]	; (8001a30 <_Z8startPIDv+0x248>)
 800191a:	edd3 7a00 	vldr	s15, [r3]
 800191e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001922:	4b4b      	ldr	r3, [pc, #300]	; (8001a50 <_Z8startPIDv+0x268>)
 8001924:	edd3 7a00 	vldr	s15, [r3]
 8001928:	ee77 7a27 	vadd.f32	s15, s14, s15
 800192c:	4b48      	ldr	r3, [pc, #288]	; (8001a50 <_Z8startPIDv+0x268>)
 800192e:	edc3 7a00 	vstr	s15, [r3]

	d_error = error-error_previous;
 8001932:	4b3f      	ldr	r3, [pc, #252]	; (8001a30 <_Z8startPIDv+0x248>)
 8001934:	ed93 7a00 	vldr	s14, [r3]
 8001938:	4b3f      	ldr	r3, [pc, #252]	; (8001a38 <_Z8startPIDv+0x250>)
 800193a:	edd3 7a00 	vldr	s15, [r3]
 800193e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001942:	4b44      	ldr	r3, [pc, #272]	; (8001a54 <_Z8startPIDv+0x26c>)
 8001944:	edc3 7a00 	vstr	s15, [r3]
	d_error = 0.9*d_error_previous + 0.1*d_error;
 8001948:	4b43      	ldr	r3, [pc, #268]	; (8001a58 <_Z8startPIDv+0x270>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4618      	mov	r0, r3
 800194e:	f7fe fdc7 	bl	80004e0 <__aeabi_f2d>
 8001952:	a32d      	add	r3, pc, #180	; (adr r3, 8001a08 <_Z8startPIDv+0x220>)
 8001954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001958:	f7fe fe1a 	bl	8000590 <__aeabi_dmul>
 800195c:	4602      	mov	r2, r0
 800195e:	460b      	mov	r3, r1
 8001960:	4614      	mov	r4, r2
 8001962:	461d      	mov	r5, r3
 8001964:	4b3b      	ldr	r3, [pc, #236]	; (8001a54 <_Z8startPIDv+0x26c>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4618      	mov	r0, r3
 800196a:	f7fe fdb9 	bl	80004e0 <__aeabi_f2d>
 800196e:	a328      	add	r3, pc, #160	; (adr r3, 8001a10 <_Z8startPIDv+0x228>)
 8001970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001974:	f7fe fe0c 	bl	8000590 <__aeabi_dmul>
 8001978:	4602      	mov	r2, r0
 800197a:	460b      	mov	r3, r1
 800197c:	4620      	mov	r0, r4
 800197e:	4629      	mov	r1, r5
 8001980:	f7fe fc50 	bl	8000224 <__adddf3>
 8001984:	4602      	mov	r2, r0
 8001986:	460b      	mov	r3, r1
 8001988:	4610      	mov	r0, r2
 800198a:	4619      	mov	r1, r3
 800198c:	f7ff f89a 	bl	8000ac4 <__aeabi_d2f>
 8001990:	4603      	mov	r3, r0
 8001992:	4a30      	ldr	r2, [pc, #192]	; (8001a54 <_Z8startPIDv+0x26c>)
 8001994:	6013      	str	r3, [r2, #0]

	PIID_out = P_out+((pterm_piezo.param_value*(1/itime.param_value)*accumulator_squared*dt)+(dtime.param_value/dt)*(d_error));
 8001996:	4b29      	ldr	r3, [pc, #164]	; (8001a3c <_Z8startPIDv+0x254>)
 8001998:	ed93 7a06 	vldr	s14, [r3, #24]
 800199c:	4b2f      	ldr	r3, [pc, #188]	; (8001a5c <_Z8startPIDv+0x274>)
 800199e:	edd3 6a06 	vldr	s13, [r3, #24]
 80019a2:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80019a6:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80019aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019ae:	4b28      	ldr	r3, [pc, #160]	; (8001a50 <_Z8startPIDv+0x268>)
 80019b0:	edd3 7a00 	vldr	s15, [r3]
 80019b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019b8:	edd7 7a00 	vldr	s15, [r7]
 80019bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019c0:	4b27      	ldr	r3, [pc, #156]	; (8001a60 <_Z8startPIDv+0x278>)
 80019c2:	ed93 6a06 	vldr	s12, [r3, #24]
 80019c6:	edd7 7a00 	vldr	s15, [r7]
 80019ca:	eec6 6a27 	vdiv.f32	s13, s12, s15
 80019ce:	4b21      	ldr	r3, [pc, #132]	; (8001a54 <_Z8startPIDv+0x26c>)
 80019d0:	edd3 7a00 	vldr	s15, [r3]
 80019d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019d8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80019dc:	4b18      	ldr	r3, [pc, #96]	; (8001a40 <_Z8startPIDv+0x258>)
 80019de:	edd3 7a00 	vldr	s15, [r3]
 80019e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019e6:	4b1f      	ldr	r3, [pc, #124]	; (8001a64 <_Z8startPIDv+0x27c>)
 80019e8:	edc3 7a00 	vstr	s15, [r3]

	error_previous = error;
 80019ec:	4b10      	ldr	r3, [pc, #64]	; (8001a30 <_Z8startPIDv+0x248>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a11      	ldr	r2, [pc, #68]	; (8001a38 <_Z8startPIDv+0x250>)
 80019f2:	6013      	str	r3, [r2, #0]
	d_error_previous = d_error;
 80019f4:	4b17      	ldr	r3, [pc, #92]	; (8001a54 <_Z8startPIDv+0x26c>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a17      	ldr	r2, [pc, #92]	; (8001a58 <_Z8startPIDv+0x270>)
 80019fa:	6013      	str	r3, [r2, #0]
}
 80019fc:	bf00      	nop
 80019fe:	3708      	adds	r7, #8
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bdb0      	pop	{r4, r5, r7, pc}
 8001a04:	f3af 8000 	nop.w
 8001a08:	cccccccd 	.word	0xcccccccd
 8001a0c:	3feccccc 	.word	0x3feccccc
 8001a10:	9999999a 	.word	0x9999999a
 8001a14:	3fb99999 	.word	0x3fb99999
 8001a18:	2000023c 	.word	0x2000023c
 8001a1c:	20000240 	.word	0x20000240
 8001a20:	20000242 	.word	0x20000242
 8001a24:	2000001c 	.word	0x2000001c
 8001a28:	447a0000 	.word	0x447a0000
 8001a2c:	20000248 	.word	0x20000248
 8001a30:	2000025c 	.word	0x2000025c
 8001a34:	200000a8 	.word	0x200000a8
 8001a38:	20000260 	.word	0x20000260
 8001a3c:	20000038 	.word	0x20000038
 8001a40:	20000258 	.word	0x20000258
 8001a44:	c0800000 	.word	0xc0800000
 8001a48:	2000026c 	.word	0x2000026c
 8001a4c:	20000070 	.word	0x20000070
 8001a50:	20000270 	.word	0x20000270
 8001a54:	20000264 	.word	0x20000264
 8001a58:	20000268 	.word	0x20000268
 8001a5c:	20000054 	.word	0x20000054
 8001a60:	2000008c 	.word	0x2000008c
 8001a64:	20000254 	.word	0x20000254

08001a68 <_ZNSaIfEC1Ev>:
#endif

      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 3035. std::allocator's constructors should be constexpr
      _GLIBCXX20_CONSTEXPR
      allocator() _GLIBCXX_NOTHROW { }
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
 8001a70:	6878      	ldr	r0, [r7, #4]
 8001a72:	f000 f95f 	bl	8001d34 <_ZN9__gnu_cxx13new_allocatorIfEC1Ev>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	4618      	mov	r0, r3
 8001a7a:	3708      	adds	r7, #8
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}

08001a80 <_ZNSaIfED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
 8001a88:	6878      	ldr	r0, [r7, #4]
 8001a8a:	f000 f95e 	bl	8001d4a <_ZN9__gnu_cxx13new_allocatorIfED1Ev>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4618      	mov	r0, r3
 8001a92:	3708      	adds	r7, #8
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}

08001a98 <_ZNSt5dequeIfSaIfEEC1EjRKfRKS0_>:
       *  @param  __value  An element to copy.
       *  @param  __a  An allocator.
       *
       *  This constructor fills the %deque with @a __n copies of @a __value.
       */
      deque(size_type __n, const value_type& __value,
 8001a98:	b590      	push	{r4, r7, lr}
 8001a9a:	b085      	sub	sp, #20
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	60f8      	str	r0, [r7, #12]
 8001aa0:	60b9      	str	r1, [r7, #8]
 8001aa2:	607a      	str	r2, [r7, #4]
 8001aa4:	603b      	str	r3, [r7, #0]
	    const allocator_type& __a = allocator_type())
      : _Base(__a, _S_check_init_len(__n, __a))
 8001aa6:	68fc      	ldr	r4, [r7, #12]
 8001aa8:	6839      	ldr	r1, [r7, #0]
 8001aaa:	68b8      	ldr	r0, [r7, #8]
 8001aac:	f000 f958 	bl	8001d60 <_ZNSt5dequeIfSaIfEE17_S_check_init_lenEjRKS0_>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	461a      	mov	r2, r3
 8001ab4:	6839      	ldr	r1, [r7, #0]
 8001ab6:	4620      	mov	r0, r4
 8001ab8:	f000 f97a 	bl	8001db0 <_ZNSt11_Deque_baseIfSaIfEEC1ERKS0_j>
      { _M_fill_initialize(__value); }
 8001abc:	6879      	ldr	r1, [r7, #4]
 8001abe:	68f8      	ldr	r0, [r7, #12]
 8001ac0:	f000 f9ac 	bl	8001e1c <_ZNSt5dequeIfSaIfEE18_M_fill_initializeERKf>
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3714      	adds	r7, #20
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd90      	pop	{r4, r7, pc}

08001ace <_ZNSt5dequeIfSaIfEED1Ev>:
      /**
       *  The dtor only erases the elements, and note that if the elements
       *  themselves are pointers, the pointed-to memory is not touched in any
       *  way.  Managing the pointer is the user's responsibility.
       */
      ~deque()
 8001ace:	b580      	push	{r7, lr}
 8001ad0:	b08a      	sub	sp, #40	; 0x28
 8001ad2:	af00      	add	r7, sp, #0
 8001ad4:	6078      	str	r0, [r7, #4]
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
 8001ad6:	f107 0308 	add.w	r3, r7, #8
 8001ada:	6879      	ldr	r1, [r7, #4]
 8001adc:	4618      	mov	r0, r3
 8001ade:	f000 f9d3 	bl	8001e88 <_ZNSt5dequeIfSaIfEE5beginEv>
 8001ae2:	f107 0318 	add.w	r3, r7, #24
 8001ae6:	6879      	ldr	r1, [r7, #4]
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f000 f9dc 	bl	8001ea6 <_ZNSt5dequeIfSaIfEE3endEv>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	4618      	mov	r0, r3
 8001af2:	f000 f9e7 	bl	8001ec4 <_ZNSt11_Deque_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8001af6:	4603      	mov	r3, r0
 8001af8:	f107 0218 	add.w	r2, r7, #24
 8001afc:	f107 0108 	add.w	r1, r7, #8
 8001b00:	6878      	ldr	r0, [r7, #4]
 8001b02:	f000 fa06 	bl	8001f12 <_ZNSt5dequeIfSaIfEE15_M_destroy_dataESt15_Deque_iteratorIfRfPfES5_RKS0_>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f000 f965 	bl	8001dd8 <_ZNSt11_Deque_baseIfSaIfEED1Ev>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	4618      	mov	r0, r3
 8001b12:	3728      	adds	r7, #40	; 0x28
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}

08001b18 <_ZNSt11_Deque_baseItSaItEE11_Deque_implD1Ev>:
      struct _Deque_impl
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b082      	sub	sp, #8
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
 8001b20:	6878      	ldr	r0, [r7, #4]
 8001b22:	f000 fa13 	bl	8001f4c <_ZNSaItED1Ev>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	4618      	mov	r0, r3
 8001b2a:	3708      	adds	r7, #8
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}

08001b30 <_ZNSt11_Deque_baseItSaItEEC1Ev>:
      _Deque_base()
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
      : _M_impl()
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f000 f9f6 	bl	8001f2c <_ZNSt11_Deque_baseItSaItEE11_Deque_implC1Ev>
      { _M_initialize_map(0); }
 8001b40:	2100      	movs	r1, #0
 8001b42:	6878      	ldr	r0, [r7, #4]
 8001b44:	f000 fa0e 	bl	8001f64 <_ZNSt11_Deque_baseItSaItEE17_M_initialize_mapEj>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3708      	adds	r7, #8
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}

08001b52 <_ZNSt11_Deque_baseItSaItEED1Ev>:
    _Deque_base<_Tp, _Alloc>::
 8001b52:	b580      	push	{r7, lr}
 8001b54:	b082      	sub	sp, #8
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	6078      	str	r0, [r7, #4]
      if (this->_M_impl._M_map)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d010      	beq.n	8001b84 <_ZNSt11_Deque_baseItSaItEED1Ev+0x32>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6959      	ldr	r1, [r3, #20]
			   this->_M_impl._M_finish._M_node + 1);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 8001b6a:	3304      	adds	r3, #4
 8001b6c:	461a      	mov	r2, r3
 8001b6e:	6878      	ldr	r0, [r7, #4]
 8001b70:	f000 fa5b 	bl	800202a <_ZNSt11_Deque_baseItSaItEE16_M_destroy_nodesEPPtS3_>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6819      	ldr	r1, [r3, #0]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	461a      	mov	r2, r3
 8001b7e:	6878      	ldr	r0, [r7, #4]
 8001b80:	f000 fa6d 	bl	800205e <_ZNSt11_Deque_baseItSaItEE17_M_deallocate_mapEPPtj>
    }
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	4618      	mov	r0, r3
 8001b88:	f7ff ffc6 	bl	8001b18 <_ZNSt11_Deque_baseItSaItEE11_Deque_implD1Ev>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	4618      	mov	r0, r3
 8001b90:	3708      	adds	r7, #8
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}

08001b96 <_ZNSt5dequeItSaItEED1Ev>:
      ~deque()
 8001b96:	b580      	push	{r7, lr}
 8001b98:	b08a      	sub	sp, #40	; 0x28
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	6078      	str	r0, [r7, #4]
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
 8001b9e:	f107 0308 	add.w	r3, r7, #8
 8001ba2:	6879      	ldr	r1, [r7, #4]
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f000 fa76 	bl	8002096 <_ZNSt5dequeItSaItEE5beginEv>
 8001baa:	f107 0318 	add.w	r3, r7, #24
 8001bae:	6879      	ldr	r1, [r7, #4]
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f000 fa7f 	bl	80020b4 <_ZNSt5dequeItSaItEE3endEv>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f000 fa8a 	bl	80020d2 <_ZNSt11_Deque_baseItSaItEE19_M_get_Tp_allocatorEv>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	f107 0218 	add.w	r2, r7, #24
 8001bc4:	f107 0108 	add.w	r1, r7, #8
 8001bc8:	6878      	ldr	r0, [r7, #4]
 8001bca:	f000 faa9 	bl	8002120 <_ZNSt5dequeItSaItEE15_M_destroy_dataESt15_Deque_iteratorItRtPtES5_RKS0_>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f7ff ffbe 	bl	8001b52 <_ZNSt11_Deque_baseItSaItEED1Ev>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4618      	mov	r0, r3
 8001bda:	3728      	adds	r7, #40	; 0x28
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}

08001be0 <_ZNSt5dequeIfSaIfEEixEj>:
       *  Note that data access with this operator is unchecked and
       *  out_of_range lookups are not defined. (For checked lookups
       *  see at().)
       */
      reference
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
 8001be8:	6039      	str	r1, [r7, #0]
      {
	__glibcxx_requires_subscript(__n);
	return this->_M_impl._M_start[difference_type(__n)];
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	3308      	adds	r3, #8
 8001bee:	683a      	ldr	r2, [r7, #0]
 8001bf0:	4611      	mov	r1, r2
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f000 faa1 	bl	800213a <_ZNKSt15_Deque_iteratorIfRfPfEixEi>
 8001bf8:	4603      	mov	r3, r0
      }
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3708      	adds	r7, #8
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}

08001c02 <_ZNSt5dequeIfSaIfEE9pop_frontEv>:
       *
       *  Note that no data is returned, and if the first element's data is
       *  needed, it should be retrieved before pop_front() is called.
       */
      void
      pop_front() _GLIBCXX_NOEXCEPT
 8001c02:	b580      	push	{r7, lr}
 8001c04:	b082      	sub	sp, #8
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	6078      	str	r0, [r7, #4]
      {
	__glibcxx_requires_nonempty();
	if (this->_M_impl._M_start._M_cur
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	689a      	ldr	r2, [r3, #8]
	    != this->_M_impl._M_start._M_last - 1)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	691b      	ldr	r3, [r3, #16]
 8001c12:	3b04      	subs	r3, #4
	if (this->_M_impl._M_start._M_cur
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d010      	beq.n	8001c3a <_ZNSt5dequeIfSaIfEE9pop_frontEv+0x38>
	  {
	    _Alloc_traits::destroy(_M_get_Tp_allocator(),
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f000 f952 	bl	8001ec4 <_ZNSt11_Deque_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8001c20:	4602      	mov	r2, r0
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	4619      	mov	r1, r3
 8001c28:	4610      	mov	r0, r2
 8001c2a:	f000 fa9c 	bl	8002166 <_ZNSt16allocator_traitsISaIfEE7destroyIfEEvRS0_PT_>
				   this->_M_impl._M_start._M_cur);
	    ++this->_M_impl._M_start._M_cur;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	1d1a      	adds	r2, r3, #4
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	609a      	str	r2, [r3, #8]
	  }
	else
	  _M_pop_front_aux();
      }
 8001c38:	e002      	b.n	8001c40 <_ZNSt5dequeIfSaIfEE9pop_frontEv+0x3e>
	  _M_pop_front_aux();
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	f000 faa0 	bl	8002180 <_ZNSt5dequeIfSaIfEE16_M_pop_front_auxEv>
      }
 8001c40:	bf00      	nop
 8001c42:	3708      	adds	r7, #8
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}

08001c48 <_ZNSt5dequeIfSaIfEE9push_backERKf>:
      push_back(const value_type& __x)
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
 8001c50:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish._M_cur
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	699a      	ldr	r2, [r3, #24]
	    != this->_M_impl._M_finish._M_last - 1)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6a1b      	ldr	r3, [r3, #32]
 8001c5a:	3b04      	subs	r3, #4
	if (this->_M_impl._M_finish._M_cur
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	d00c      	beq.n	8001c7a <_ZNSt5dequeIfSaIfEE9push_backERKf+0x32>
	    _Alloc_traits::construct(this->_M_impl,
 8001c60:	6878      	ldr	r0, [r7, #4]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	699b      	ldr	r3, [r3, #24]
 8001c66:	683a      	ldr	r2, [r7, #0]
 8001c68:	4619      	mov	r1, r3
 8001c6a:	f000 fab1 	bl	80021d0 <_ZNSt16allocator_traitsISaIfEE9constructIfJRKfEEEvRS0_PT_DpOT0_>
	    ++this->_M_impl._M_finish._M_cur;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	699b      	ldr	r3, [r3, #24]
 8001c72:	1d1a      	adds	r2, r3, #4
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	619a      	str	r2, [r3, #24]
      }
 8001c78:	e003      	b.n	8001c82 <_ZNSt5dequeIfSaIfEE9push_backERKf+0x3a>
	  _M_push_back_aux(__x);
 8001c7a:	6839      	ldr	r1, [r7, #0]
 8001c7c:	6878      	ldr	r0, [r7, #4]
 8001c7e:	f000 fabb 	bl	80021f8 <_ZNSt5dequeIfSaIfEE16_M_push_back_auxIJRKfEEEvDpOT_>
      }
 8001c82:	bf00      	nop
 8001c84:	3708      	adds	r7, #8
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}

08001c8a <_ZNSt5dequeIfSaIfEE9push_backEOf>:
      push_back(value_type&& __x)
 8001c8a:	b580      	push	{r7, lr}
 8001c8c:	b082      	sub	sp, #8
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	6078      	str	r0, [r7, #4]
 8001c92:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 8001c94:	6838      	ldr	r0, [r7, #0]
 8001c96:	f000 faf3 	bl	8002280 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	f000 faf9 	bl	8002296 <_ZNSt5dequeIfSaIfEE12emplace_backIJfEEEvDpOT_>
 8001ca4:	bf00      	nop
 8001ca6:	3708      	adds	r7, #8
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}

08001cac <_ZNSt5dequeItSaItEE9push_backERKt>:
      push_back(const value_type& __x)
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish._M_cur
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	699a      	ldr	r2, [r3, #24]
	    != this->_M_impl._M_finish._M_last - 1)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6a1b      	ldr	r3, [r3, #32]
 8001cbe:	3b02      	subs	r3, #2
	if (this->_M_impl._M_finish._M_cur
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	d00c      	beq.n	8001cde <_ZNSt5dequeItSaItEE9push_backERKt+0x32>
	    _Alloc_traits::construct(this->_M_impl,
 8001cc4:	6878      	ldr	r0, [r7, #4]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	699b      	ldr	r3, [r3, #24]
 8001cca:	683a      	ldr	r2, [r7, #0]
 8001ccc:	4619      	mov	r1, r3
 8001cce:	f000 fb0c 	bl	80022ea <_ZNSt16allocator_traitsISaItEE9constructItJRKtEEEvRS0_PT_DpOT0_>
	    ++this->_M_impl._M_finish._M_cur;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	699b      	ldr	r3, [r3, #24]
 8001cd6:	1c9a      	adds	r2, r3, #2
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	619a      	str	r2, [r3, #24]
      }
 8001cdc:	e003      	b.n	8001ce6 <_ZNSt5dequeItSaItEE9push_backERKt+0x3a>
	  _M_push_back_aux(__x);
 8001cde:	6839      	ldr	r1, [r7, #0]
 8001ce0:	6878      	ldr	r0, [r7, #4]
 8001ce2:	f000 fb15 	bl	8002310 <_ZNSt5dequeItSaItEE16_M_push_back_auxIJRKtEEEvDpOT_>
      }
 8001ce6:	bf00      	nop
 8001ce8:	3708      	adds	r7, #8
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}

08001cee <_ZNKSt5dequeItSaItEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8001cee:	b580      	push	{r7, lr}
 8001cf0:	b082      	sub	sp, #8
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	f103 0218 	add.w	r2, r3, #24
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	3308      	adds	r3, #8
 8001d00:	4619      	mov	r1, r3
 8001d02:	4610      	mov	r0, r2
 8001d04:	f000 fb48 	bl	8002398 <_ZStmiRKSt15_Deque_iteratorItRtPtES4_>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3708      	adds	r7, #8
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}

08001d12 <_ZNSt5dequeItSaItEEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 8001d12:	b580      	push	{r7, lr}
 8001d14:	b082      	sub	sp, #8
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	6078      	str	r0, [r7, #4]
 8001d1a:	6039      	str	r1, [r7, #0]
	return this->_M_impl._M_start[difference_type(__n)];
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	3308      	adds	r3, #8
 8001d20:	683a      	ldr	r2, [r7, #0]
 8001d22:	4611      	mov	r1, r2
 8001d24:	4618      	mov	r0, r3
 8001d26:	f000 fb5b 	bl	80023e0 <_ZNKSt15_Deque_iteratorItRtPtEixEi>
 8001d2a:	4603      	mov	r3, r0
      }
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	3708      	adds	r7, #8
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}

08001d34 <_ZN9__gnu_cxx13new_allocatorIfEC1Ev>:
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      _GLIBCXX20_CONSTEXPR
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	4618      	mov	r0, r3
 8001d40:	370c      	adds	r7, #12
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr

08001d4a <_ZN9__gnu_cxx13new_allocatorIfED1Ev>:
      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

#if __cplusplus <= 201703L
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001d4a:	b480      	push	{r7}
 8001d4c:	b083      	sub	sp, #12
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	6078      	str	r0, [r7, #4]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	4618      	mov	r0, r3
 8001d56:	370c      	adds	r7, #12
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr

08001d60 <_ZNSt5dequeIfSaIfEE17_S_check_init_lenEjRKS0_>:
			      std::__iterator_category(__first));
	}
#endif

      static size_t
      _S_check_init_len(size_t __n, const allocator_type& __a)
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b082      	sub	sp, #8
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
 8001d68:	6039      	str	r1, [r7, #0]
      {
	if (__n > _S_max_size(__a))
 8001d6a:	6838      	ldr	r0, [r7, #0]
 8001d6c:	f000 fb4e 	bl	800240c <_ZNSt5dequeIfSaIfEE11_S_max_sizeERKS0_>
 8001d70:	4602      	mov	r2, r0
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	4293      	cmp	r3, r2
 8001d76:	bf8c      	ite	hi
 8001d78:	2301      	movhi	r3, #1
 8001d7a:	2300      	movls	r3, #0
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d002      	beq.n	8001d88 <_ZNSt5dequeIfSaIfEE17_S_check_init_lenEjRKS0_+0x28>
	  __throw_length_error(
 8001d82:	4804      	ldr	r0, [pc, #16]	; (8001d94 <_ZNSt5dequeIfSaIfEE17_S_check_init_lenEjRKS0_+0x34>)
 8001d84:	f004 fb51 	bl	800642a <_ZSt20__throw_length_errorPKc>
	      __N("cannot create std::deque larger than max_size()"));
	return __n;
 8001d88:	687b      	ldr	r3, [r7, #4]
      }
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3708      	adds	r7, #8
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	080068c4 	.word	0x080068c4

08001d98 <_ZNSt11_Deque_baseIfSaIfEE11_Deque_implD1Ev>:
      struct _Deque_impl
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
 8001da0:	6878      	ldr	r0, [r7, #4]
 8001da2:	f7ff fe6d 	bl	8001a80 <_ZNSaIfED1Ev>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	4618      	mov	r0, r3
 8001daa:	3708      	adds	r7, #8
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}

08001db0 <_ZNSt11_Deque_baseIfSaIfEEC1ERKS0_j>:
      _Deque_base(const allocator_type& __a, size_t __num_elements)
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b084      	sub	sp, #16
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	60f8      	str	r0, [r7, #12]
 8001db8:	60b9      	str	r1, [r7, #8]
 8001dba:	607a      	str	r2, [r7, #4]
      : _M_impl(__a)
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	68b9      	ldr	r1, [r7, #8]
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f000 fb3d 	bl	8002440 <_ZNSt11_Deque_baseIfSaIfEE11_Deque_implC1ERKS0_>
      { _M_initialize_map(__num_elements); }
 8001dc6:	6879      	ldr	r1, [r7, #4]
 8001dc8:	68f8      	ldr	r0, [r7, #12]
 8001dca:	f000 fb4b 	bl	8002464 <_ZNSt11_Deque_baseIfSaIfEE17_M_initialize_mapEj>
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	3710      	adds	r7, #16
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}

08001dd8 <_ZNSt11_Deque_baseIfSaIfEED1Ev>:
    _Deque_base<_Tp, _Alloc>::
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
      if (this->_M_impl._M_map)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d010      	beq.n	8001e0a <_ZNSt11_Deque_baseIfSaIfEED1Ev+0x32>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6959      	ldr	r1, [r3, #20]
			   this->_M_impl._M_finish._M_node + 1);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 8001df0:	3304      	adds	r3, #4
 8001df2:	461a      	mov	r2, r3
 8001df4:	6878      	ldr	r0, [r7, #4]
 8001df6:	f000 fb98 	bl	800252a <_ZNSt11_Deque_baseIfSaIfEE16_M_destroy_nodesEPPfS3_>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6819      	ldr	r1, [r3, #0]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	461a      	mov	r2, r3
 8001e04:	6878      	ldr	r0, [r7, #4]
 8001e06:	f000 fbaa 	bl	800255e <_ZNSt11_Deque_baseIfSaIfEE17_M_deallocate_mapEPPfj>
    }
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f7ff ffc3 	bl	8001d98 <_ZNSt11_Deque_baseIfSaIfEE11_Deque_implD1Ev>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	4618      	mov	r0, r3
 8001e16:	3708      	adds	r7, #8
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}

08001e1c <_ZNSt5dequeIfSaIfEE18_M_fill_initializeERKf>:
    }
#endif

  template <typename _Tp, typename _Alloc>
    void
    deque<_Tp, _Alloc>::
 8001e1c:	b5b0      	push	{r4, r5, r7, lr}
 8001e1e:	b08c      	sub	sp, #48	; 0x30
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
 8001e24:	6039      	str	r1, [r7, #0]
    _M_fill_initialize(const value_type& __value)
    {
      _Map_pointer __cur;
      __try
	{
	  for (__cur = this->_M_impl._M_start._M_node;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	695b      	ldr	r3, [r3, #20]
 8001e2a:	62fb      	str	r3, [r7, #44]	; 0x2c
	       __cur < this->_M_impl._M_finish._M_node;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e32:	429a      	cmp	r2, r3
 8001e34:	d216      	bcs.n	8001e64 <_ZNSt5dequeIfSaIfEE18_M_fill_initializeERKf+0x48>
	       ++__cur)
	    std::__uninitialized_fill_a(*__cur, *__cur + _S_buffer_size(),
 8001e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e38:	681d      	ldr	r5, [r3, #0]
 8001e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e3c:	681c      	ldr	r4, [r3, #0]
 8001e3e:	f000 fbaa 	bl	8002596 <_ZNSt5dequeIfSaIfEE14_S_buffer_sizeEv>
 8001e42:	4603      	mov	r3, r0
 8001e44:	009b      	lsls	r3, r3, #2
 8001e46:	441c      	add	r4, r3
					__value, _M_get_Tp_allocator());
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f000 f83a 	bl	8001ec4 <_ZNSt11_Deque_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8001e50:	4603      	mov	r3, r0
	    std::__uninitialized_fill_a(*__cur, *__cur + _S_buffer_size(),
 8001e52:	683a      	ldr	r2, [r7, #0]
 8001e54:	4621      	mov	r1, r4
 8001e56:	4628      	mov	r0, r5
 8001e58:	f000 fba5 	bl	80025a6 <_ZSt22__uninitialized_fill_aIPfffEvT_S1_RKT0_RSaIT1_E>
	  for (__cur = this->_M_impl._M_start._M_node;
 8001e5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e5e:	3304      	adds	r3, #4
 8001e60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e62:	e7e3      	b.n	8001e2c <_ZNSt5dequeIfSaIfEE18_M_fill_initializeERKf+0x10>
	  std::__uninitialized_fill_a(this->_M_impl._M_finish._M_first,
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	69dc      	ldr	r4, [r3, #28]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	699d      	ldr	r5, [r3, #24]
				      this->_M_impl._M_finish._M_cur,
				      __value, _M_get_Tp_allocator());
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f000 f828 	bl	8001ec4 <_ZNSt11_Deque_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8001e74:	4603      	mov	r3, r0
	  std::__uninitialized_fill_a(this->_M_impl._M_finish._M_first,
 8001e76:	683a      	ldr	r2, [r7, #0]
 8001e78:	4629      	mov	r1, r5
 8001e7a:	4620      	mov	r0, r4
 8001e7c:	f000 fb93 	bl	80025a6 <_ZSt22__uninitialized_fill_aIPfffEvT_S1_RKT0_RSaIT1_E>
	{
	  std::_Destroy(this->_M_impl._M_start, iterator(*__cur, __cur),
			_M_get_Tp_allocator());
	  __throw_exception_again;
	}
    }
 8001e80:	bf00      	nop
 8001e82:	3730      	adds	r7, #48	; 0x30
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bdb0      	pop	{r4, r5, r7, pc}

08001e88 <_ZNSt5dequeIfSaIfEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b082      	sub	sp, #8
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
 8001e90:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_start; }
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	3308      	adds	r3, #8
 8001e96:	4619      	mov	r1, r3
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	f000 f81e 	bl	8001eda <_ZNSt15_Deque_iteratorIfRfPfEC1ERKS2_>
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	3708      	adds	r7, #8
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}

08001ea6 <_ZNSt5dequeIfSaIfEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8001ea6:	b580      	push	{r7, lr}
 8001ea8:	b082      	sub	sp, #8
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	6078      	str	r0, [r7, #4]
 8001eae:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_finish; }
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	3318      	adds	r3, #24
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f000 f80f 	bl	8001eda <_ZNSt15_Deque_iteratorIfRfPfEC1ERKS2_>
 8001ebc:	6878      	ldr	r0, [r7, #4]
 8001ebe:	3708      	adds	r7, #8
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}

08001ec4 <_ZNSt11_Deque_baseIfSaIfEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8001ec4:	b480      	push	{r7}
 8001ec6:	b083      	sub	sp, #12
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	4618      	mov	r0, r3
 8001ed0:	370c      	adds	r7, #12
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr

08001eda <_ZNSt15_Deque_iteratorIfRfPfEC1ERKS2_>:
      _Deque_iterator(const _Deque_iterator& __x) noexcept
 8001eda:	b480      	push	{r7}
 8001edc:	b083      	sub	sp, #12
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	6078      	str	r0, [r7, #4]
 8001ee2:	6039      	str	r1, [r7, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	681a      	ldr	r2, [r3, #0]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	601a      	str	r2, [r3, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	685a      	ldr	r2, [r3, #4]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	605a      	str	r2, [r3, #4]
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	689a      	ldr	r2, [r3, #8]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	609a      	str	r2, [r3, #8]
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	68da      	ldr	r2, [r3, #12]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	60da      	str	r2, [r3, #12]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	4618      	mov	r0, r3
 8001f08:	370c      	adds	r7, #12
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr

08001f12 <_ZNSt5dequeIfSaIfEE15_M_destroy_dataESt15_Deque_iteratorIfRfPfES5_RKS0_>:
	void
	_M_destroy_data(iterator __first, iterator __last, const _Alloc1&)
	{ _M_destroy_data_aux(__first, __last); }

      void
      _M_destroy_data(iterator __first, iterator __last,
 8001f12:	b480      	push	{r7}
 8001f14:	b08d      	sub	sp, #52	; 0x34
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	60f8      	str	r0, [r7, #12]
 8001f1a:	60b9      	str	r1, [r7, #8]
 8001f1c:	607a      	str	r2, [r7, #4]
 8001f1e:	603b      	str	r3, [r7, #0]
		      const std::allocator<_Tp>&)
      {
	if (!__has_trivial_destructor(value_type))
	  _M_destroy_data_aux(__first, __last);
      }
 8001f20:	bf00      	nop
 8001f22:	3734      	adds	r7, #52	; 0x34
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr

08001f2c <_ZNSt11_Deque_baseItSaItEE11_Deque_implC1Ev>:
	_Deque_impl() _GLIBCXX_NOEXCEPT_IF(
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8001f34:	6878      	ldr	r0, [r7, #4]
 8001f36:	f000 fb46 	bl	80025c6 <_ZNSaItEC1Ev>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f000 fb4e 	bl	80025de <_ZNSt11_Deque_baseItSaItEE16_Deque_impl_dataC1Ev>
	{ }
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4618      	mov	r0, r3
 8001f46:	3708      	adds	r7, #8
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}

08001f4c <_ZNSaItED1Ev>:
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b082      	sub	sp, #8
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
 8001f54:	6878      	ldr	r0, [r7, #4]
 8001f56:	f000 fb5b 	bl	8002610 <_ZN9__gnu_cxx13new_allocatorItED1Ev>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	3708      	adds	r7, #8
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}

08001f64 <_ZNSt11_Deque_baseItSaItEE17_M_initialize_mapEj>:
    _Deque_base<_Tp, _Alloc>::
 8001f64:	b590      	push	{r4, r7, lr}
 8001f66:	b089      	sub	sp, #36	; 0x24
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
 8001f6c:	6039      	str	r1, [r7, #0]
      const size_t __num_nodes = (__num_elements / __deque_buf_size(sizeof(_Tp))
 8001f6e:	2002      	movs	r0, #2
 8001f70:	f7ff f86a 	bl	8001048 <_ZSt16__deque_buf_sizej>
 8001f74:	4602      	mov	r2, r0
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	fbb3 f3f2 	udiv	r3, r3, r2
 8001f7c:	3301      	adds	r3, #1
 8001f7e:	61fb      	str	r3, [r7, #28]
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 8001f80:	2308      	movs	r3, #8
 8001f82:	60fb      	str	r3, [r7, #12]
					   size_t(__num_nodes + 2));
 8001f84:	69fb      	ldr	r3, [r7, #28]
 8001f86:	3302      	adds	r3, #2
 8001f88:	613b      	str	r3, [r7, #16]
 8001f8a:	f107 0210 	add.w	r2, r7, #16
 8001f8e:	f107 030c 	add.w	r3, r7, #12
 8001f92:	4611      	mov	r1, r2
 8001f94:	4618      	mov	r0, r3
 8001f96:	f000 fb46 	bl	8002626 <_ZSt3maxIjERKT_S2_S2_>
 8001f9a:	4603      	mov	r3, r0
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	6878      	ldr	r0, [r7, #4]
 8001faa:	f000 fb50 	bl	800264e <_ZNSt11_Deque_baseItSaItEE15_M_allocate_mapEj>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	601a      	str	r2, [r3, #0]
      _Map_pointer __nstart = (this->_M_impl._M_map
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681a      	ldr	r2, [r3, #0]
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6859      	ldr	r1, [r3, #4]
 8001fbc:	69fb      	ldr	r3, [r7, #28]
 8001fbe:	1acb      	subs	r3, r1, r3
 8001fc0:	085b      	lsrs	r3, r3, #1
 8001fc2:	009b      	lsls	r3, r3, #2
      _Map_pointer __nstart = (this->_M_impl._M_map
 8001fc4:	4413      	add	r3, r2
 8001fc6:	61bb      	str	r3, [r7, #24]
      _Map_pointer __nfinish = __nstart + __num_nodes;
 8001fc8:	69fb      	ldr	r3, [r7, #28]
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	69ba      	ldr	r2, [r7, #24]
 8001fce:	4413      	add	r3, r2
 8001fd0:	617b      	str	r3, [r7, #20]
	{ _M_create_nodes(__nstart, __nfinish); }
 8001fd2:	697a      	ldr	r2, [r7, #20]
 8001fd4:	69b9      	ldr	r1, [r7, #24]
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	f000 fb56 	bl	8002688 <_ZNSt11_Deque_baseItSaItEE15_M_create_nodesEPPtS3_>
      this->_M_impl._M_start._M_set_node(__nstart);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	3308      	adds	r3, #8
 8001fe0:	69b9      	ldr	r1, [r7, #24]
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f000 fb6a 	bl	80026bc <_ZNSt15_Deque_iteratorItRtPtE11_M_set_nodeEPS1_>
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	f103 0218 	add.w	r2, r3, #24
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	3b04      	subs	r3, #4
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	4610      	mov	r0, r2
 8001ff6:	f000 fb61 	bl	80026bc <_ZNSt15_Deque_iteratorItRtPtE11_M_set_nodeEPS1_>
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	68da      	ldr	r2, [r3, #12]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	609a      	str	r2, [r3, #8]
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	69dc      	ldr	r4, [r3, #28]
					% __deque_buf_size(sizeof(_Tp)));
 8002006:	2002      	movs	r0, #2
 8002008:	f7ff f81e 	bl	8001048 <_ZSt16__deque_buf_sizej>
 800200c:	4602      	mov	r2, r0
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	fbb3 f1f2 	udiv	r1, r3, r2
 8002014:	fb01 f202 	mul.w	r2, r1, r2
 8002018:	1a9b      	subs	r3, r3, r2
					+ __num_elements
 800201a:	005b      	lsls	r3, r3, #1
 800201c:	18e2      	adds	r2, r4, r3
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	619a      	str	r2, [r3, #24]
    }
 8002022:	bf00      	nop
 8002024:	3724      	adds	r7, #36	; 0x24
 8002026:	46bd      	mov	sp, r7
 8002028:	bd90      	pop	{r4, r7, pc}

0800202a <_ZNSt11_Deque_baseItSaItEE16_M_destroy_nodesEPPtS3_>:
    _Deque_base<_Tp, _Alloc>::
 800202a:	b580      	push	{r7, lr}
 800202c:	b086      	sub	sp, #24
 800202e:	af00      	add	r7, sp, #0
 8002030:	60f8      	str	r0, [r7, #12]
 8002032:	60b9      	str	r1, [r7, #8]
 8002034:	607a      	str	r2, [r7, #4]
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	617b      	str	r3, [r7, #20]
 800203a:	697a      	ldr	r2, [r7, #20]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	429a      	cmp	r2, r3
 8002040:	d209      	bcs.n	8002056 <_ZNSt11_Deque_baseItSaItEE16_M_destroy_nodesEPPtS3_+0x2c>
	_M_deallocate_node(*__n);
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4619      	mov	r1, r3
 8002048:	68f8      	ldr	r0, [r7, #12]
 800204a:	f000 fb50 	bl	80026ee <_ZNSt11_Deque_baseItSaItEE18_M_deallocate_nodeEPt>
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	3304      	adds	r3, #4
 8002052:	617b      	str	r3, [r7, #20]
 8002054:	e7f1      	b.n	800203a <_ZNSt11_Deque_baseItSaItEE16_M_destroy_nodesEPPtS3_+0x10>
    }
 8002056:	bf00      	nop
 8002058:	3718      	adds	r7, #24
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}

0800205e <_ZNSt11_Deque_baseItSaItEE17_M_deallocate_mapEPPtj>:
      _M_deallocate_map(_Map_pointer __p, size_t __n) _GLIBCXX_NOEXCEPT
 800205e:	b580      	push	{r7, lr}
 8002060:	b086      	sub	sp, #24
 8002062:	af00      	add	r7, sp, #0
 8002064:	60f8      	str	r0, [r7, #12]
 8002066:	60b9      	str	r1, [r7, #8]
 8002068:	607a      	str	r2, [r7, #4]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 800206a:	f107 0314 	add.w	r3, r7, #20
 800206e:	68f9      	ldr	r1, [r7, #12]
 8002070:	4618      	mov	r0, r3
 8002072:	f000 fb4f 	bl	8002714 <_ZNKSt11_Deque_baseItSaItEE20_M_get_map_allocatorEv>
	_Map_alloc_traits::deallocate(__map_alloc, __p, __n);
 8002076:	f107 0314 	add.w	r3, r7, #20
 800207a:	687a      	ldr	r2, [r7, #4]
 800207c:	68b9      	ldr	r1, [r7, #8]
 800207e:	4618      	mov	r0, r3
 8002080:	f000 fb65 	bl	800274e <_ZNSt16allocator_traitsISaIPtEE10deallocateERS1_PS0_j>
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8002084:	f107 0314 	add.w	r3, r7, #20
 8002088:	4618      	mov	r0, r3
 800208a:	f000 fb54 	bl	8002736 <_ZNSaIPtED1Ev>
      }
 800208e:	bf00      	nop
 8002090:	3718      	adds	r7, #24
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}

08002096 <_ZNSt5dequeItSaItEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8002096:	b580      	push	{r7, lr}
 8002098:	b082      	sub	sp, #8
 800209a:	af00      	add	r7, sp, #0
 800209c:	6078      	str	r0, [r7, #4]
 800209e:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_start; }
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	3308      	adds	r3, #8
 80020a4:	4619      	mov	r1, r3
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f000 f81e 	bl	80020e8 <_ZNSt15_Deque_iteratorItRtPtEC1ERKS2_>
 80020ac:	6878      	ldr	r0, [r7, #4]
 80020ae:	3708      	adds	r7, #8
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}

080020b4 <_ZNSt5dequeItSaItEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b082      	sub	sp, #8
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
 80020bc:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_finish; }
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	3318      	adds	r3, #24
 80020c2:	4619      	mov	r1, r3
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	f000 f80f 	bl	80020e8 <_ZNSt15_Deque_iteratorItRtPtEC1ERKS2_>
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	3708      	adds	r7, #8
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}

080020d2 <_ZNSt11_Deque_baseItSaItEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 80020d2:	b480      	push	{r7}
 80020d4:	b083      	sub	sp, #12
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	4618      	mov	r0, r3
 80020de:	370c      	adds	r7, #12
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr

080020e8 <_ZNSt15_Deque_iteratorItRtPtEC1ERKS2_>:
      _Deque_iterator(const _Deque_iterator& __x) noexcept
 80020e8:	b480      	push	{r7}
 80020ea:	b083      	sub	sp, #12
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
 80020f0:	6039      	str	r1, [r7, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	681a      	ldr	r2, [r3, #0]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	601a      	str	r2, [r3, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	685a      	ldr	r2, [r3, #4]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	605a      	str	r2, [r3, #4]
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	689a      	ldr	r2, [r3, #8]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	609a      	str	r2, [r3, #8]
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	68da      	ldr	r2, [r3, #12]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	60da      	str	r2, [r3, #12]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4618      	mov	r0, r3
 8002116:	370c      	adds	r7, #12
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr

08002120 <_ZNSt5dequeItSaItEE15_M_destroy_dataESt15_Deque_iteratorItRtPtES5_RKS0_>:
      _M_destroy_data(iterator __first, iterator __last,
 8002120:	b480      	push	{r7}
 8002122:	b08d      	sub	sp, #52	; 0x34
 8002124:	af00      	add	r7, sp, #0
 8002126:	60f8      	str	r0, [r7, #12]
 8002128:	60b9      	str	r1, [r7, #8]
 800212a:	607a      	str	r2, [r7, #4]
 800212c:	603b      	str	r3, [r7, #0]
      }
 800212e:	bf00      	nop
 8002130:	3734      	adds	r7, #52	; 0x34
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr

0800213a <_ZNKSt15_Deque_iteratorIfRfPfEixEi>:
      operator[](difference_type __n) const _GLIBCXX_NOEXCEPT
 800213a:	b580      	push	{r7, lr}
 800213c:	b086      	sub	sp, #24
 800213e:	af00      	add	r7, sp, #0
 8002140:	6078      	str	r0, [r7, #4]
 8002142:	6039      	str	r1, [r7, #0]
      { return *(*this + __n); }
 8002144:	f107 0308 	add.w	r3, r7, #8
 8002148:	683a      	ldr	r2, [r7, #0]
 800214a:	6879      	ldr	r1, [r7, #4]
 800214c:	4618      	mov	r0, r3
 800214e:	f000 fb0d 	bl	800276c <_ZStplRKSt15_Deque_iteratorIfRfPfEi>
 8002152:	f107 0308 	add.w	r3, r7, #8
 8002156:	4618      	mov	r0, r3
 8002158:	f000 fb1b 	bl	8002792 <_ZNKSt15_Deque_iteratorIfRfPfEdeEv>
 800215c:	4603      	mov	r3, r0
 800215e:	4618      	mov	r0, r3
 8002160:	3718      	adds	r7, #24
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}

08002166 <_ZNSt16allocator_traitsISaIfEE7destroyIfEEvRS0_PT_>:
       *
       *  Calls @c __a.destroy(__p).
      */
      template<typename _Up>
	static _GLIBCXX20_CONSTEXPR void
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8002166:	b580      	push	{r7, lr}
 8002168:	b082      	sub	sp, #8
 800216a:	af00      	add	r7, sp, #0
 800216c:	6078      	str	r0, [r7, #4]
 800216e:	6039      	str	r1, [r7, #0]
	noexcept(is_nothrow_destructible<_Up>::value)
	{
#if __cplusplus <= 201703L
	  __a.destroy(__p);
 8002170:	6839      	ldr	r1, [r7, #0]
 8002172:	6878      	ldr	r0, [r7, #4]
 8002174:	f000 fb19 	bl	80027aa <_ZN9__gnu_cxx13new_allocatorIfE7destroyIfEEvPT_>
#else
	  std::destroy_at(__p);
#endif
	}
 8002178:	bf00      	nop
 800217a:	3708      	adds	r7, #8
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}

08002180 <_ZNSt5dequeIfSaIfEE16_M_pop_front_auxEv>:
  // Note that if the deque has at least one element (a precondition for this
  // member function), and if
  //   _M_impl._M_start._M_cur == _M_impl._M_start._M_last,
  // then the deque must have at least two nodes.
  template <typename _Tp, typename _Alloc>
    void deque<_Tp, _Alloc>::
 8002180:	b580      	push	{r7, lr}
 8002182:	b082      	sub	sp, #8
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
    _M_pop_front_aux()
    {
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	4618      	mov	r0, r3
 800218c:	f7ff fe9a 	bl	8001ec4 <_ZNSt11_Deque_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8002190:	4602      	mov	r2, r0
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	4619      	mov	r1, r3
 8002198:	4610      	mov	r0, r2
 800219a:	f7ff ffe4 	bl	8002166 <_ZNSt16allocator_traitsISaIfEE7destroyIfEEvRS0_PT_>
			     this->_M_impl._M_start._M_cur);
      _M_deallocate_node(this->_M_impl._M_start._M_first);
 800219e:	687a      	ldr	r2, [r7, #4]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	4619      	mov	r1, r3
 80021a6:	4610      	mov	r0, r2
 80021a8:	f000 fb0a 	bl	80027c0 <_ZNSt11_Deque_baseIfSaIfEE18_M_deallocate_nodeEPf>
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	f103 0208 	add.w	r2, r3, #8
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	695b      	ldr	r3, [r3, #20]
 80021b6:	3304      	adds	r3, #4
 80021b8:	4619      	mov	r1, r3
 80021ba:	4610      	mov	r0, r2
 80021bc:	f000 fb13 	bl	80027e6 <_ZNSt15_Deque_iteratorIfRfPfE11_M_set_nodeEPS1_>
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	68da      	ldr	r2, [r3, #12]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	609a      	str	r2, [r3, #8]
    }
 80021c8:	bf00      	nop
 80021ca:	3708      	adds	r7, #8
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}

080021d0 <_ZNSt16allocator_traitsISaIfEE9constructIfJRKfEEEvRS0_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b084      	sub	sp, #16
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	60f8      	str	r0, [r7, #12]
 80021d8:	60b9      	str	r1, [r7, #8]
 80021da:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 80021dc:	6878      	ldr	r0, [r7, #4]
 80021de:	f000 fb1b 	bl	8002818 <_ZSt7forwardIRKfEOT_RNSt16remove_referenceIS2_E4typeE>
 80021e2:	4603      	mov	r3, r0
 80021e4:	461a      	mov	r2, r3
 80021e6:	68b9      	ldr	r1, [r7, #8]
 80021e8:	68f8      	ldr	r0, [r7, #12]
 80021ea:	f000 fb20 	bl	800282e <_ZN9__gnu_cxx13new_allocatorIfE9constructIfJRKfEEEvPT_DpOT0_>
	}
 80021ee:	bf00      	nop
 80021f0:	3710      	adds	r7, #16
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
	...

080021f8 <_ZNSt5dequeIfSaIfEE16_M_push_back_auxIJRKfEEEvDpOT_>:
      deque<_Tp, _Alloc>::
 80021f8:	b5b0      	push	{r4, r5, r7, lr}
 80021fa:	b082      	sub	sp, #8
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
 8002200:	6039      	str	r1, [r7, #0]
	if (size() == max_size())
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	f000 fb29 	bl	800285a <_ZNKSt5dequeIfSaIfEE4sizeEv>
 8002208:	4604      	mov	r4, r0
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	f000 fb37 	bl	800287e <_ZNKSt5dequeIfSaIfEE8max_sizeEv>
 8002210:	4603      	mov	r3, r0
 8002212:	429c      	cmp	r4, r3
 8002214:	bf0c      	ite	eq
 8002216:	2301      	moveq	r3, #1
 8002218:	2300      	movne	r3, #0
 800221a:	b2db      	uxtb	r3, r3
 800221c:	2b00      	cmp	r3, #0
 800221e:	d002      	beq.n	8002226 <_ZNSt5dequeIfSaIfEE16_M_push_back_auxIJRKfEEEvDpOT_+0x2e>
	  __throw_length_error(
 8002220:	4816      	ldr	r0, [pc, #88]	; (800227c <_ZNSt5dequeIfSaIfEE16_M_push_back_auxIJRKfEEEvDpOT_+0x84>)
 8002222:	f004 f902 	bl	800642a <_ZSt20__throw_length_errorPKc>
	_M_reserve_map_at_back();
 8002226:	2101      	movs	r1, #1
 8002228:	6878      	ldr	r0, [r7, #4]
 800222a:	f000 fb39 	bl	80028a0 <_ZNSt5dequeIfSaIfEE22_M_reserve_map_at_backEj>
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
 800222e:	687a      	ldr	r2, [r7, #4]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002234:	1d1c      	adds	r4, r3, #4
 8002236:	4610      	mov	r0, r2
 8002238:	f000 fb4d 	bl	80028d6 <_ZNSt11_Deque_baseIfSaIfEE16_M_allocate_nodeEv>
 800223c:	4603      	mov	r3, r0
 800223e:	6023      	str	r3, [r4, #0]
	    _Alloc_traits::construct(this->_M_impl,
 8002240:	687c      	ldr	r4, [r7, #4]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	699d      	ldr	r5, [r3, #24]
 8002246:	6838      	ldr	r0, [r7, #0]
 8002248:	f000 fae6 	bl	8002818 <_ZSt7forwardIRKfEOT_RNSt16remove_referenceIS2_E4typeE>
 800224c:	4603      	mov	r3, r0
 800224e:	461a      	mov	r2, r3
 8002250:	4629      	mov	r1, r5
 8002252:	4620      	mov	r0, r4
 8002254:	f7ff ffbc 	bl	80021d0 <_ZNSt16allocator_traitsISaIfEE9constructIfJRKfEEEvRS0_PT_DpOT0_>
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	f103 0218 	add.w	r2, r3, #24
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002262:	3304      	adds	r3, #4
 8002264:	4619      	mov	r1, r3
 8002266:	4610      	mov	r0, r2
 8002268:	f000 fabd 	bl	80027e6 <_ZNSt15_Deque_iteratorIfRfPfE11_M_set_nodeEPS1_>
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	69da      	ldr	r2, [r3, #28]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	619a      	str	r2, [r3, #24]
      }
 8002274:	bf00      	nop
 8002276:	3708      	adds	r7, #8
 8002278:	46bd      	mov	sp, r7
 800227a:	bdb0      	pop	{r4, r5, r7, pc}
 800227c:	080068c4 	.word	0x080068c4

08002280 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8002280:	b480      	push	{r7}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	4618      	mov	r0, r3
 800228c:	370c      	adds	r7, #12
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr

08002296 <_ZNSt5dequeIfSaIfEE12emplace_backIJfEEEvDpOT_>:
      deque<_Tp, _Alloc>::
 8002296:	b5b0      	push	{r4, r5, r7, lr}
 8002298:	b082      	sub	sp, #8
 800229a:	af00      	add	r7, sp, #0
 800229c:	6078      	str	r0, [r7, #4]
 800229e:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish._M_cur
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	699a      	ldr	r2, [r3, #24]
	    != this->_M_impl._M_finish._M_last - 1)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6a1b      	ldr	r3, [r3, #32]
 80022a8:	3b04      	subs	r3, #4
	if (this->_M_impl._M_finish._M_cur
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d011      	beq.n	80022d2 <_ZNSt5dequeIfSaIfEE12emplace_backIJfEEEvDpOT_+0x3c>
	    _Alloc_traits::construct(this->_M_impl,
 80022ae:	687c      	ldr	r4, [r7, #4]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	699d      	ldr	r5, [r3, #24]
 80022b4:	6838      	ldr	r0, [r7, #0]
 80022b6:	f000 fb20 	bl	80028fa <_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE>
 80022ba:	4603      	mov	r3, r0
 80022bc:	461a      	mov	r2, r3
 80022be:	4629      	mov	r1, r5
 80022c0:	4620      	mov	r0, r4
 80022c2:	f000 fb25 	bl	8002910 <_ZNSt16allocator_traitsISaIfEE9constructIfJfEEEvRS0_PT_DpOT0_>
	    ++this->_M_impl._M_finish._M_cur;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	699b      	ldr	r3, [r3, #24]
 80022ca:	1d1a      	adds	r2, r3, #4
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	619a      	str	r2, [r3, #24]
      }
 80022d0:	e007      	b.n	80022e2 <_ZNSt5dequeIfSaIfEE12emplace_backIJfEEEvDpOT_+0x4c>
	  _M_push_back_aux(std::forward<_Args>(__args)...);
 80022d2:	6838      	ldr	r0, [r7, #0]
 80022d4:	f000 fb11 	bl	80028fa <_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE>
 80022d8:	4603      	mov	r3, r0
 80022da:	4619      	mov	r1, r3
 80022dc:	6878      	ldr	r0, [r7, #4]
 80022de:	f000 fb2b 	bl	8002938 <_ZNSt5dequeIfSaIfEE16_M_push_back_auxIJfEEEvDpOT_>
      }
 80022e2:	bf00      	nop
 80022e4:	3708      	adds	r7, #8
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bdb0      	pop	{r4, r5, r7, pc}

080022ea <_ZNSt16allocator_traitsISaItEE9constructItJRKtEEEvRS0_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 80022ea:	b580      	push	{r7, lr}
 80022ec:	b084      	sub	sp, #16
 80022ee:	af00      	add	r7, sp, #0
 80022f0:	60f8      	str	r0, [r7, #12]
 80022f2:	60b9      	str	r1, [r7, #8]
 80022f4:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	f000 fb62 	bl	80029c0 <_ZSt7forwardIRKtEOT_RNSt16remove_referenceIS2_E4typeE>
 80022fc:	4603      	mov	r3, r0
 80022fe:	461a      	mov	r2, r3
 8002300:	68b9      	ldr	r1, [r7, #8]
 8002302:	68f8      	ldr	r0, [r7, #12]
 8002304:	f000 fb67 	bl	80029d6 <_ZN9__gnu_cxx13new_allocatorItE9constructItJRKtEEEvPT_DpOT0_>
	}
 8002308:	bf00      	nop
 800230a:	3710      	adds	r7, #16
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}

08002310 <_ZNSt5dequeItSaItEE16_M_push_back_auxIJRKtEEEvDpOT_>:
      deque<_Tp, _Alloc>::
 8002310:	b5b0      	push	{r4, r5, r7, lr}
 8002312:	b082      	sub	sp, #8
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
 8002318:	6039      	str	r1, [r7, #0]
	if (size() == max_size())
 800231a:	6878      	ldr	r0, [r7, #4]
 800231c:	f7ff fce7 	bl	8001cee <_ZNKSt5dequeItSaItEE4sizeEv>
 8002320:	4604      	mov	r4, r0
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f000 fb6e 	bl	8002a04 <_ZNKSt5dequeItSaItEE8max_sizeEv>
 8002328:	4603      	mov	r3, r0
 800232a:	429c      	cmp	r4, r3
 800232c:	bf0c      	ite	eq
 800232e:	2301      	moveq	r3, #1
 8002330:	2300      	movne	r3, #0
 8002332:	b2db      	uxtb	r3, r3
 8002334:	2b00      	cmp	r3, #0
 8002336:	d002      	beq.n	800233e <_ZNSt5dequeItSaItEE16_M_push_back_auxIJRKtEEEvDpOT_+0x2e>
	  __throw_length_error(
 8002338:	4816      	ldr	r0, [pc, #88]	; (8002394 <_ZNSt5dequeItSaItEE16_M_push_back_auxIJRKtEEEvDpOT_+0x84>)
 800233a:	f004 f876 	bl	800642a <_ZSt20__throw_length_errorPKc>
	_M_reserve_map_at_back();
 800233e:	2101      	movs	r1, #1
 8002340:	6878      	ldr	r0, [r7, #4]
 8002342:	f000 fb70 	bl	8002a26 <_ZNSt5dequeItSaItEE22_M_reserve_map_at_backEj>
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
 8002346:	687a      	ldr	r2, [r7, #4]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800234c:	1d1c      	adds	r4, r3, #4
 800234e:	4610      	mov	r0, r2
 8002350:	f000 fb84 	bl	8002a5c <_ZNSt11_Deque_baseItSaItEE16_M_allocate_nodeEv>
 8002354:	4603      	mov	r3, r0
 8002356:	6023      	str	r3, [r4, #0]
	    _Alloc_traits::construct(this->_M_impl,
 8002358:	687c      	ldr	r4, [r7, #4]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	699d      	ldr	r5, [r3, #24]
 800235e:	6838      	ldr	r0, [r7, #0]
 8002360:	f000 fb2e 	bl	80029c0 <_ZSt7forwardIRKtEOT_RNSt16remove_referenceIS2_E4typeE>
 8002364:	4603      	mov	r3, r0
 8002366:	461a      	mov	r2, r3
 8002368:	4629      	mov	r1, r5
 800236a:	4620      	mov	r0, r4
 800236c:	f7ff ffbd 	bl	80022ea <_ZNSt16allocator_traitsISaItEE9constructItJRKtEEEvRS0_PT_DpOT0_>
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	f103 0218 	add.w	r2, r3, #24
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800237a:	3304      	adds	r3, #4
 800237c:	4619      	mov	r1, r3
 800237e:	4610      	mov	r0, r2
 8002380:	f000 f99c 	bl	80026bc <_ZNSt15_Deque_iteratorItRtPtE11_M_set_nodeEPS1_>
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	69da      	ldr	r2, [r3, #28]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	619a      	str	r2, [r3, #24]
      }
 800238c:	bf00      	nop
 800238e:	3708      	adds	r7, #8
 8002390:	46bd      	mov	sp, r7
 8002392:	bdb0      	pop	{r4, r5, r7, pc}
 8002394:	080068c4 	.word	0x080068c4

08002398 <_ZStmiRKSt15_Deque_iteratorItRtPtES4_>:
      operator-(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8002398:	b580      	push	{r7, lr}
 800239a:	b082      	sub	sp, #8
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
 80023a0:	6039      	str	r1, [r7, #0]
	return difference_type(_S_buffer_size())
 80023a2:	f000 fb6d 	bl	8002a80 <_ZNSt15_Deque_iteratorItRtPtE14_S_buffer_sizeEv>
 80023a6:	4603      	mov	r3, r0
 80023a8:	4619      	mov	r1, r3
	  * (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	68da      	ldr	r2, [r3, #12]
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	68db      	ldr	r3, [r3, #12]
 80023b2:	1ad3      	subs	r3, r2, r3
 80023b4:	109b      	asrs	r3, r3, #2
 80023b6:	3b01      	subs	r3, #1
 80023b8:	fb01 f303 	mul.w	r3, r1, r3
 80023bc:	687a      	ldr	r2, [r7, #4]
 80023be:	6811      	ldr	r1, [r2, #0]
 80023c0:	687a      	ldr	r2, [r7, #4]
 80023c2:	6852      	ldr	r2, [r2, #4]
 80023c4:	1a8a      	subs	r2, r1, r2
 80023c6:	1052      	asrs	r2, r2, #1
 80023c8:	4413      	add	r3, r2
	  + (__y._M_last - __y._M_cur);
 80023ca:	683a      	ldr	r2, [r7, #0]
 80023cc:	6891      	ldr	r1, [r2, #8]
 80023ce:	683a      	ldr	r2, [r7, #0]
 80023d0:	6812      	ldr	r2, [r2, #0]
 80023d2:	1a8a      	subs	r2, r1, r2
 80023d4:	1052      	asrs	r2, r2, #1
 80023d6:	4413      	add	r3, r2
      }
 80023d8:	4618      	mov	r0, r3
 80023da:	3708      	adds	r7, #8
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}

080023e0 <_ZNKSt15_Deque_iteratorItRtPtEixEi>:
      operator[](difference_type __n) const _GLIBCXX_NOEXCEPT
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b086      	sub	sp, #24
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
 80023e8:	6039      	str	r1, [r7, #0]
      { return *(*this + __n); }
 80023ea:	f107 0308 	add.w	r3, r7, #8
 80023ee:	683a      	ldr	r2, [r7, #0]
 80023f0:	6879      	ldr	r1, [r7, #4]
 80023f2:	4618      	mov	r0, r3
 80023f4:	f000 fb4c 	bl	8002a90 <_ZStplRKSt15_Deque_iteratorItRtPtEi>
 80023f8:	f107 0308 	add.w	r3, r7, #8
 80023fc:	4618      	mov	r0, r3
 80023fe:	f000 fb5a 	bl	8002ab6 <_ZNKSt15_Deque_iteratorItRtPtEdeEv>
 8002402:	4603      	mov	r3, r0
 8002404:	4618      	mov	r0, r3
 8002406:	3718      	adds	r7, #24
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}

0800240c <_ZNSt5dequeIfSaIfEE11_S_max_sizeERKS0_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 800240c:	b580      	push	{r7, lr}
 800240e:	b084      	sub	sp, #16
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
	const size_t __diffmax = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max;
 8002414:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8002418:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f000 fb57 	bl	8002ace <_ZNSt16allocator_traitsISaIfEE8max_sizeERKS0_>
 8002420:	4603      	mov	r3, r0
 8002422:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8002424:	f107 0208 	add.w	r2, r7, #8
 8002428:	f107 030c 	add.w	r3, r7, #12
 800242c:	4611      	mov	r1, r2
 800242e:	4618      	mov	r0, r3
 8002430:	f000 fb59 	bl	8002ae6 <_ZSt3minIjERKT_S2_S2_>
 8002434:	4603      	mov	r3, r0
 8002436:	681b      	ldr	r3, [r3, #0]
      }
 8002438:	4618      	mov	r0, r3
 800243a:	3710      	adds	r7, #16
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}

08002440 <_ZNSt11_Deque_baseIfSaIfEE11_Deque_implC1ERKS0_>:
	_Deque_impl(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8002440:	b580      	push	{r7, lr}
 8002442:	b082      	sub	sp, #8
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
 8002448:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a)
 800244a:	6839      	ldr	r1, [r7, #0]
 800244c:	6878      	ldr	r0, [r7, #4]
 800244e:	f000 fb5e 	bl	8002b0e <_ZNSaIfEC1ERKS_>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	4618      	mov	r0, r3
 8002456:	f000 fb68 	bl	8002b2a <_ZNSt11_Deque_baseIfSaIfEE16_Deque_impl_dataC1Ev>
	{ }
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	4618      	mov	r0, r3
 800245e:	3708      	adds	r7, #8
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}

08002464 <_ZNSt11_Deque_baseIfSaIfEE17_M_initialize_mapEj>:
    _Deque_base<_Tp, _Alloc>::
 8002464:	b590      	push	{r4, r7, lr}
 8002466:	b089      	sub	sp, #36	; 0x24
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
 800246c:	6039      	str	r1, [r7, #0]
      const size_t __num_nodes = (__num_elements / __deque_buf_size(sizeof(_Tp))
 800246e:	2004      	movs	r0, #4
 8002470:	f7fe fdea 	bl	8001048 <_ZSt16__deque_buf_sizej>
 8002474:	4602      	mov	r2, r0
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	fbb3 f3f2 	udiv	r3, r3, r2
 800247c:	3301      	adds	r3, #1
 800247e:	61fb      	str	r3, [r7, #28]
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 8002480:	2308      	movs	r3, #8
 8002482:	60fb      	str	r3, [r7, #12]
					   size_t(__num_nodes + 2));
 8002484:	69fb      	ldr	r3, [r7, #28]
 8002486:	3302      	adds	r3, #2
 8002488:	613b      	str	r3, [r7, #16]
 800248a:	f107 0210 	add.w	r2, r7, #16
 800248e:	f107 030c 	add.w	r3, r7, #12
 8002492:	4611      	mov	r1, r2
 8002494:	4618      	mov	r0, r3
 8002496:	f000 f8c6 	bl	8002626 <_ZSt3maxIjERKT_S2_S2_>
 800249a:	4603      	mov	r3, r0
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	4619      	mov	r1, r3
 80024a8:	6878      	ldr	r0, [r7, #4]
 80024aa:	f000 fb57 	bl	8002b5c <_ZNSt11_Deque_baseIfSaIfEE15_M_allocate_mapEj>
 80024ae:	4602      	mov	r2, r0
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	601a      	str	r2, [r3, #0]
      _Map_pointer __nstart = (this->_M_impl._M_map
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681a      	ldr	r2, [r3, #0]
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6859      	ldr	r1, [r3, #4]
 80024bc:	69fb      	ldr	r3, [r7, #28]
 80024be:	1acb      	subs	r3, r1, r3
 80024c0:	085b      	lsrs	r3, r3, #1
 80024c2:	009b      	lsls	r3, r3, #2
      _Map_pointer __nstart = (this->_M_impl._M_map
 80024c4:	4413      	add	r3, r2
 80024c6:	61bb      	str	r3, [r7, #24]
      _Map_pointer __nfinish = __nstart + __num_nodes;
 80024c8:	69fb      	ldr	r3, [r7, #28]
 80024ca:	009b      	lsls	r3, r3, #2
 80024cc:	69ba      	ldr	r2, [r7, #24]
 80024ce:	4413      	add	r3, r2
 80024d0:	617b      	str	r3, [r7, #20]
	{ _M_create_nodes(__nstart, __nfinish); }
 80024d2:	697a      	ldr	r2, [r7, #20]
 80024d4:	69b9      	ldr	r1, [r7, #24]
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	f000 fb5d 	bl	8002b96 <_ZNSt11_Deque_baseIfSaIfEE15_M_create_nodesEPPfS3_>
      this->_M_impl._M_start._M_set_node(__nstart);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	3308      	adds	r3, #8
 80024e0:	69b9      	ldr	r1, [r7, #24]
 80024e2:	4618      	mov	r0, r3
 80024e4:	f000 f97f 	bl	80027e6 <_ZNSt15_Deque_iteratorIfRfPfE11_M_set_nodeEPS1_>
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	f103 0218 	add.w	r2, r3, #24
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	3b04      	subs	r3, #4
 80024f2:	4619      	mov	r1, r3
 80024f4:	4610      	mov	r0, r2
 80024f6:	f000 f976 	bl	80027e6 <_ZNSt15_Deque_iteratorIfRfPfE11_M_set_nodeEPS1_>
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	68da      	ldr	r2, [r3, #12]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	609a      	str	r2, [r3, #8]
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	69dc      	ldr	r4, [r3, #28]
					% __deque_buf_size(sizeof(_Tp)));
 8002506:	2004      	movs	r0, #4
 8002508:	f7fe fd9e 	bl	8001048 <_ZSt16__deque_buf_sizej>
 800250c:	4602      	mov	r2, r0
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	fbb3 f1f2 	udiv	r1, r3, r2
 8002514:	fb01 f202 	mul.w	r2, r1, r2
 8002518:	1a9b      	subs	r3, r3, r2
					+ __num_elements
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	18e2      	adds	r2, r4, r3
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	619a      	str	r2, [r3, #24]
    }
 8002522:	bf00      	nop
 8002524:	3724      	adds	r7, #36	; 0x24
 8002526:	46bd      	mov	sp, r7
 8002528:	bd90      	pop	{r4, r7, pc}

0800252a <_ZNSt11_Deque_baseIfSaIfEE16_M_destroy_nodesEPPfS3_>:
    _Deque_base<_Tp, _Alloc>::
 800252a:	b580      	push	{r7, lr}
 800252c:	b086      	sub	sp, #24
 800252e:	af00      	add	r7, sp, #0
 8002530:	60f8      	str	r0, [r7, #12]
 8002532:	60b9      	str	r1, [r7, #8]
 8002534:	607a      	str	r2, [r7, #4]
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	617b      	str	r3, [r7, #20]
 800253a:	697a      	ldr	r2, [r7, #20]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	429a      	cmp	r2, r3
 8002540:	d209      	bcs.n	8002556 <_ZNSt11_Deque_baseIfSaIfEE16_M_destroy_nodesEPPfS3_+0x2c>
	_M_deallocate_node(*__n);
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4619      	mov	r1, r3
 8002548:	68f8      	ldr	r0, [r7, #12]
 800254a:	f000 f939 	bl	80027c0 <_ZNSt11_Deque_baseIfSaIfEE18_M_deallocate_nodeEPf>
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	3304      	adds	r3, #4
 8002552:	617b      	str	r3, [r7, #20]
 8002554:	e7f1      	b.n	800253a <_ZNSt11_Deque_baseIfSaIfEE16_M_destroy_nodesEPPfS3_+0x10>
    }
 8002556:	bf00      	nop
 8002558:	3718      	adds	r7, #24
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}

0800255e <_ZNSt11_Deque_baseIfSaIfEE17_M_deallocate_mapEPPfj>:
      _M_deallocate_map(_Map_pointer __p, size_t __n) _GLIBCXX_NOEXCEPT
 800255e:	b580      	push	{r7, lr}
 8002560:	b086      	sub	sp, #24
 8002562:	af00      	add	r7, sp, #0
 8002564:	60f8      	str	r0, [r7, #12]
 8002566:	60b9      	str	r1, [r7, #8]
 8002568:	607a      	str	r2, [r7, #4]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 800256a:	f107 0314 	add.w	r3, r7, #20
 800256e:	68f9      	ldr	r1, [r7, #12]
 8002570:	4618      	mov	r0, r3
 8002572:	f000 fb2a 	bl	8002bca <_ZNKSt11_Deque_baseIfSaIfEE20_M_get_map_allocatorEv>
	_Map_alloc_traits::deallocate(__map_alloc, __p, __n);
 8002576:	f107 0314 	add.w	r3, r7, #20
 800257a:	687a      	ldr	r2, [r7, #4]
 800257c:	68b9      	ldr	r1, [r7, #8]
 800257e:	4618      	mov	r0, r3
 8002580:	f000 fb40 	bl	8002c04 <_ZNSt16allocator_traitsISaIPfEE10deallocateERS1_PS0_j>
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8002584:	f107 0314 	add.w	r3, r7, #20
 8002588:	4618      	mov	r0, r3
 800258a:	f000 fb2f 	bl	8002bec <_ZNSaIPfED1Ev>
      }
 800258e:	bf00      	nop
 8002590:	3718      	adds	r7, #24
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}

08002596 <_ZNSt5dequeIfSaIfEE14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 8002596:	b580      	push	{r7, lr}
 8002598:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 800259a:	2004      	movs	r0, #4
 800259c:	f7fe fd54 	bl	8001048 <_ZSt16__deque_buf_sizej>
 80025a0:	4603      	mov	r3, r0
 80025a2:	4618      	mov	r0, r3
 80025a4:	bd80      	pop	{r7, pc}

080025a6 <_ZSt22__uninitialized_fill_aIPfffEvT_S1_RKT0_RSaIT1_E>:
	}
    }

  template<typename _ForwardIterator, typename _Tp, typename _Tp2>
    inline void
    __uninitialized_fill_a(_ForwardIterator __first, _ForwardIterator __last,
 80025a6:	b580      	push	{r7, lr}
 80025a8:	b084      	sub	sp, #16
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	60f8      	str	r0, [r7, #12]
 80025ae:	60b9      	str	r1, [r7, #8]
 80025b0:	607a      	str	r2, [r7, #4]
 80025b2:	603b      	str	r3, [r7, #0]
			   const _Tp& __x, allocator<_Tp2>&)
    { std::uninitialized_fill(__first, __last, __x); }
 80025b4:	687a      	ldr	r2, [r7, #4]
 80025b6:	68b9      	ldr	r1, [r7, #8]
 80025b8:	68f8      	ldr	r0, [r7, #12]
 80025ba:	f000 fb32 	bl	8002c22 <_ZSt18uninitialized_fillIPffEvT_S1_RKT0_>
 80025be:	bf00      	nop
 80025c0:	3710      	adds	r7, #16
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}

080025c6 <_ZNSaItEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 80025c6:	b580      	push	{r7, lr}
 80025c8:	b082      	sub	sp, #8
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	6078      	str	r0, [r7, #4]
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f000 fb40 	bl	8002c54 <_ZN9__gnu_cxx13new_allocatorItEC1Ev>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	4618      	mov	r0, r3
 80025d8:	3708      	adds	r7, #8
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}

080025de <_ZNSt11_Deque_baseItSaItEE16_Deque_impl_dataC1Ev>:
	_Deque_impl_data() _GLIBCXX_NOEXCEPT
 80025de:	b580      	push	{r7, lr}
 80025e0:	b082      	sub	sp, #8
 80025e2:	af00      	add	r7, sp, #0
 80025e4:	6078      	str	r0, [r7, #4]
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2200      	movs	r2, #0
 80025ea:	601a      	str	r2, [r3, #0]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2200      	movs	r2, #0
 80025f0:	605a      	str	r2, [r3, #4]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	3308      	adds	r3, #8
 80025f6:	4618      	mov	r0, r3
 80025f8:	f000 fb37 	bl	8002c6a <_ZNSt15_Deque_iteratorItRtPtEC1Ev>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	3318      	adds	r3, #24
 8002600:	4618      	mov	r0, r3
 8002602:	f000 fb32 	bl	8002c6a <_ZNSt15_Deque_iteratorItRtPtEC1Ev>
	{ }
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	4618      	mov	r0, r3
 800260a:	3708      	adds	r7, #8
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}

08002610 <_ZN9__gnu_cxx13new_allocatorItED1Ev>:
 8002610:	b480      	push	{r7}
 8002612:	b083      	sub	sp, #12
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	4618      	mov	r0, r3
 800261c:	370c      	adds	r7, #12
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr

08002626 <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 8002626:	b480      	push	{r7}
 8002628:	b083      	sub	sp, #12
 800262a:	af00      	add	r7, sp, #0
 800262c:	6078      	str	r0, [r7, #4]
 800262e:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	429a      	cmp	r2, r3
 800263a:	d201      	bcs.n	8002640 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	e000      	b.n	8002642 <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 8002640:	687b      	ldr	r3, [r7, #4]
    }
 8002642:	4618      	mov	r0, r3
 8002644:	370c      	adds	r7, #12
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr

0800264e <_ZNSt11_Deque_baseItSaItEE15_M_allocate_mapEj>:
      _M_allocate_map(size_t __n)
 800264e:	b590      	push	{r4, r7, lr}
 8002650:	b085      	sub	sp, #20
 8002652:	af00      	add	r7, sp, #0
 8002654:	6078      	str	r0, [r7, #4]
 8002656:	6039      	str	r1, [r7, #0]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8002658:	f107 030c 	add.w	r3, r7, #12
 800265c:	6879      	ldr	r1, [r7, #4]
 800265e:	4618      	mov	r0, r3
 8002660:	f000 f858 	bl	8002714 <_ZNKSt11_Deque_baseItSaItEE20_M_get_map_allocatorEv>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 8002664:	f107 030c 	add.w	r3, r7, #12
 8002668:	6839      	ldr	r1, [r7, #0]
 800266a:	4618      	mov	r0, r3
 800266c:	f000 fb14 	bl	8002c98 <_ZNSt16allocator_traitsISaIPtEE8allocateERS1_j>
 8002670:	4604      	mov	r4, r0
 8002672:	bf00      	nop
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8002674:	f107 030c 	add.w	r3, r7, #12
 8002678:	4618      	mov	r0, r3
 800267a:	f000 f85c 	bl	8002736 <_ZNSaIPtED1Ev>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 800267e:	4623      	mov	r3, r4
      }
 8002680:	4618      	mov	r0, r3
 8002682:	3714      	adds	r7, #20
 8002684:	46bd      	mov	sp, r7
 8002686:	bd90      	pop	{r4, r7, pc}

08002688 <_ZNSt11_Deque_baseItSaItEE15_M_create_nodesEPPtS3_>:
    _Deque_base<_Tp, _Alloc>::
 8002688:	b580      	push	{r7, lr}
 800268a:	b086      	sub	sp, #24
 800268c:	af00      	add	r7, sp, #0
 800268e:	60f8      	str	r0, [r7, #12]
 8002690:	60b9      	str	r1, [r7, #8]
 8002692:	607a      	str	r2, [r7, #4]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	617b      	str	r3, [r7, #20]
 8002698:	697a      	ldr	r2, [r7, #20]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	429a      	cmp	r2, r3
 800269e:	d209      	bcs.n	80026b4 <_ZNSt11_Deque_baseItSaItEE15_M_create_nodesEPPtS3_+0x2c>
	    *__cur = this->_M_allocate_node();
 80026a0:	68f8      	ldr	r0, [r7, #12]
 80026a2:	f000 f9db 	bl	8002a5c <_ZNSt11_Deque_baseItSaItEE16_M_allocate_nodeEv>
 80026a6:	4602      	mov	r2, r0
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	601a      	str	r2, [r3, #0]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	3304      	adds	r3, #4
 80026b0:	617b      	str	r3, [r7, #20]
 80026b2:	e7f1      	b.n	8002698 <_ZNSt11_Deque_baseItSaItEE15_M_create_nodesEPPtS3_+0x10>
    }
 80026b4:	bf00      	nop
 80026b6:	3718      	adds	r7, #24
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}

080026bc <_ZNSt15_Deque_iteratorItRtPtE11_M_set_nodeEPS1_>:
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
 80026bc:	b590      	push	{r4, r7, lr}
 80026be:	b083      	sub	sp, #12
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
 80026c4:	6039      	str	r1, [r7, #0]
	_M_node = __new_node;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	683a      	ldr	r2, [r7, #0]
 80026ca:	60da      	str	r2, [r3, #12]
	_M_first = *__new_node;
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	605a      	str	r2, [r3, #4]
	_M_last = _M_first + difference_type(_S_buffer_size());
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	685c      	ldr	r4, [r3, #4]
 80026d8:	f000 f9d2 	bl	8002a80 <_ZNSt15_Deque_iteratorItRtPtE14_S_buffer_sizeEv>
 80026dc:	4603      	mov	r3, r0
 80026de:	005b      	lsls	r3, r3, #1
 80026e0:	18e2      	adds	r2, r4, r3
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	609a      	str	r2, [r3, #8]
      }
 80026e6:	bf00      	nop
 80026e8:	370c      	adds	r7, #12
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd90      	pop	{r4, r7, pc}

080026ee <_ZNSt11_Deque_baseItSaItEE18_M_deallocate_nodeEPt>:
      _M_deallocate_node(_Ptr __p) _GLIBCXX_NOEXCEPT
 80026ee:	b590      	push	{r4, r7, lr}
 80026f0:	b083      	sub	sp, #12
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	6078      	str	r0, [r7, #4]
 80026f6:	6039      	str	r1, [r7, #0]
	_Traits::deallocate(_M_impl, __p, __deque_buf_size(sizeof(_Tp)));
 80026f8:	687c      	ldr	r4, [r7, #4]
 80026fa:	2002      	movs	r0, #2
 80026fc:	f7fe fca4 	bl	8001048 <_ZSt16__deque_buf_sizej>
 8002700:	4603      	mov	r3, r0
 8002702:	461a      	mov	r2, r3
 8002704:	6839      	ldr	r1, [r7, #0]
 8002706:	4620      	mov	r0, r4
 8002708:	f000 fad5 	bl	8002cb6 <_ZNSt16allocator_traitsISaItEE10deallocateERS0_Ptj>
      }
 800270c:	bf00      	nop
 800270e:	370c      	adds	r7, #12
 8002710:	46bd      	mov	sp, r7
 8002712:	bd90      	pop	{r4, r7, pc}

08002714 <_ZNKSt11_Deque_baseItSaItEE20_M_get_map_allocatorEv>:
      _M_get_map_allocator() const _GLIBCXX_NOEXCEPT
 8002714:	b580      	push	{r7, lr}
 8002716:	b082      	sub	sp, #8
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
 800271c:	6039      	str	r1, [r7, #0]
      { return _Map_alloc_type(_M_get_Tp_allocator()); }
 800271e:	6838      	ldr	r0, [r7, #0]
 8002720:	f000 fad8 	bl	8002cd4 <_ZNKSt11_Deque_baseItSaItEE19_M_get_Tp_allocatorEv>
 8002724:	4603      	mov	r3, r0
 8002726:	4619      	mov	r1, r3
 8002728:	6878      	ldr	r0, [r7, #4]
 800272a:	f000 fade 	bl	8002cea <_ZNSaIPtEC1ItEERKSaIT_E>
 800272e:	6878      	ldr	r0, [r7, #4]
 8002730:	3708      	adds	r7, #8
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}

08002736 <_ZNSaIPtED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8002736:	b580      	push	{r7, lr}
 8002738:	b082      	sub	sp, #8
 800273a:	af00      	add	r7, sp, #0
 800273c:	6078      	str	r0, [r7, #4]
 800273e:	6878      	ldr	r0, [r7, #4]
 8002740:	f000 fae0 	bl	8002d04 <_ZN9__gnu_cxx13new_allocatorIPtED1Ev>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	4618      	mov	r0, r3
 8002748:	3708      	adds	r7, #8
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}

0800274e <_ZNSt16allocator_traitsISaIPtEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800274e:	b580      	push	{r7, lr}
 8002750:	b084      	sub	sp, #16
 8002752:	af00      	add	r7, sp, #0
 8002754:	60f8      	str	r0, [r7, #12]
 8002756:	60b9      	str	r1, [r7, #8]
 8002758:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800275a:	687a      	ldr	r2, [r7, #4]
 800275c:	68b9      	ldr	r1, [r7, #8]
 800275e:	68f8      	ldr	r0, [r7, #12]
 8002760:	f000 fadb 	bl	8002d1a <_ZN9__gnu_cxx13new_allocatorIPtE10deallocateEPS1_j>
 8002764:	bf00      	nop
 8002766:	3710      	adds	r7, #16
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}

0800276c <_ZStplRKSt15_Deque_iteratorIfRfPfEi>:
      operator+(const _Self& __x, difference_type __n) _GLIBCXX_NOEXCEPT
 800276c:	b580      	push	{r7, lr}
 800276e:	b084      	sub	sp, #16
 8002770:	af00      	add	r7, sp, #0
 8002772:	60f8      	str	r0, [r7, #12]
 8002774:	60b9      	str	r1, [r7, #8]
 8002776:	607a      	str	r2, [r7, #4]
	_Self __tmp = __x;
 8002778:	68b9      	ldr	r1, [r7, #8]
 800277a:	68f8      	ldr	r0, [r7, #12]
 800277c:	f7ff fbad 	bl	8001eda <_ZNSt15_Deque_iteratorIfRfPfEC1ERKS2_>
	__tmp += __n;
 8002780:	6879      	ldr	r1, [r7, #4]
 8002782:	68f8      	ldr	r0, [r7, #12]
 8002784:	f000 fad9 	bl	8002d3a <_ZNSt15_Deque_iteratorIfRfPfEpLEi>
	return __tmp;
 8002788:	bf00      	nop
      }
 800278a:	68f8      	ldr	r0, [r7, #12]
 800278c:	3710      	adds	r7, #16
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}

08002792 <_ZNKSt15_Deque_iteratorIfRfPfEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8002792:	b480      	push	{r7}
 8002794:	b083      	sub	sp, #12
 8002796:	af00      	add	r7, sp, #0
 8002798:	6078      	str	r0, [r7, #4]
      { return *_M_cur; }
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4618      	mov	r0, r3
 80027a0:	370c      	adds	r7, #12
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr

080027aa <_ZN9__gnu_cxx13new_allocatorIfE7destroyIfEEvPT_>:
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
	void
	destroy(_Up* __p)
 80027aa:	b480      	push	{r7}
 80027ac:	b083      	sub	sp, #12
 80027ae:	af00      	add	r7, sp, #0
 80027b0:	6078      	str	r0, [r7, #4]
 80027b2:	6039      	str	r1, [r7, #0]
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
 80027b4:	bf00      	nop
 80027b6:	370c      	adds	r7, #12
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr

080027c0 <_ZNSt11_Deque_baseIfSaIfEE18_M_deallocate_nodeEPf>:
      _M_deallocate_node(_Ptr __p) _GLIBCXX_NOEXCEPT
 80027c0:	b590      	push	{r4, r7, lr}
 80027c2:	b083      	sub	sp, #12
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
 80027c8:	6039      	str	r1, [r7, #0]
	_Traits::deallocate(_M_impl, __p, __deque_buf_size(sizeof(_Tp)));
 80027ca:	687c      	ldr	r4, [r7, #4]
 80027cc:	2004      	movs	r0, #4
 80027ce:	f7fe fc3b 	bl	8001048 <_ZSt16__deque_buf_sizej>
 80027d2:	4603      	mov	r3, r0
 80027d4:	461a      	mov	r2, r3
 80027d6:	6839      	ldr	r1, [r7, #0]
 80027d8:	4620      	mov	r0, r4
 80027da:	f000 fb05 	bl	8002de8 <_ZNSt16allocator_traitsISaIfEE10deallocateERS0_Pfj>
      }
 80027de:	bf00      	nop
 80027e0:	370c      	adds	r7, #12
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd90      	pop	{r4, r7, pc}

080027e6 <_ZNSt15_Deque_iteratorIfRfPfE11_M_set_nodeEPS1_>:
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
 80027e6:	b590      	push	{r4, r7, lr}
 80027e8:	b083      	sub	sp, #12
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	6078      	str	r0, [r7, #4]
 80027ee:	6039      	str	r1, [r7, #0]
	_M_node = __new_node;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	683a      	ldr	r2, [r7, #0]
 80027f4:	60da      	str	r2, [r3, #12]
	_M_first = *__new_node;
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	605a      	str	r2, [r3, #4]
	_M_last = _M_first + difference_type(_S_buffer_size());
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	685c      	ldr	r4, [r3, #4]
 8002802:	f000 fa1f 	bl	8002c44 <_ZNSt15_Deque_iteratorIfRfPfE14_S_buffer_sizeEv>
 8002806:	4603      	mov	r3, r0
 8002808:	009b      	lsls	r3, r3, #2
 800280a:	18e2      	adds	r2, r4, r3
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	609a      	str	r2, [r3, #8]
      }
 8002810:	bf00      	nop
 8002812:	370c      	adds	r7, #12
 8002814:	46bd      	mov	sp, r7
 8002816:	bd90      	pop	{r4, r7, pc}

08002818 <_ZSt7forwardIRKfEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002818:	b480      	push	{r7}
 800281a:	b083      	sub	sp, #12
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	4618      	mov	r0, r3
 8002824:	370c      	adds	r7, #12
 8002826:	46bd      	mov	sp, r7
 8002828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282c:	4770      	bx	lr

0800282e <_ZN9__gnu_cxx13new_allocatorIfE9constructIfJRKfEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 800282e:	b590      	push	{r4, r7, lr}
 8002830:	b085      	sub	sp, #20
 8002832:	af00      	add	r7, sp, #0
 8002834:	60f8      	str	r0, [r7, #12]
 8002836:	60b9      	str	r1, [r7, #8]
 8002838:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	f7ff ffec 	bl	8002818 <_ZSt7forwardIRKfEOT_RNSt16remove_referenceIS2_E4typeE>
 8002840:	4603      	mov	r3, r0
 8002842:	681c      	ldr	r4, [r3, #0]
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	4619      	mov	r1, r3
 8002848:	2004      	movs	r0, #4
 800284a:	f7fe fbe1 	bl	8001010 <_ZnwjPv>
 800284e:	4603      	mov	r3, r0
 8002850:	601c      	str	r4, [r3, #0]
 8002852:	bf00      	nop
 8002854:	3714      	adds	r7, #20
 8002856:	46bd      	mov	sp, r7
 8002858:	bd90      	pop	{r4, r7, pc}

0800285a <_ZNKSt5dequeIfSaIfEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800285a:	b580      	push	{r7, lr}
 800285c:	b082      	sub	sp, #8
 800285e:	af00      	add	r7, sp, #0
 8002860:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	f103 0218 	add.w	r2, r3, #24
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	3308      	adds	r3, #8
 800286c:	4619      	mov	r1, r3
 800286e:	4610      	mov	r0, r2
 8002870:	f000 fac9 	bl	8002e06 <_ZStmiRKSt15_Deque_iteratorIfRfPfES4_>
 8002874:	4603      	mov	r3, r0
 8002876:	4618      	mov	r0, r3
 8002878:	3708      	adds	r7, #8
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}

0800287e <_ZNKSt5dequeIfSaIfEE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 800287e:	b580      	push	{r7, lr}
 8002880:	b082      	sub	sp, #8
 8002882:	af00      	add	r7, sp, #0
 8002884:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	4618      	mov	r0, r3
 800288a:	f000 fae0 	bl	8002e4e <_ZNKSt11_Deque_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 800288e:	4603      	mov	r3, r0
 8002890:	4618      	mov	r0, r3
 8002892:	f7ff fdbb 	bl	800240c <_ZNSt5dequeIfSaIfEE11_S_max_sizeERKS0_>
 8002896:	4603      	mov	r3, r0
 8002898:	4618      	mov	r0, r3
 800289a:	3708      	adds	r7, #8
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}

080028a0 <_ZNSt5dequeIfSaIfEE22_M_reserve_map_at_backEj>:
       *  Makes sure the _M_map has space for new nodes.  Does not
       *  actually add the nodes.  Can invalidate _M_map pointers.
       *  (And consequently, %deque iterators.)
       */
      void
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b082      	sub	sp, #8
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
 80028a8:	6039      	str	r1, [r7, #0]
      {
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	1c5a      	adds	r2, r3, #1
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	685b      	ldr	r3, [r3, #4]
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
 80028b2:	6879      	ldr	r1, [r7, #4]
 80028b4:	6a48      	ldr	r0, [r1, #36]	; 0x24
 80028b6:	6879      	ldr	r1, [r7, #4]
 80028b8:	6809      	ldr	r1, [r1, #0]
 80028ba:	1a41      	subs	r1, r0, r1
 80028bc:	1089      	asrs	r1, r1, #2
 80028be:	1a5b      	subs	r3, r3, r1
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d904      	bls.n	80028ce <_ZNSt5dequeIfSaIfEE22_M_reserve_map_at_backEj+0x2e>
	  _M_reallocate_map(__nodes_to_add, false);
 80028c4:	2200      	movs	r2, #0
 80028c6:	6839      	ldr	r1, [r7, #0]
 80028c8:	6878      	ldr	r0, [r7, #4]
 80028ca:	f000 facb 	bl	8002e64 <_ZNSt5dequeIfSaIfEE17_M_reallocate_mapEjb>
      }
 80028ce:	bf00      	nop
 80028d0:	3708      	adds	r7, #8
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}

080028d6 <_ZNSt11_Deque_baseIfSaIfEE16_M_allocate_nodeEv>:
      _M_allocate_node()
 80028d6:	b590      	push	{r4, r7, lr}
 80028d8:	b083      	sub	sp, #12
 80028da:	af00      	add	r7, sp, #0
 80028dc:	6078      	str	r0, [r7, #4]
	return _Traits::allocate(_M_impl, __deque_buf_size(sizeof(_Tp)));
 80028de:	687c      	ldr	r4, [r7, #4]
 80028e0:	2004      	movs	r0, #4
 80028e2:	f7fe fbb1 	bl	8001048 <_ZSt16__deque_buf_sizej>
 80028e6:	4603      	mov	r3, r0
 80028e8:	4619      	mov	r1, r3
 80028ea:	4620      	mov	r0, r4
 80028ec:	f000 fb54 	bl	8002f98 <_ZNSt16allocator_traitsISaIfEE8allocateERS0_j>
 80028f0:	4603      	mov	r3, r0
      }
 80028f2:	4618      	mov	r0, r3
 80028f4:	370c      	adds	r7, #12
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd90      	pop	{r4, r7, pc}

080028fa <_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80028fa:	b480      	push	{r7}
 80028fc:	b083      	sub	sp, #12
 80028fe:	af00      	add	r7, sp, #0
 8002900:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	4618      	mov	r0, r3
 8002906:	370c      	adds	r7, #12
 8002908:	46bd      	mov	sp, r7
 800290a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290e:	4770      	bx	lr

08002910 <_ZNSt16allocator_traitsISaIfEE9constructIfJfEEEvRS0_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8002910:	b580      	push	{r7, lr}
 8002912:	b084      	sub	sp, #16
 8002914:	af00      	add	r7, sp, #0
 8002916:	60f8      	str	r0, [r7, #12]
 8002918:	60b9      	str	r1, [r7, #8]
 800291a:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 800291c:	6878      	ldr	r0, [r7, #4]
 800291e:	f7ff ffec 	bl	80028fa <_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE>
 8002922:	4603      	mov	r3, r0
 8002924:	461a      	mov	r2, r3
 8002926:	68b9      	ldr	r1, [r7, #8]
 8002928:	68f8      	ldr	r0, [r7, #12]
 800292a:	f000 fb44 	bl	8002fb6 <_ZN9__gnu_cxx13new_allocatorIfE9constructIfJfEEEvPT_DpOT0_>
	}
 800292e:	bf00      	nop
 8002930:	3710      	adds	r7, #16
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
	...

08002938 <_ZNSt5dequeIfSaIfEE16_M_push_back_auxIJfEEEvDpOT_>:
      deque<_Tp, _Alloc>::
 8002938:	b5b0      	push	{r4, r5, r7, lr}
 800293a:	b082      	sub	sp, #8
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
 8002940:	6039      	str	r1, [r7, #0]
	if (size() == max_size())
 8002942:	6878      	ldr	r0, [r7, #4]
 8002944:	f7ff ff89 	bl	800285a <_ZNKSt5dequeIfSaIfEE4sizeEv>
 8002948:	4604      	mov	r4, r0
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	f7ff ff97 	bl	800287e <_ZNKSt5dequeIfSaIfEE8max_sizeEv>
 8002950:	4603      	mov	r3, r0
 8002952:	429c      	cmp	r4, r3
 8002954:	bf0c      	ite	eq
 8002956:	2301      	moveq	r3, #1
 8002958:	2300      	movne	r3, #0
 800295a:	b2db      	uxtb	r3, r3
 800295c:	2b00      	cmp	r3, #0
 800295e:	d002      	beq.n	8002966 <_ZNSt5dequeIfSaIfEE16_M_push_back_auxIJfEEEvDpOT_+0x2e>
	  __throw_length_error(
 8002960:	4816      	ldr	r0, [pc, #88]	; (80029bc <_ZNSt5dequeIfSaIfEE16_M_push_back_auxIJfEEEvDpOT_+0x84>)
 8002962:	f003 fd62 	bl	800642a <_ZSt20__throw_length_errorPKc>
	_M_reserve_map_at_back();
 8002966:	2101      	movs	r1, #1
 8002968:	6878      	ldr	r0, [r7, #4]
 800296a:	f7ff ff99 	bl	80028a0 <_ZNSt5dequeIfSaIfEE22_M_reserve_map_at_backEj>
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
 800296e:	687a      	ldr	r2, [r7, #4]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002974:	1d1c      	adds	r4, r3, #4
 8002976:	4610      	mov	r0, r2
 8002978:	f7ff ffad 	bl	80028d6 <_ZNSt11_Deque_baseIfSaIfEE16_M_allocate_nodeEv>
 800297c:	4603      	mov	r3, r0
 800297e:	6023      	str	r3, [r4, #0]
	    _Alloc_traits::construct(this->_M_impl,
 8002980:	687c      	ldr	r4, [r7, #4]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	699d      	ldr	r5, [r3, #24]
 8002986:	6838      	ldr	r0, [r7, #0]
 8002988:	f7ff ffb7 	bl	80028fa <_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE>
 800298c:	4603      	mov	r3, r0
 800298e:	461a      	mov	r2, r3
 8002990:	4629      	mov	r1, r5
 8002992:	4620      	mov	r0, r4
 8002994:	f7ff ffbc 	bl	8002910 <_ZNSt16allocator_traitsISaIfEE9constructIfJfEEEvRS0_PT_DpOT0_>
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	f103 0218 	add.w	r2, r3, #24
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a2:	3304      	adds	r3, #4
 80029a4:	4619      	mov	r1, r3
 80029a6:	4610      	mov	r0, r2
 80029a8:	f7ff ff1d 	bl	80027e6 <_ZNSt15_Deque_iteratorIfRfPfE11_M_set_nodeEPS1_>
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	69da      	ldr	r2, [r3, #28]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	619a      	str	r2, [r3, #24]
      }
 80029b4:	bf00      	nop
 80029b6:	3708      	adds	r7, #8
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bdb0      	pop	{r4, r5, r7, pc}
 80029bc:	080068c4 	.word	0x080068c4

080029c0 <_ZSt7forwardIRKtEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80029c0:	b480      	push	{r7}
 80029c2:	b083      	sub	sp, #12
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	4618      	mov	r0, r3
 80029cc:	370c      	adds	r7, #12
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr

080029d6 <_ZN9__gnu_cxx13new_allocatorItE9constructItJRKtEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 80029d6:	b590      	push	{r4, r7, lr}
 80029d8:	b085      	sub	sp, #20
 80029da:	af00      	add	r7, sp, #0
 80029dc:	60f8      	str	r0, [r7, #12]
 80029de:	60b9      	str	r1, [r7, #8]
 80029e0:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	f7ff ffec 	bl	80029c0 <_ZSt7forwardIRKtEOT_RNSt16remove_referenceIS2_E4typeE>
 80029e8:	4603      	mov	r3, r0
 80029ea:	881c      	ldrh	r4, [r3, #0]
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	4619      	mov	r1, r3
 80029f0:	2002      	movs	r0, #2
 80029f2:	f7fe fb0d 	bl	8001010 <_ZnwjPv>
 80029f6:	4603      	mov	r3, r0
 80029f8:	4622      	mov	r2, r4
 80029fa:	801a      	strh	r2, [r3, #0]
 80029fc:	bf00      	nop
 80029fe:	3714      	adds	r7, #20
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd90      	pop	{r4, r7, pc}

08002a04 <_ZNKSt5dequeItSaItEE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b082      	sub	sp, #8
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f000 f960 	bl	8002cd4 <_ZNKSt11_Deque_baseItSaItEE19_M_get_Tp_allocatorEv>
 8002a14:	4603      	mov	r3, r0
 8002a16:	4618      	mov	r0, r3
 8002a18:	f000 fae3 	bl	8002fe2 <_ZNSt5dequeItSaItEE11_S_max_sizeERKS0_>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	4618      	mov	r0, r3
 8002a20:	3708      	adds	r7, #8
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}

08002a26 <_ZNSt5dequeItSaItEE22_M_reserve_map_at_backEj>:
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
 8002a26:	b580      	push	{r7, lr}
 8002a28:	b082      	sub	sp, #8
 8002a2a:	af00      	add	r7, sp, #0
 8002a2c:	6078      	str	r0, [r7, #4]
 8002a2e:	6039      	str	r1, [r7, #0]
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	1c5a      	adds	r2, r3, #1
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	685b      	ldr	r3, [r3, #4]
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
 8002a38:	6879      	ldr	r1, [r7, #4]
 8002a3a:	6a48      	ldr	r0, [r1, #36]	; 0x24
 8002a3c:	6879      	ldr	r1, [r7, #4]
 8002a3e:	6809      	ldr	r1, [r1, #0]
 8002a40:	1a41      	subs	r1, r0, r1
 8002a42:	1089      	asrs	r1, r1, #2
 8002a44:	1a5b      	subs	r3, r3, r1
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 8002a46:	429a      	cmp	r2, r3
 8002a48:	d904      	bls.n	8002a54 <_ZNSt5dequeItSaItEE22_M_reserve_map_at_backEj+0x2e>
	  _M_reallocate_map(__nodes_to_add, false);
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	6839      	ldr	r1, [r7, #0]
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	f000 fae1 	bl	8003016 <_ZNSt5dequeItSaItEE17_M_reallocate_mapEjb>
      }
 8002a54:	bf00      	nop
 8002a56:	3708      	adds	r7, #8
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}

08002a5c <_ZNSt11_Deque_baseItSaItEE16_M_allocate_nodeEv>:
      _M_allocate_node()
 8002a5c:	b590      	push	{r4, r7, lr}
 8002a5e:	b083      	sub	sp, #12
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
	return _Traits::allocate(_M_impl, __deque_buf_size(sizeof(_Tp)));
 8002a64:	687c      	ldr	r4, [r7, #4]
 8002a66:	2002      	movs	r0, #2
 8002a68:	f7fe faee 	bl	8001048 <_ZSt16__deque_buf_sizej>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	4619      	mov	r1, r3
 8002a70:	4620      	mov	r0, r4
 8002a72:	f000 fb6a 	bl	800314a <_ZNSt16allocator_traitsISaItEE8allocateERS0_j>
 8002a76:	4603      	mov	r3, r0
      }
 8002a78:	4618      	mov	r0, r3
 8002a7a:	370c      	adds	r7, #12
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd90      	pop	{r4, r7, pc}

08002a80 <_ZNSt15_Deque_iteratorItRtPtE14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 8002a80:	b580      	push	{r7, lr}
 8002a82:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 8002a84:	2002      	movs	r0, #2
 8002a86:	f7fe fadf 	bl	8001048 <_ZSt16__deque_buf_sizej>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	bd80      	pop	{r7, pc}

08002a90 <_ZStplRKSt15_Deque_iteratorItRtPtEi>:
      operator+(const _Self& __x, difference_type __n) _GLIBCXX_NOEXCEPT
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b084      	sub	sp, #16
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	60f8      	str	r0, [r7, #12]
 8002a98:	60b9      	str	r1, [r7, #8]
 8002a9a:	607a      	str	r2, [r7, #4]
	_Self __tmp = __x;
 8002a9c:	68b9      	ldr	r1, [r7, #8]
 8002a9e:	68f8      	ldr	r0, [r7, #12]
 8002aa0:	f7ff fb22 	bl	80020e8 <_ZNSt15_Deque_iteratorItRtPtEC1ERKS2_>
	__tmp += __n;
 8002aa4:	6879      	ldr	r1, [r7, #4]
 8002aa6:	68f8      	ldr	r0, [r7, #12]
 8002aa8:	f000 fb5e 	bl	8003168 <_ZNSt15_Deque_iteratorItRtPtEpLEi>
	return __tmp;
 8002aac:	bf00      	nop
      }
 8002aae:	68f8      	ldr	r0, [r7, #12]
 8002ab0:	3710      	adds	r7, #16
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}

08002ab6 <_ZNKSt15_Deque_iteratorItRtPtEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8002ab6:	b480      	push	{r7}
 8002ab8:	b083      	sub	sp, #12
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	6078      	str	r0, [r7, #4]
      { return *_M_cur; }
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	370c      	adds	r7, #12
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr

08002ace <_ZNSt16allocator_traitsISaIfEE8max_sizeERKS0_>:
       *  @brief  The maximum supported allocation size
       *  @param  __a  An allocator.
       *  @return @c __a.max_size()
      */
      static _GLIBCXX20_CONSTEXPR size_type
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8002ace:	b580      	push	{r7, lr}
 8002ad0:	b082      	sub	sp, #8
 8002ad2:	af00      	add	r7, sp, #0
 8002ad4:	6078      	str	r0, [r7, #4]
      {
#if __cplusplus <= 201703L
	return __a.max_size();
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f000 fb9d 	bl	8003216 <_ZNK9__gnu_cxx13new_allocatorIfE8max_sizeEv>
 8002adc:	4603      	mov	r3, r0
#else
	return size_t(-1) / sizeof(value_type);
#endif
      }
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3708      	adds	r7, #8
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}

08002ae6 <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8002ae6:	b480      	push	{r7}
 8002ae8:	b083      	sub	sp, #12
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	6078      	str	r0, [r7, #4]
 8002aee:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d201      	bcs.n	8002b00 <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	e000      	b.n	8002b02 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 8002b00:	687b      	ldr	r3, [r7, #4]
    }
 8002b02:	4618      	mov	r0, r3
 8002b04:	370c      	adds	r7, #12
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr

08002b0e <_ZNSaIfEC1ERKS_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 8002b0e:	b580      	push	{r7, lr}
 8002b10:	b082      	sub	sp, #8
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	6078      	str	r0, [r7, #4]
 8002b16:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8002b18:	6839      	ldr	r1, [r7, #0]
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	f000 fb87 	bl	800322e <_ZN9__gnu_cxx13new_allocatorIfEC1ERKS1_>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	4618      	mov	r0, r3
 8002b24:	3708      	adds	r7, #8
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}

08002b2a <_ZNSt11_Deque_baseIfSaIfEE16_Deque_impl_dataC1Ev>:
	_Deque_impl_data() _GLIBCXX_NOEXCEPT
 8002b2a:	b580      	push	{r7, lr}
 8002b2c:	b082      	sub	sp, #8
 8002b2e:	af00      	add	r7, sp, #0
 8002b30:	6078      	str	r0, [r7, #4]
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2200      	movs	r2, #0
 8002b36:	601a      	str	r2, [r3, #0]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	605a      	str	r2, [r3, #4]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	3308      	adds	r3, #8
 8002b42:	4618      	mov	r0, r3
 8002b44:	f000 fb7f 	bl	8003246 <_ZNSt15_Deque_iteratorIfRfPfEC1Ev>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	3318      	adds	r3, #24
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f000 fb7a 	bl	8003246 <_ZNSt15_Deque_iteratorIfRfPfEC1Ev>
	{ }
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	4618      	mov	r0, r3
 8002b56:	3708      	adds	r7, #8
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}

08002b5c <_ZNSt11_Deque_baseIfSaIfEE15_M_allocate_mapEj>:
      _M_allocate_map(size_t __n)
 8002b5c:	b590      	push	{r4, r7, lr}
 8002b5e:	b085      	sub	sp, #20
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
 8002b64:	6039      	str	r1, [r7, #0]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8002b66:	f107 030c 	add.w	r3, r7, #12
 8002b6a:	6879      	ldr	r1, [r7, #4]
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f000 f82c 	bl	8002bca <_ZNKSt11_Deque_baseIfSaIfEE20_M_get_map_allocatorEv>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 8002b72:	f107 030c 	add.w	r3, r7, #12
 8002b76:	6839      	ldr	r1, [r7, #0]
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f000 fb7b 	bl	8003274 <_ZNSt16allocator_traitsISaIPfEE8allocateERS1_j>
 8002b7e:	4604      	mov	r4, r0
 8002b80:	bf00      	nop
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8002b82:	f107 030c 	add.w	r3, r7, #12
 8002b86:	4618      	mov	r0, r3
 8002b88:	f000 f830 	bl	8002bec <_ZNSaIPfED1Ev>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 8002b8c:	4623      	mov	r3, r4
      }
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3714      	adds	r7, #20
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd90      	pop	{r4, r7, pc}

08002b96 <_ZNSt11_Deque_baseIfSaIfEE15_M_create_nodesEPPfS3_>:
    _Deque_base<_Tp, _Alloc>::
 8002b96:	b580      	push	{r7, lr}
 8002b98:	b086      	sub	sp, #24
 8002b9a:	af00      	add	r7, sp, #0
 8002b9c:	60f8      	str	r0, [r7, #12]
 8002b9e:	60b9      	str	r1, [r7, #8]
 8002ba0:	607a      	str	r2, [r7, #4]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	617b      	str	r3, [r7, #20]
 8002ba6:	697a      	ldr	r2, [r7, #20]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	429a      	cmp	r2, r3
 8002bac:	d209      	bcs.n	8002bc2 <_ZNSt11_Deque_baseIfSaIfEE15_M_create_nodesEPPfS3_+0x2c>
	    *__cur = this->_M_allocate_node();
 8002bae:	68f8      	ldr	r0, [r7, #12]
 8002bb0:	f7ff fe91 	bl	80028d6 <_ZNSt11_Deque_baseIfSaIfEE16_M_allocate_nodeEv>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	601a      	str	r2, [r3, #0]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	3304      	adds	r3, #4
 8002bbe:	617b      	str	r3, [r7, #20]
 8002bc0:	e7f1      	b.n	8002ba6 <_ZNSt11_Deque_baseIfSaIfEE15_M_create_nodesEPPfS3_+0x10>
    }
 8002bc2:	bf00      	nop
 8002bc4:	3718      	adds	r7, #24
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}

08002bca <_ZNKSt11_Deque_baseIfSaIfEE20_M_get_map_allocatorEv>:
      _M_get_map_allocator() const _GLIBCXX_NOEXCEPT
 8002bca:	b580      	push	{r7, lr}
 8002bcc:	b082      	sub	sp, #8
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	6078      	str	r0, [r7, #4]
 8002bd2:	6039      	str	r1, [r7, #0]
      { return _Map_alloc_type(_M_get_Tp_allocator()); }
 8002bd4:	6838      	ldr	r0, [r7, #0]
 8002bd6:	f000 f93a 	bl	8002e4e <_ZNKSt11_Deque_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	4619      	mov	r1, r3
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f000 fb57 	bl	8003292 <_ZNSaIPfEC1IfEERKSaIT_E>
 8002be4:	6878      	ldr	r0, [r7, #4]
 8002be6:	3708      	adds	r7, #8
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}

08002bec <_ZNSaIPfED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b082      	sub	sp, #8
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
 8002bf4:	6878      	ldr	r0, [r7, #4]
 8002bf6:	f000 fb59 	bl	80032ac <_ZN9__gnu_cxx13new_allocatorIPfED1Ev>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	3708      	adds	r7, #8
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}

08002c04 <_ZNSt16allocator_traitsISaIPfEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b084      	sub	sp, #16
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	60f8      	str	r0, [r7, #12]
 8002c0c:	60b9      	str	r1, [r7, #8]
 8002c0e:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8002c10:	687a      	ldr	r2, [r7, #4]
 8002c12:	68b9      	ldr	r1, [r7, #8]
 8002c14:	68f8      	ldr	r0, [r7, #12]
 8002c16:	f000 fb54 	bl	80032c2 <_ZN9__gnu_cxx13new_allocatorIPfE10deallocateEPS1_j>
 8002c1a:	bf00      	nop
 8002c1c:	3710      	adds	r7, #16
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}

08002c22 <_ZSt18uninitialized_fillIPffEvT_S1_RKT0_>:
    uninitialized_fill(_ForwardIterator __first, _ForwardIterator __last,
 8002c22:	b580      	push	{r7, lr}
 8002c24:	b086      	sub	sp, #24
 8002c26:	af00      	add	r7, sp, #0
 8002c28:	60f8      	str	r0, [r7, #12]
 8002c2a:	60b9      	str	r1, [r7, #8]
 8002c2c:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_copy_assignable<_ValueType>::value;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	75fb      	strb	r3, [r7, #23]
	__uninit_fill(__first, __last, __x);
 8002c32:	687a      	ldr	r2, [r7, #4]
 8002c34:	68b9      	ldr	r1, [r7, #8]
 8002c36:	68f8      	ldr	r0, [r7, #12]
 8002c38:	f000 fb53 	bl	80032e2 <_ZNSt20__uninitialized_fillILb1EE13__uninit_fillIPffEEvT_S3_RKT0_>
    }
 8002c3c:	bf00      	nop
 8002c3e:	3718      	adds	r7, #24
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}

08002c44 <_ZNSt15_Deque_iteratorIfRfPfE14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 8002c44:	b580      	push	{r7, lr}
 8002c46:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 8002c48:	2004      	movs	r0, #4
 8002c4a:	f7fe f9fd 	bl	8001048 <_ZSt16__deque_buf_sizej>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	4618      	mov	r0, r3
 8002c52:	bd80      	pop	{r7, pc}

08002c54 <_ZN9__gnu_cxx13new_allocatorItEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8002c54:	b480      	push	{r7}
 8002c56:	b083      	sub	sp, #12
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	4618      	mov	r0, r3
 8002c60:	370c      	adds	r7, #12
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr

08002c6a <_ZNSt15_Deque_iteratorItRtPtEC1Ev>:
      _Deque_iterator() _GLIBCXX_NOEXCEPT
 8002c6a:	b480      	push	{r7}
 8002c6c:	b083      	sub	sp, #12
 8002c6e:	af00      	add	r7, sp, #0
 8002c70:	6078      	str	r0, [r7, #4]
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2200      	movs	r2, #0
 8002c76:	601a      	str	r2, [r3, #0]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	605a      	str	r2, [r3, #4]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2200      	movs	r2, #0
 8002c82:	609a      	str	r2, [r3, #8]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2200      	movs	r2, #0
 8002c88:	60da      	str	r2, [r3, #12]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	370c      	adds	r7, #12
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr

08002c98 <_ZNSt16allocator_traitsISaIPtEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b082      	sub	sp, #8
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
 8002ca0:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	6839      	ldr	r1, [r7, #0]
 8002ca6:	6878      	ldr	r0, [r7, #4]
 8002ca8:	f000 fb2a 	bl	8003300 <_ZN9__gnu_cxx13new_allocatorIPtE8allocateEjPKv>
 8002cac:	4603      	mov	r3, r0
 8002cae:	4618      	mov	r0, r3
 8002cb0:	3708      	adds	r7, #8
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}

08002cb6 <_ZNSt16allocator_traitsISaItEE10deallocateERS0_Ptj>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8002cb6:	b580      	push	{r7, lr}
 8002cb8:	b084      	sub	sp, #16
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	60f8      	str	r0, [r7, #12]
 8002cbe:	60b9      	str	r1, [r7, #8]
 8002cc0:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	68b9      	ldr	r1, [r7, #8]
 8002cc6:	68f8      	ldr	r0, [r7, #12]
 8002cc8:	f000 fb38 	bl	800333c <_ZN9__gnu_cxx13new_allocatorItE10deallocateEPtj>
 8002ccc:	bf00      	nop
 8002cce:	3710      	adds	r7, #16
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}

08002cd4 <_ZNKSt11_Deque_baseItSaItEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8002cd4:	b480      	push	{r7}
 8002cd6:	b083      	sub	sp, #12
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	4618      	mov	r0, r3
 8002ce0:	370c      	adds	r7, #12
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr

08002cea <_ZNSaIPtEC1ItEERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 8002cea:	b580      	push	{r7, lr}
 8002cec:	b082      	sub	sp, #8
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	6078      	str	r0, [r7, #4]
 8002cf2:	6039      	str	r1, [r7, #0]
 8002cf4:	6878      	ldr	r0, [r7, #4]
 8002cf6:	f000 fb31 	bl	800335c <_ZN9__gnu_cxx13new_allocatorIPtEC1Ev>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	3708      	adds	r7, #8
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}

08002d04 <_ZN9__gnu_cxx13new_allocatorIPtED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8002d04:	b480      	push	{r7}
 8002d06:	b083      	sub	sp, #12
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	4618      	mov	r0, r3
 8002d10:	370c      	adds	r7, #12
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr

08002d1a <_ZN9__gnu_cxx13new_allocatorIPtE10deallocateEPS1_j>:
      deallocate(_Tp* __p, size_type __t)
 8002d1a:	b580      	push	{r7, lr}
 8002d1c:	b084      	sub	sp, #16
 8002d1e:	af00      	add	r7, sp, #0
 8002d20:	60f8      	str	r0, [r7, #12]
 8002d22:	60b9      	str	r1, [r7, #8]
 8002d24:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	009b      	lsls	r3, r3, #2
 8002d2a:	4619      	mov	r1, r3
 8002d2c:	68b8      	ldr	r0, [r7, #8]
 8002d2e:	f003 fb61 	bl	80063f4 <_ZdlPvj>
      }
 8002d32:	bf00      	nop
 8002d34:	3710      	adds	r7, #16
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}

08002d3a <_ZNSt15_Deque_iteratorIfRfPfEpLEi>:
      operator+=(difference_type __n) _GLIBCXX_NOEXCEPT
 8002d3a:	b590      	push	{r4, r7, lr}
 8002d3c:	b085      	sub	sp, #20
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	6078      	str	r0, [r7, #4]
 8002d42:	6039      	str	r1, [r7, #0]
	const difference_type __offset = __n + (_M_cur - _M_first);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	1ad3      	subs	r3, r2, r3
 8002d4e:	109b      	asrs	r3, r3, #2
 8002d50:	461a      	mov	r2, r3
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	4413      	add	r3, r2
 8002d56:	60fb      	str	r3, [r7, #12]
	if (__offset >= 0 && __offset < difference_type(_S_buffer_size()))
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	db08      	blt.n	8002d70 <_ZNSt15_Deque_iteratorIfRfPfEpLEi+0x36>
 8002d5e:	f7ff ff71 	bl	8002c44 <_ZNSt15_Deque_iteratorIfRfPfE14_S_buffer_sizeEv>
 8002d62:	4603      	mov	r3, r0
 8002d64:	461a      	mov	r2, r3
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	da01      	bge.n	8002d70 <_ZNSt15_Deque_iteratorIfRfPfEpLEi+0x36>
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e000      	b.n	8002d72 <_ZNSt15_Deque_iteratorIfRfPfEpLEi+0x38>
 8002d70:	2300      	movs	r3, #0
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d007      	beq.n	8002d86 <_ZNSt15_Deque_iteratorIfRfPfEpLEi+0x4c>
	  _M_cur += __n;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	009b      	lsls	r3, r3, #2
 8002d7e:	441a      	add	r2, r3
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	601a      	str	r2, [r3, #0]
 8002d84:	e02b      	b.n	8002dde <_ZNSt15_Deque_iteratorIfRfPfEpLEi+0xa4>
	      __offset > 0 ? __offset / difference_type(_S_buffer_size())
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	dd07      	ble.n	8002d9c <_ZNSt15_Deque_iteratorIfRfPfEpLEi+0x62>
 8002d8c:	f7ff ff5a 	bl	8002c44 <_ZNSt15_Deque_iteratorIfRfPfE14_S_buffer_sizeEv>
 8002d90:	4603      	mov	r3, r0
 8002d92:	461a      	mov	r2, r3
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	fb93 f3f2 	sdiv	r3, r3, r2
 8002d9a:	e007      	b.n	8002dac <_ZNSt15_Deque_iteratorIfRfPfEpLEi+0x72>
			   : -difference_type((-__offset - 1)
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	43dc      	mvns	r4, r3
					      / _S_buffer_size()) - 1;
 8002da0:	f7ff ff50 	bl	8002c44 <_ZNSt15_Deque_iteratorIfRfPfE14_S_buffer_sizeEv>
 8002da4:	4603      	mov	r3, r0
 8002da6:	fbb4 f3f3 	udiv	r3, r4, r3
	      __offset > 0 ? __offset / difference_type(_S_buffer_size())
 8002daa:	43db      	mvns	r3, r3
	    const difference_type __node_offset =
 8002dac:	60bb      	str	r3, [r7, #8]
	    _M_set_node(_M_node + __node_offset);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	68da      	ldr	r2, [r3, #12]
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	009b      	lsls	r3, r3, #2
 8002db6:	4413      	add	r3, r2
 8002db8:	4619      	mov	r1, r3
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f7ff fd13 	bl	80027e6 <_ZNSt15_Deque_iteratorIfRfPfE11_M_set_nodeEPS1_>
	    _M_cur = _M_first + (__offset - __node_offset
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	685c      	ldr	r4, [r3, #4]
				 * difference_type(_S_buffer_size()));
 8002dc4:	f7ff ff3e 	bl	8002c44 <_ZNSt15_Deque_iteratorIfRfPfE14_S_buffer_sizeEv>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	461a      	mov	r2, r3
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	fb02 f303 	mul.w	r3, r2, r3
	    _M_cur = _M_first + (__offset - __node_offset
 8002dd2:	68fa      	ldr	r2, [r7, #12]
 8002dd4:	1ad3      	subs	r3, r2, r3
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	18e2      	adds	r2, r4, r3
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	601a      	str	r2, [r3, #0]
	return *this;
 8002dde:	687b      	ldr	r3, [r7, #4]
      }
 8002de0:	4618      	mov	r0, r3
 8002de2:	3714      	adds	r7, #20
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd90      	pop	{r4, r7, pc}

08002de8 <_ZNSt16allocator_traitsISaIfEE10deallocateERS0_Pfj>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b084      	sub	sp, #16
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	60f8      	str	r0, [r7, #12]
 8002df0:	60b9      	str	r1, [r7, #8]
 8002df2:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8002df4:	687a      	ldr	r2, [r7, #4]
 8002df6:	68b9      	ldr	r1, [r7, #8]
 8002df8:	68f8      	ldr	r0, [r7, #12]
 8002dfa:	f000 faba 	bl	8003372 <_ZN9__gnu_cxx13new_allocatorIfE10deallocateEPfj>
 8002dfe:	bf00      	nop
 8002e00:	3710      	adds	r7, #16
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}

08002e06 <_ZStmiRKSt15_Deque_iteratorIfRfPfES4_>:
      operator-(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8002e06:	b580      	push	{r7, lr}
 8002e08:	b082      	sub	sp, #8
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	6078      	str	r0, [r7, #4]
 8002e0e:	6039      	str	r1, [r7, #0]
	return difference_type(_S_buffer_size())
 8002e10:	f7ff ff18 	bl	8002c44 <_ZNSt15_Deque_iteratorIfRfPfE14_S_buffer_sizeEv>
 8002e14:	4603      	mov	r3, r0
 8002e16:	4619      	mov	r1, r3
	  * (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	68da      	ldr	r2, [r3, #12]
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	1ad3      	subs	r3, r2, r3
 8002e22:	109b      	asrs	r3, r3, #2
 8002e24:	3b01      	subs	r3, #1
 8002e26:	fb01 f303 	mul.w	r3, r1, r3
 8002e2a:	687a      	ldr	r2, [r7, #4]
 8002e2c:	6811      	ldr	r1, [r2, #0]
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	6852      	ldr	r2, [r2, #4]
 8002e32:	1a8a      	subs	r2, r1, r2
 8002e34:	1092      	asrs	r2, r2, #2
 8002e36:	4413      	add	r3, r2
	  + (__y._M_last - __y._M_cur);
 8002e38:	683a      	ldr	r2, [r7, #0]
 8002e3a:	6891      	ldr	r1, [r2, #8]
 8002e3c:	683a      	ldr	r2, [r7, #0]
 8002e3e:	6812      	ldr	r2, [r2, #0]
 8002e40:	1a8a      	subs	r2, r1, r2
 8002e42:	1092      	asrs	r2, r2, #2
 8002e44:	4413      	add	r3, r2
      }
 8002e46:	4618      	mov	r0, r3
 8002e48:	3708      	adds	r7, #8
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}

08002e4e <_ZNKSt11_Deque_baseIfSaIfEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8002e4e:	b480      	push	{r7}
 8002e50:	b083      	sub	sp, #12
 8002e52:	af00      	add	r7, sp, #0
 8002e54:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	4618      	mov	r0, r3
 8002e5a:	370c      	adds	r7, #12
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr

08002e64 <_ZNSt5dequeIfSaIfEE17_M_reallocate_mapEjb>:
	}
    }

  template <typename _Tp, typename _Alloc>
    void
    deque<_Tp, _Alloc>::
 8002e64:	b590      	push	{r4, r7, lr}
 8002e66:	b08b      	sub	sp, #44	; 0x2c
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	60f8      	str	r0, [r7, #12]
 8002e6c:	60b9      	str	r1, [r7, #8]
 8002e6e:	4613      	mov	r3, r2
 8002e70:	71fb      	strb	r3, [r7, #7]
    _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front)
    {
      const size_type __old_num_nodes
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	695b      	ldr	r3, [r3, #20]
 8002e7a:	1ad3      	subs	r3, r2, r3
 8002e7c:	109b      	asrs	r3, r3, #2
 8002e7e:	3301      	adds	r3, #1
      const size_type __old_num_nodes
 8002e80:	623b      	str	r3, [r7, #32]
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	6a3a      	ldr	r2, [r7, #32]
 8002e86:	4413      	add	r3, r2
 8002e88:	61fb      	str	r3, [r7, #28]

      _Map_pointer __new_nstart;
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	685a      	ldr	r2, [r3, #4]
 8002e8e:	69fb      	ldr	r3, [r7, #28]
 8002e90:	005b      	lsls	r3, r3, #1
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d92d      	bls.n	8002ef2 <_ZNSt5dequeIfSaIfEE17_M_reallocate_mapEjb+0x8e>
	{
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	6859      	ldr	r1, [r3, #4]
					 - __new_num_nodes) / 2
 8002e9e:	69fb      	ldr	r3, [r7, #28]
 8002ea0:	1acb      	subs	r3, r1, r3
 8002ea2:	085b      	lsrs	r3, r3, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8002ea4:	0099      	lsls	r1, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 8002ea6:	79fb      	ldrb	r3, [r7, #7]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d002      	beq.n	8002eb2 <_ZNSt5dequeIfSaIfEE17_M_reallocate_mapEjb+0x4e>
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	e000      	b.n	8002eb4 <_ZNSt5dequeIfSaIfEE17_M_reallocate_mapEjb+0x50>
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	440b      	add	r3, r1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8002eb6:	4413      	add	r3, r2
 8002eb8:	627b      	str	r3, [r7, #36]	; 0x24
	  if (__new_nstart < this->_M_impl._M_start._M_node)
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	695b      	ldr	r3, [r3, #20]
 8002ebe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	d209      	bcs.n	8002ed8 <_ZNSt5dequeIfSaIfEE17_M_reallocate_mapEjb+0x74>
	    std::copy(this->_M_impl._M_start._M_node,
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	6958      	ldr	r0, [r3, #20]
		      this->_M_impl._M_finish._M_node + 1,
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy(this->_M_impl._M_start._M_node,
 8002ecc:	3304      	adds	r3, #4
 8002ece:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ed0:	4619      	mov	r1, r3
 8002ed2:	f000 fa5e 	bl	8003392 <_ZSt4copyIPPfS1_ET0_T_S3_S2_>
 8002ed6:	e048      	b.n	8002f6a <_ZNSt5dequeIfSaIfEE17_M_reallocate_mapEjb+0x106>
		      __new_nstart);
	  else
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	6958      	ldr	r0, [r3, #20]
			       this->_M_impl._M_finish._M_node + 1,
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8002ee0:	1d19      	adds	r1, r3, #4
			       __new_nstart + __old_num_nodes);
 8002ee2:	6a3b      	ldr	r3, [r7, #32]
 8002ee4:	009b      	lsls	r3, r3, #2
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8002ee6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ee8:	4413      	add	r3, r2
 8002eea:	461a      	mov	r2, r3
 8002eec:	f000 fa69 	bl	80033c2 <_ZSt13copy_backwardIPPfS1_ET0_T_S3_S2_>
 8002ef0:	e03b      	b.n	8002f6a <_ZNSt5dequeIfSaIfEE17_M_reallocate_mapEjb+0x106>
	}
      else
	{
	  size_type __new_map_size = this->_M_impl._M_map_size
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	685c      	ldr	r4, [r3, #4]
				     + std::max(this->_M_impl._M_map_size,
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	3304      	adds	r3, #4
 8002efa:	f107 0208 	add.w	r2, r7, #8
 8002efe:	4611      	mov	r1, r2
 8002f00:	4618      	mov	r0, r3
 8002f02:	f7ff fb90 	bl	8002626 <_ZSt3maxIjERKT_S2_S2_>
 8002f06:	4603      	mov	r3, r0
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4423      	add	r3, r4
	  size_type __new_map_size = this->_M_impl._M_map_size
 8002f0c:	3302      	adds	r3, #2
 8002f0e:	61bb      	str	r3, [r7, #24]
						__nodes_to_add) + 2;

	  _Map_pointer __new_map = this->_M_allocate_map(__new_map_size);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	69b9      	ldr	r1, [r7, #24]
 8002f14:	4618      	mov	r0, r3
 8002f16:	f7ff fe21 	bl	8002b5c <_ZNSt11_Deque_baseIfSaIfEE15_M_allocate_mapEj>
 8002f1a:	6178      	str	r0, [r7, #20]
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 8002f1c:	69ba      	ldr	r2, [r7, #24]
 8002f1e:	69fb      	ldr	r3, [r7, #28]
 8002f20:	1ad3      	subs	r3, r2, r3
 8002f22:	085b      	lsrs	r3, r3, #1
 8002f24:	009a      	lsls	r2, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 8002f26:	79fb      	ldrb	r3, [r7, #7]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d002      	beq.n	8002f32 <_ZNSt5dequeIfSaIfEE17_M_reallocate_mapEjb+0xce>
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	e000      	b.n	8002f34 <_ZNSt5dequeIfSaIfEE17_M_reallocate_mapEjb+0xd0>
 8002f32:	2300      	movs	r3, #0
 8002f34:	4413      	add	r3, r2
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 8002f36:	697a      	ldr	r2, [r7, #20]
 8002f38:	4413      	add	r3, r2
 8002f3a:	627b      	str	r3, [r7, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	6958      	ldr	r0, [r3, #20]
		    this->_M_impl._M_finish._M_node + 1,
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 8002f44:	3304      	adds	r3, #4
 8002f46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f48:	4619      	mov	r1, r3
 8002f4a:	f000 fa22 	bl	8003392 <_ZSt4copyIPPfS1_ET0_T_S3_S2_>
		    __new_nstart);
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 8002f4e:	68f8      	ldr	r0, [r7, #12]
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	6819      	ldr	r1, [r3, #0]
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	461a      	mov	r2, r3
 8002f5a:	f7ff fb00 	bl	800255e <_ZNSt11_Deque_baseIfSaIfEE17_M_deallocate_mapEPPfj>

	  this->_M_impl._M_map = __new_map;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	697a      	ldr	r2, [r7, #20]
 8002f62:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_map_size = __new_map_size;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	69ba      	ldr	r2, [r7, #24]
 8002f68:	605a      	str	r2, [r3, #4]
	}

      this->_M_impl._M_start._M_set_node(__new_nstart);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	3308      	adds	r3, #8
 8002f6e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f70:	4618      	mov	r0, r3
 8002f72:	f7ff fc38 	bl	80027e6 <_ZNSt15_Deque_iteratorIfRfPfE11_M_set_nodeEPS1_>
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	f103 0018 	add.w	r0, r3, #24
 8002f7c:	6a3a      	ldr	r2, [r7, #32]
 8002f7e:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8002f82:	4413      	add	r3, r2
 8002f84:	009b      	lsls	r3, r3, #2
 8002f86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f88:	4413      	add	r3, r2
 8002f8a:	4619      	mov	r1, r3
 8002f8c:	f7ff fc2b 	bl	80027e6 <_ZNSt15_Deque_iteratorIfRfPfE11_M_set_nodeEPS1_>
    }
 8002f90:	bf00      	nop
 8002f92:	372c      	adds	r7, #44	; 0x2c
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd90      	pop	{r4, r7, pc}

08002f98 <_ZNSt16allocator_traitsISaIfEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b082      	sub	sp, #8
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
 8002fa0:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	6839      	ldr	r1, [r7, #0]
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f000 fa23 	bl	80033f2 <_ZN9__gnu_cxx13new_allocatorIfE8allocateEjPKv>
 8002fac:	4603      	mov	r3, r0
 8002fae:	4618      	mov	r0, r3
 8002fb0:	3708      	adds	r7, #8
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}

08002fb6 <_ZN9__gnu_cxx13new_allocatorIfE9constructIfJfEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8002fb6:	b590      	push	{r4, r7, lr}
 8002fb8:	b085      	sub	sp, #20
 8002fba:	af00      	add	r7, sp, #0
 8002fbc:	60f8      	str	r0, [r7, #12]
 8002fbe:	60b9      	str	r1, [r7, #8]
 8002fc0:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	f7ff fc99 	bl	80028fa <_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	681c      	ldr	r4, [r3, #0]
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	4619      	mov	r1, r3
 8002fd0:	2004      	movs	r0, #4
 8002fd2:	f7fe f81d 	bl	8001010 <_ZnwjPv>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	601c      	str	r4, [r3, #0]
 8002fda:	bf00      	nop
 8002fdc:	3714      	adds	r7, #20
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd90      	pop	{r4, r7, pc}

08002fe2 <_ZNSt5dequeItSaItEE11_S_max_sizeERKS0_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8002fe2:	b580      	push	{r7, lr}
 8002fe4:	b084      	sub	sp, #16
 8002fe6:	af00      	add	r7, sp, #0
 8002fe8:	6078      	str	r0, [r7, #4]
	const size_t __diffmax = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max;
 8002fea:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8002fee:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8002ff0:	6878      	ldr	r0, [r7, #4]
 8002ff2:	f000 fa1c 	bl	800342e <_ZNSt16allocator_traitsISaItEE8max_sizeERKS0_>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8002ffa:	f107 0208 	add.w	r2, r7, #8
 8002ffe:	f107 030c 	add.w	r3, r7, #12
 8003002:	4611      	mov	r1, r2
 8003004:	4618      	mov	r0, r3
 8003006:	f7ff fd6e 	bl	8002ae6 <_ZSt3minIjERKT_S2_S2_>
 800300a:	4603      	mov	r3, r0
 800300c:	681b      	ldr	r3, [r3, #0]
      }
 800300e:	4618      	mov	r0, r3
 8003010:	3710      	adds	r7, #16
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}

08003016 <_ZNSt5dequeItSaItEE17_M_reallocate_mapEjb>:
    deque<_Tp, _Alloc>::
 8003016:	b590      	push	{r4, r7, lr}
 8003018:	b08b      	sub	sp, #44	; 0x2c
 800301a:	af00      	add	r7, sp, #0
 800301c:	60f8      	str	r0, [r7, #12]
 800301e:	60b9      	str	r1, [r7, #8]
 8003020:	4613      	mov	r3, r2
 8003022:	71fb      	strb	r3, [r7, #7]
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	695b      	ldr	r3, [r3, #20]
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	109b      	asrs	r3, r3, #2
 8003030:	3301      	adds	r3, #1
      const size_type __old_num_nodes
 8003032:	623b      	str	r3, [r7, #32]
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	6a3a      	ldr	r2, [r7, #32]
 8003038:	4413      	add	r3, r2
 800303a:	61fb      	str	r3, [r7, #28]
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	685a      	ldr	r2, [r3, #4]
 8003040:	69fb      	ldr	r3, [r7, #28]
 8003042:	005b      	lsls	r3, r3, #1
 8003044:	429a      	cmp	r2, r3
 8003046:	d92d      	bls.n	80030a4 <_ZNSt5dequeItSaItEE17_M_reallocate_mapEjb+0x8e>
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	6859      	ldr	r1, [r3, #4]
					 - __new_num_nodes) / 2
 8003050:	69fb      	ldr	r3, [r7, #28]
 8003052:	1acb      	subs	r3, r1, r3
 8003054:	085b      	lsrs	r3, r3, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8003056:	0099      	lsls	r1, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 8003058:	79fb      	ldrb	r3, [r7, #7]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d002      	beq.n	8003064 <_ZNSt5dequeItSaItEE17_M_reallocate_mapEjb+0x4e>
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	009b      	lsls	r3, r3, #2
 8003062:	e000      	b.n	8003066 <_ZNSt5dequeItSaItEE17_M_reallocate_mapEjb+0x50>
 8003064:	2300      	movs	r3, #0
 8003066:	440b      	add	r3, r1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8003068:	4413      	add	r3, r2
 800306a:	627b      	str	r3, [r7, #36]	; 0x24
	  if (__new_nstart < this->_M_impl._M_start._M_node)
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	695b      	ldr	r3, [r3, #20]
 8003070:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003072:	429a      	cmp	r2, r3
 8003074:	d209      	bcs.n	800308a <_ZNSt5dequeItSaItEE17_M_reallocate_mapEjb+0x74>
	    std::copy(this->_M_impl._M_start._M_node,
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	6958      	ldr	r0, [r3, #20]
		      this->_M_impl._M_finish._M_node + 1,
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy(this->_M_impl._M_start._M_node,
 800307e:	3304      	adds	r3, #4
 8003080:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003082:	4619      	mov	r1, r3
 8003084:	f000 f9df 	bl	8003446 <_ZSt4copyIPPtS1_ET0_T_S3_S2_>
 8003088:	e048      	b.n	800311c <_ZNSt5dequeItSaItEE17_M_reallocate_mapEjb+0x106>
	    std::copy_backward(this->_M_impl._M_start._M_node,
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	6958      	ldr	r0, [r3, #20]
			       this->_M_impl._M_finish._M_node + 1,
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8003092:	1d19      	adds	r1, r3, #4
			       __new_nstart + __old_num_nodes);
 8003094:	6a3b      	ldr	r3, [r7, #32]
 8003096:	009b      	lsls	r3, r3, #2
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8003098:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800309a:	4413      	add	r3, r2
 800309c:	461a      	mov	r2, r3
 800309e:	f000 f9ea 	bl	8003476 <_ZSt13copy_backwardIPPtS1_ET0_T_S3_S2_>
 80030a2:	e03b      	b.n	800311c <_ZNSt5dequeItSaItEE17_M_reallocate_mapEjb+0x106>
	  size_type __new_map_size = this->_M_impl._M_map_size
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	685c      	ldr	r4, [r3, #4]
				     + std::max(this->_M_impl._M_map_size,
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	3304      	adds	r3, #4
 80030ac:	f107 0208 	add.w	r2, r7, #8
 80030b0:	4611      	mov	r1, r2
 80030b2:	4618      	mov	r0, r3
 80030b4:	f7ff fab7 	bl	8002626 <_ZSt3maxIjERKT_S2_S2_>
 80030b8:	4603      	mov	r3, r0
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4423      	add	r3, r4
	  size_type __new_map_size = this->_M_impl._M_map_size
 80030be:	3302      	adds	r3, #2
 80030c0:	61bb      	str	r3, [r7, #24]
	  _Map_pointer __new_map = this->_M_allocate_map(__new_map_size);
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	69b9      	ldr	r1, [r7, #24]
 80030c6:	4618      	mov	r0, r3
 80030c8:	f7ff fac1 	bl	800264e <_ZNSt11_Deque_baseItSaItEE15_M_allocate_mapEj>
 80030cc:	6178      	str	r0, [r7, #20]
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 80030ce:	69ba      	ldr	r2, [r7, #24]
 80030d0:	69fb      	ldr	r3, [r7, #28]
 80030d2:	1ad3      	subs	r3, r2, r3
 80030d4:	085b      	lsrs	r3, r3, #1
 80030d6:	009a      	lsls	r2, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 80030d8:	79fb      	ldrb	r3, [r7, #7]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d002      	beq.n	80030e4 <_ZNSt5dequeItSaItEE17_M_reallocate_mapEjb+0xce>
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	009b      	lsls	r3, r3, #2
 80030e2:	e000      	b.n	80030e6 <_ZNSt5dequeItSaItEE17_M_reallocate_mapEjb+0xd0>
 80030e4:	2300      	movs	r3, #0
 80030e6:	4413      	add	r3, r2
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 80030e8:	697a      	ldr	r2, [r7, #20]
 80030ea:	4413      	add	r3, r2
 80030ec:	627b      	str	r3, [r7, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	6958      	ldr	r0, [r3, #20]
		    this->_M_impl._M_finish._M_node + 1,
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 80030f6:	3304      	adds	r3, #4
 80030f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030fa:	4619      	mov	r1, r3
 80030fc:	f000 f9a3 	bl	8003446 <_ZSt4copyIPPtS1_ET0_T_S3_S2_>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 8003100:	68f8      	ldr	r0, [r7, #12]
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	6819      	ldr	r1, [r3, #0]
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	461a      	mov	r2, r3
 800310c:	f7fe ffa7 	bl	800205e <_ZNSt11_Deque_baseItSaItEE17_M_deallocate_mapEPPtj>
	  this->_M_impl._M_map = __new_map;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	697a      	ldr	r2, [r7, #20]
 8003114:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_map_size = __new_map_size;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	69ba      	ldr	r2, [r7, #24]
 800311a:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_start._M_set_node(__new_nstart);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	3308      	adds	r3, #8
 8003120:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003122:	4618      	mov	r0, r3
 8003124:	f7ff faca 	bl	80026bc <_ZNSt15_Deque_iteratorItRtPtE11_M_set_nodeEPS1_>
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	f103 0018 	add.w	r0, r3, #24
 800312e:	6a3a      	ldr	r2, [r7, #32]
 8003130:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8003134:	4413      	add	r3, r2
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800313a:	4413      	add	r3, r2
 800313c:	4619      	mov	r1, r3
 800313e:	f7ff fabd 	bl	80026bc <_ZNSt15_Deque_iteratorItRtPtE11_M_set_nodeEPS1_>
    }
 8003142:	bf00      	nop
 8003144:	372c      	adds	r7, #44	; 0x2c
 8003146:	46bd      	mov	sp, r7
 8003148:	bd90      	pop	{r4, r7, pc}

0800314a <_ZNSt16allocator_traitsISaItEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 800314a:	b580      	push	{r7, lr}
 800314c:	b082      	sub	sp, #8
 800314e:	af00      	add	r7, sp, #0
 8003150:	6078      	str	r0, [r7, #4]
 8003152:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8003154:	2200      	movs	r2, #0
 8003156:	6839      	ldr	r1, [r7, #0]
 8003158:	6878      	ldr	r0, [r7, #4]
 800315a:	f000 f9a4 	bl	80034a6 <_ZN9__gnu_cxx13new_allocatorItE8allocateEjPKv>
 800315e:	4603      	mov	r3, r0
 8003160:	4618      	mov	r0, r3
 8003162:	3708      	adds	r7, #8
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}

08003168 <_ZNSt15_Deque_iteratorItRtPtEpLEi>:
      operator+=(difference_type __n) _GLIBCXX_NOEXCEPT
 8003168:	b590      	push	{r4, r7, lr}
 800316a:	b085      	sub	sp, #20
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
 8003170:	6039      	str	r1, [r7, #0]
	const difference_type __offset = __n + (_M_cur - _M_first);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	1ad3      	subs	r3, r2, r3
 800317c:	105b      	asrs	r3, r3, #1
 800317e:	461a      	mov	r2, r3
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	4413      	add	r3, r2
 8003184:	60fb      	str	r3, [r7, #12]
	if (__offset >= 0 && __offset < difference_type(_S_buffer_size()))
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2b00      	cmp	r3, #0
 800318a:	db08      	blt.n	800319e <_ZNSt15_Deque_iteratorItRtPtEpLEi+0x36>
 800318c:	f7ff fc78 	bl	8002a80 <_ZNSt15_Deque_iteratorItRtPtE14_S_buffer_sizeEv>
 8003190:	4603      	mov	r3, r0
 8003192:	461a      	mov	r2, r3
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	4293      	cmp	r3, r2
 8003198:	da01      	bge.n	800319e <_ZNSt15_Deque_iteratorItRtPtEpLEi+0x36>
 800319a:	2301      	movs	r3, #1
 800319c:	e000      	b.n	80031a0 <_ZNSt15_Deque_iteratorItRtPtEpLEi+0x38>
 800319e:	2300      	movs	r3, #0
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d007      	beq.n	80031b4 <_ZNSt15_Deque_iteratorItRtPtEpLEi+0x4c>
	  _M_cur += __n;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	005b      	lsls	r3, r3, #1
 80031ac:	441a      	add	r2, r3
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	601a      	str	r2, [r3, #0]
 80031b2:	e02b      	b.n	800320c <_ZNSt15_Deque_iteratorItRtPtEpLEi+0xa4>
	      __offset > 0 ? __offset / difference_type(_S_buffer_size())
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	dd07      	ble.n	80031ca <_ZNSt15_Deque_iteratorItRtPtEpLEi+0x62>
 80031ba:	f7ff fc61 	bl	8002a80 <_ZNSt15_Deque_iteratorItRtPtE14_S_buffer_sizeEv>
 80031be:	4603      	mov	r3, r0
 80031c0:	461a      	mov	r2, r3
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	fb93 f3f2 	sdiv	r3, r3, r2
 80031c8:	e007      	b.n	80031da <_ZNSt15_Deque_iteratorItRtPtEpLEi+0x72>
			   : -difference_type((-__offset - 1)
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	43dc      	mvns	r4, r3
					      / _S_buffer_size()) - 1;
 80031ce:	f7ff fc57 	bl	8002a80 <_ZNSt15_Deque_iteratorItRtPtE14_S_buffer_sizeEv>
 80031d2:	4603      	mov	r3, r0
 80031d4:	fbb4 f3f3 	udiv	r3, r4, r3
	      __offset > 0 ? __offset / difference_type(_S_buffer_size())
 80031d8:	43db      	mvns	r3, r3
	    const difference_type __node_offset =
 80031da:	60bb      	str	r3, [r7, #8]
	    _M_set_node(_M_node + __node_offset);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	68da      	ldr	r2, [r3, #12]
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	4413      	add	r3, r2
 80031e6:	4619      	mov	r1, r3
 80031e8:	6878      	ldr	r0, [r7, #4]
 80031ea:	f7ff fa67 	bl	80026bc <_ZNSt15_Deque_iteratorItRtPtE11_M_set_nodeEPS1_>
	    _M_cur = _M_first + (__offset - __node_offset
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	685c      	ldr	r4, [r3, #4]
				 * difference_type(_S_buffer_size()));
 80031f2:	f7ff fc45 	bl	8002a80 <_ZNSt15_Deque_iteratorItRtPtE14_S_buffer_sizeEv>
 80031f6:	4603      	mov	r3, r0
 80031f8:	461a      	mov	r2, r3
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	fb02 f303 	mul.w	r3, r2, r3
	    _M_cur = _M_first + (__offset - __node_offset
 8003200:	68fa      	ldr	r2, [r7, #12]
 8003202:	1ad3      	subs	r3, r2, r3
 8003204:	005b      	lsls	r3, r3, #1
 8003206:	18e2      	adds	r2, r4, r3
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	601a      	str	r2, [r3, #0]
	return *this;
 800320c:	687b      	ldr	r3, [r7, #4]
      }
 800320e:	4618      	mov	r0, r3
 8003210:	3714      	adds	r7, #20
 8003212:	46bd      	mov	sp, r7
 8003214:	bd90      	pop	{r4, r7, pc}

08003216 <_ZNK9__gnu_cxx13new_allocatorIfE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8003216:	b580      	push	{r7, lr}
 8003218:	b082      	sub	sp, #8
 800321a:	af00      	add	r7, sp, #0
 800321c:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	f000 f95f 	bl	80034e2 <_ZNK9__gnu_cxx13new_allocatorIfE11_M_max_sizeEv>
 8003224:	4603      	mov	r3, r0
 8003226:	4618      	mov	r0, r3
 8003228:	3708      	adds	r7, #8
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}

0800322e <_ZN9__gnu_cxx13new_allocatorIfEC1ERKS1_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 800322e:	b480      	push	{r7}
 8003230:	b083      	sub	sp, #12
 8003232:	af00      	add	r7, sp, #0
 8003234:	6078      	str	r0, [r7, #4]
 8003236:	6039      	str	r1, [r7, #0]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	4618      	mov	r0, r3
 800323c:	370c      	adds	r7, #12
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr

08003246 <_ZNSt15_Deque_iteratorIfRfPfEC1Ev>:
      _Deque_iterator() _GLIBCXX_NOEXCEPT
 8003246:	b480      	push	{r7}
 8003248:	b083      	sub	sp, #12
 800324a:	af00      	add	r7, sp, #0
 800324c:	6078      	str	r0, [r7, #4]
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2200      	movs	r2, #0
 8003252:	601a      	str	r2, [r3, #0]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2200      	movs	r2, #0
 8003258:	605a      	str	r2, [r3, #4]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2200      	movs	r2, #0
 800325e:	609a      	str	r2, [r3, #8]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2200      	movs	r2, #0
 8003264:	60da      	str	r2, [r3, #12]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	4618      	mov	r0, r3
 800326a:	370c      	adds	r7, #12
 800326c:	46bd      	mov	sp, r7
 800326e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003272:	4770      	bx	lr

08003274 <_ZNSt16allocator_traitsISaIPfEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 8003274:	b580      	push	{r7, lr}
 8003276:	b082      	sub	sp, #8
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
 800327c:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800327e:	2200      	movs	r2, #0
 8003280:	6839      	ldr	r1, [r7, #0]
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	f000 f939 	bl	80034fa <_ZN9__gnu_cxx13new_allocatorIPfE8allocateEjPKv>
 8003288:	4603      	mov	r3, r0
 800328a:	4618      	mov	r0, r3
 800328c:	3708      	adds	r7, #8
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}

08003292 <_ZNSaIPfEC1IfEERKSaIT_E>:
 8003292:	b580      	push	{r7, lr}
 8003294:	b082      	sub	sp, #8
 8003296:	af00      	add	r7, sp, #0
 8003298:	6078      	str	r0, [r7, #4]
 800329a:	6039      	str	r1, [r7, #0]
 800329c:	6878      	ldr	r0, [r7, #4]
 800329e:	f000 f94a 	bl	8003536 <_ZN9__gnu_cxx13new_allocatorIPfEC1Ev>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	4618      	mov	r0, r3
 80032a6:	3708      	adds	r7, #8
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}

080032ac <_ZN9__gnu_cxx13new_allocatorIPfED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80032ac:	b480      	push	{r7}
 80032ae:	b083      	sub	sp, #12
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	4618      	mov	r0, r3
 80032b8:	370c      	adds	r7, #12
 80032ba:	46bd      	mov	sp, r7
 80032bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c0:	4770      	bx	lr

080032c2 <_ZN9__gnu_cxx13new_allocatorIPfE10deallocateEPS1_j>:
      deallocate(_Tp* __p, size_type __t)
 80032c2:	b580      	push	{r7, lr}
 80032c4:	b084      	sub	sp, #16
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	60f8      	str	r0, [r7, #12]
 80032ca:	60b9      	str	r1, [r7, #8]
 80032cc:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	009b      	lsls	r3, r3, #2
 80032d2:	4619      	mov	r1, r3
 80032d4:	68b8      	ldr	r0, [r7, #8]
 80032d6:	f003 f88d 	bl	80063f4 <_ZdlPvj>
      }
 80032da:	bf00      	nop
 80032dc:	3710      	adds	r7, #16
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}

080032e2 <_ZNSt20__uninitialized_fillILb1EE13__uninit_fillIPffEEvT_S3_RKT0_>:
        __uninit_fill(_ForwardIterator __first, _ForwardIterator __last,
 80032e2:	b580      	push	{r7, lr}
 80032e4:	b084      	sub	sp, #16
 80032e6:	af00      	add	r7, sp, #0
 80032e8:	60f8      	str	r0, [r7, #12]
 80032ea:	60b9      	str	r1, [r7, #8]
 80032ec:	607a      	str	r2, [r7, #4]
        { std::fill(__first, __last, __x); }
 80032ee:	687a      	ldr	r2, [r7, #4]
 80032f0:	68b9      	ldr	r1, [r7, #8]
 80032f2:	68f8      	ldr	r0, [r7, #12]
 80032f4:	f000 f92a 	bl	800354c <_ZSt4fillIPffEvT_S1_RKT0_>
 80032f8:	bf00      	nop
 80032fa:	3710      	adds	r7, #16
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}

08003300 <_ZN9__gnu_cxx13new_allocatorIPtE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8003300:	b580      	push	{r7, lr}
 8003302:	b084      	sub	sp, #16
 8003304:	af00      	add	r7, sp, #0
 8003306:	60f8      	str	r0, [r7, #12]
 8003308:	60b9      	str	r1, [r7, #8]
 800330a:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 800330c:	68f8      	ldr	r0, [r7, #12]
 800330e:	f000 f92c 	bl	800356a <_ZNK9__gnu_cxx13new_allocatorIPtE11_M_max_sizeEv>
 8003312:	4602      	mov	r2, r0
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	4293      	cmp	r3, r2
 8003318:	bf8c      	ite	hi
 800331a:	2301      	movhi	r3, #1
 800331c:	2300      	movls	r3, #0
 800331e:	b2db      	uxtb	r3, r3
 8003320:	2b00      	cmp	r3, #0
 8003322:	d001      	beq.n	8003328 <_ZN9__gnu_cxx13new_allocatorIPtE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8003324:	f003 f87b 	bl	800641e <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	4618      	mov	r0, r3
 800332e:	f003 f863 	bl	80063f8 <_Znwj>
 8003332:	4603      	mov	r3, r0
      }
 8003334:	4618      	mov	r0, r3
 8003336:	3710      	adds	r7, #16
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}

0800333c <_ZN9__gnu_cxx13new_allocatorItE10deallocateEPtj>:
      deallocate(_Tp* __p, size_type __t)
 800333c:	b580      	push	{r7, lr}
 800333e:	b084      	sub	sp, #16
 8003340:	af00      	add	r7, sp, #0
 8003342:	60f8      	str	r0, [r7, #12]
 8003344:	60b9      	str	r1, [r7, #8]
 8003346:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	005b      	lsls	r3, r3, #1
 800334c:	4619      	mov	r1, r3
 800334e:	68b8      	ldr	r0, [r7, #8]
 8003350:	f003 f850 	bl	80063f4 <_ZdlPvj>
      }
 8003354:	bf00      	nop
 8003356:	3710      	adds	r7, #16
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}

0800335c <_ZN9__gnu_cxx13new_allocatorIPtEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800335c:	b480      	push	{r7}
 800335e:	b083      	sub	sp, #12
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	4618      	mov	r0, r3
 8003368:	370c      	adds	r7, #12
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr

08003372 <_ZN9__gnu_cxx13new_allocatorIfE10deallocateEPfj>:
      deallocate(_Tp* __p, size_type __t)
 8003372:	b580      	push	{r7, lr}
 8003374:	b084      	sub	sp, #16
 8003376:	af00      	add	r7, sp, #0
 8003378:	60f8      	str	r0, [r7, #12]
 800337a:	60b9      	str	r1, [r7, #8]
 800337c:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	009b      	lsls	r3, r3, #2
 8003382:	4619      	mov	r1, r3
 8003384:	68b8      	ldr	r0, [r7, #8]
 8003386:	f003 f835 	bl	80063f4 <_ZdlPvj>
      }
 800338a:	bf00      	nop
 800338c:	3710      	adds	r7, #16
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}

08003392 <_ZSt4copyIPPfS1_ET0_T_S3_S2_>:
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 8003392:	b590      	push	{r4, r7, lr}
 8003394:	b085      	sub	sp, #20
 8003396:	af00      	add	r7, sp, #0
 8003398:	60f8      	str	r0, [r7, #12]
 800339a:	60b9      	str	r1, [r7, #8]
 800339c:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 800339e:	68f8      	ldr	r0, [r7, #12]
 80033a0:	f000 f8ef 	bl	8003582 <_ZSt12__miter_baseIPPfET_S2_>
 80033a4:	4604      	mov	r4, r0
 80033a6:	68b8      	ldr	r0, [r7, #8]
 80033a8:	f000 f8eb 	bl	8003582 <_ZSt12__miter_baseIPPfET_S2_>
 80033ac:	4603      	mov	r3, r0
 80033ae:	687a      	ldr	r2, [r7, #4]
 80033b0:	4619      	mov	r1, r3
 80033b2:	4620      	mov	r0, r4
 80033b4:	f000 f8f0 	bl	8003598 <_ZSt13__copy_move_aILb0EPPfS1_ET1_T0_S3_S2_>
 80033b8:	4603      	mov	r3, r0
    }
 80033ba:	4618      	mov	r0, r3
 80033bc:	3714      	adds	r7, #20
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd90      	pop	{r4, r7, pc}

080033c2 <_ZSt13copy_backwardIPPfS1_ET0_T_S3_S2_>:
   *  that the start of the output range may overlap [first,last).
  */
  template<typename _BI1, typename _BI2>
    _GLIBCXX20_CONSTEXPR
    inline _BI2
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 80033c2:	b590      	push	{r4, r7, lr}
 80033c4:	b085      	sub	sp, #20
 80033c6:	af00      	add	r7, sp, #0
 80033c8:	60f8      	str	r0, [r7, #12]
 80033ca:	60b9      	str	r1, [r7, #8]
 80033cc:	607a      	str	r2, [r7, #4]
	    typename iterator_traits<_BI1>::value_type,
	    typename iterator_traits<_BI2>::value_type>)
      __glibcxx_requires_can_decrement_range(__first, __last, __result);

      return std::__copy_move_backward_a<__is_move_iterator<_BI1>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 80033ce:	68f8      	ldr	r0, [r7, #12]
 80033d0:	f000 f8d7 	bl	8003582 <_ZSt12__miter_baseIPPfET_S2_>
 80033d4:	4604      	mov	r4, r0
 80033d6:	68b8      	ldr	r0, [r7, #8]
 80033d8:	f000 f8d3 	bl	8003582 <_ZSt12__miter_baseIPPfET_S2_>
 80033dc:	4603      	mov	r3, r0
 80033de:	687a      	ldr	r2, [r7, #4]
 80033e0:	4619      	mov	r1, r3
 80033e2:	4620      	mov	r0, r4
 80033e4:	f000 f8fb 	bl	80035de <_ZSt22__copy_move_backward_aILb0EPPfS1_ET1_T0_S3_S2_>
 80033e8:	4603      	mov	r3, r0
    }
 80033ea:	4618      	mov	r0, r3
 80033ec:	3714      	adds	r7, #20
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd90      	pop	{r4, r7, pc}

080033f2 <_ZN9__gnu_cxx13new_allocatorIfE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80033f2:	b580      	push	{r7, lr}
 80033f4:	b084      	sub	sp, #16
 80033f6:	af00      	add	r7, sp, #0
 80033f8:	60f8      	str	r0, [r7, #12]
 80033fa:	60b9      	str	r1, [r7, #8]
 80033fc:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 80033fe:	68f8      	ldr	r0, [r7, #12]
 8003400:	f000 f86f 	bl	80034e2 <_ZNK9__gnu_cxx13new_allocatorIfE11_M_max_sizeEv>
 8003404:	4602      	mov	r2, r0
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	4293      	cmp	r3, r2
 800340a:	bf8c      	ite	hi
 800340c:	2301      	movhi	r3, #1
 800340e:	2300      	movls	r3, #0
 8003410:	b2db      	uxtb	r3, r3
 8003412:	2b00      	cmp	r3, #0
 8003414:	d001      	beq.n	800341a <_ZN9__gnu_cxx13new_allocatorIfE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8003416:	f003 f802 	bl	800641e <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	009b      	lsls	r3, r3, #2
 800341e:	4618      	mov	r0, r3
 8003420:	f002 ffea 	bl	80063f8 <_Znwj>
 8003424:	4603      	mov	r3, r0
      }
 8003426:	4618      	mov	r0, r3
 8003428:	3710      	adds	r7, #16
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}

0800342e <_ZNSt16allocator_traitsISaItEE8max_sizeERKS0_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 800342e:	b580      	push	{r7, lr}
 8003430:	b082      	sub	sp, #8
 8003432:	af00      	add	r7, sp, #0
 8003434:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f000 f8f4 	bl	8003624 <_ZNK9__gnu_cxx13new_allocatorItE8max_sizeEv>
 800343c:	4603      	mov	r3, r0
      }
 800343e:	4618      	mov	r0, r3
 8003440:	3708      	adds	r7, #8
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}

08003446 <_ZSt4copyIPPtS1_ET0_T_S3_S2_>:
    copy(_II __first, _II __last, _OI __result)
 8003446:	b590      	push	{r4, r7, lr}
 8003448:	b085      	sub	sp, #20
 800344a:	af00      	add	r7, sp, #0
 800344c:	60f8      	str	r0, [r7, #12]
 800344e:	60b9      	str	r1, [r7, #8]
 8003450:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8003452:	68f8      	ldr	r0, [r7, #12]
 8003454:	f000 f8f2 	bl	800363c <_ZSt12__miter_baseIPPtET_S2_>
 8003458:	4604      	mov	r4, r0
 800345a:	68b8      	ldr	r0, [r7, #8]
 800345c:	f000 f8ee 	bl	800363c <_ZSt12__miter_baseIPPtET_S2_>
 8003460:	4603      	mov	r3, r0
 8003462:	687a      	ldr	r2, [r7, #4]
 8003464:	4619      	mov	r1, r3
 8003466:	4620      	mov	r0, r4
 8003468:	f000 f8f3 	bl	8003652 <_ZSt13__copy_move_aILb0EPPtS1_ET1_T0_S3_S2_>
 800346c:	4603      	mov	r3, r0
    }
 800346e:	4618      	mov	r0, r3
 8003470:	3714      	adds	r7, #20
 8003472:	46bd      	mov	sp, r7
 8003474:	bd90      	pop	{r4, r7, pc}

08003476 <_ZSt13copy_backwardIPPtS1_ET0_T_S3_S2_>:
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 8003476:	b590      	push	{r4, r7, lr}
 8003478:	b085      	sub	sp, #20
 800347a:	af00      	add	r7, sp, #0
 800347c:	60f8      	str	r0, [r7, #12]
 800347e:	60b9      	str	r1, [r7, #8]
 8003480:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8003482:	68f8      	ldr	r0, [r7, #12]
 8003484:	f000 f8da 	bl	800363c <_ZSt12__miter_baseIPPtET_S2_>
 8003488:	4604      	mov	r4, r0
 800348a:	68b8      	ldr	r0, [r7, #8]
 800348c:	f000 f8d6 	bl	800363c <_ZSt12__miter_baseIPPtET_S2_>
 8003490:	4603      	mov	r3, r0
 8003492:	687a      	ldr	r2, [r7, #4]
 8003494:	4619      	mov	r1, r3
 8003496:	4620      	mov	r0, r4
 8003498:	f000 f8fe 	bl	8003698 <_ZSt22__copy_move_backward_aILb0EPPtS1_ET1_T0_S3_S2_>
 800349c:	4603      	mov	r3, r0
    }
 800349e:	4618      	mov	r0, r3
 80034a0:	3714      	adds	r7, #20
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd90      	pop	{r4, r7, pc}

080034a6 <_ZN9__gnu_cxx13new_allocatorItE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80034a6:	b580      	push	{r7, lr}
 80034a8:	b084      	sub	sp, #16
 80034aa:	af00      	add	r7, sp, #0
 80034ac:	60f8      	str	r0, [r7, #12]
 80034ae:	60b9      	str	r1, [r7, #8]
 80034b0:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 80034b2:	68f8      	ldr	r0, [r7, #12]
 80034b4:	f000 f913 	bl	80036de <_ZNK9__gnu_cxx13new_allocatorItE11_M_max_sizeEv>
 80034b8:	4602      	mov	r2, r0
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	4293      	cmp	r3, r2
 80034be:	bf8c      	ite	hi
 80034c0:	2301      	movhi	r3, #1
 80034c2:	2300      	movls	r3, #0
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d001      	beq.n	80034ce <_ZN9__gnu_cxx13new_allocatorItE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80034ca:	f002 ffa8 	bl	800641e <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	005b      	lsls	r3, r3, #1
 80034d2:	4618      	mov	r0, r3
 80034d4:	f002 ff90 	bl	80063f8 <_Znwj>
 80034d8:	4603      	mov	r3, r0
      }
 80034da:	4618      	mov	r0, r3
 80034dc:	3710      	adds	r7, #16
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}

080034e2 <_ZNK9__gnu_cxx13new_allocatorIfE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 80034e2:	b480      	push	{r7}
 80034e4:	b083      	sub	sp, #12
 80034e6:	af00      	add	r7, sp, #0
 80034e8:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80034ea:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 80034ee:	4618      	mov	r0, r3
 80034f0:	370c      	adds	r7, #12
 80034f2:	46bd      	mov	sp, r7
 80034f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f8:	4770      	bx	lr

080034fa <_ZN9__gnu_cxx13new_allocatorIPfE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80034fa:	b580      	push	{r7, lr}
 80034fc:	b084      	sub	sp, #16
 80034fe:	af00      	add	r7, sp, #0
 8003500:	60f8      	str	r0, [r7, #12]
 8003502:	60b9      	str	r1, [r7, #8]
 8003504:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8003506:	68f8      	ldr	r0, [r7, #12]
 8003508:	f000 f8f5 	bl	80036f6 <_ZNK9__gnu_cxx13new_allocatorIPfE11_M_max_sizeEv>
 800350c:	4602      	mov	r2, r0
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	4293      	cmp	r3, r2
 8003512:	bf8c      	ite	hi
 8003514:	2301      	movhi	r3, #1
 8003516:	2300      	movls	r3, #0
 8003518:	b2db      	uxtb	r3, r3
 800351a:	2b00      	cmp	r3, #0
 800351c:	d001      	beq.n	8003522 <_ZN9__gnu_cxx13new_allocatorIPfE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800351e:	f002 ff7e 	bl	800641e <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	009b      	lsls	r3, r3, #2
 8003526:	4618      	mov	r0, r3
 8003528:	f002 ff66 	bl	80063f8 <_Znwj>
 800352c:	4603      	mov	r3, r0
      }
 800352e:	4618      	mov	r0, r3
 8003530:	3710      	adds	r7, #16
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}

08003536 <_ZN9__gnu_cxx13new_allocatorIPfEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8003536:	b480      	push	{r7}
 8003538:	b083      	sub	sp, #12
 800353a:	af00      	add	r7, sp, #0
 800353c:	6078      	str	r0, [r7, #4]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	4618      	mov	r0, r3
 8003542:	370c      	adds	r7, #12
 8003544:	46bd      	mov	sp, r7
 8003546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354a:	4770      	bx	lr

0800354c <_ZSt4fillIPffEvT_S1_RKT0_>:
   *  to @c memset or @c wmemset.
  */
  template<typename _ForwardIterator, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline void
    fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value)
 800354c:	b580      	push	{r7, lr}
 800354e:	b084      	sub	sp, #16
 8003550:	af00      	add	r7, sp, #0
 8003552:	60f8      	str	r0, [r7, #12]
 8003554:	60b9      	str	r1, [r7, #8]
 8003556:	607a      	str	r2, [r7, #4]
      // concept requirements
      __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
				  _ForwardIterator>)
      __glibcxx_requires_valid_range(__first, __last);

      std::__fill_a(__first, __last, __value);
 8003558:	687a      	ldr	r2, [r7, #4]
 800355a:	68b9      	ldr	r1, [r7, #8]
 800355c:	68f8      	ldr	r0, [r7, #12]
 800355e:	f000 f8d6 	bl	800370e <_ZSt8__fill_aIPffEvT_S1_RKT0_>
    }
 8003562:	bf00      	nop
 8003564:	3710      	adds	r7, #16
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}

0800356a <_ZNK9__gnu_cxx13new_allocatorIPtE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800356a:	b480      	push	{r7}
 800356c:	b083      	sub	sp, #12
 800356e:	af00      	add	r7, sp, #0
 8003570:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8003572:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 8003576:	4618      	mov	r0, r3
 8003578:	370c      	adds	r7, #12
 800357a:	46bd      	mov	sp, r7
 800357c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003580:	4770      	bx	lr

08003582 <_ZSt12__miter_baseIPPfET_S2_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 8003582:	b480      	push	{r7}
 8003584:	b083      	sub	sp, #12
 8003586:	af00      	add	r7, sp, #0
 8003588:	6078      	str	r0, [r7, #4]
    { return __it; }
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	4618      	mov	r0, r3
 800358e:	370c      	adds	r7, #12
 8003590:	46bd      	mov	sp, r7
 8003592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003596:	4770      	bx	lr

08003598 <_ZSt13__copy_move_aILb0EPPfS1_ET1_T0_S3_S2_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8003598:	b5b0      	push	{r4, r5, r7, lr}
 800359a:	b084      	sub	sp, #16
 800359c:	af00      	add	r7, sp, #0
 800359e:	60f8      	str	r0, [r7, #12]
 80035a0:	60b9      	str	r1, [r7, #8]
 80035a2:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 80035a4:	68f8      	ldr	r0, [r7, #12]
 80035a6:	f000 f8c1 	bl	800372c <_ZSt12__niter_baseIPPfET_S2_>
 80035aa:	4604      	mov	r4, r0
 80035ac:	68b8      	ldr	r0, [r7, #8]
 80035ae:	f000 f8bd 	bl	800372c <_ZSt12__niter_baseIPPfET_S2_>
 80035b2:	4605      	mov	r5, r0
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	4618      	mov	r0, r3
 80035b8:	f000 f8b8 	bl	800372c <_ZSt12__niter_baseIPPfET_S2_>
 80035bc:	4603      	mov	r3, r0
 80035be:	461a      	mov	r2, r3
 80035c0:	4629      	mov	r1, r5
 80035c2:	4620      	mov	r0, r4
 80035c4:	f000 f8bd 	bl	8003742 <_ZSt14__copy_move_a1ILb0EPPfS1_ET1_T0_S3_S2_>
 80035c8:	4602      	mov	r2, r0
 80035ca:	1d3b      	adds	r3, r7, #4
 80035cc:	4611      	mov	r1, r2
 80035ce:	4618      	mov	r0, r3
 80035d0:	f000 f8c7 	bl	8003762 <_ZSt12__niter_wrapIPPfET_RKS2_S2_>
 80035d4:	4603      	mov	r3, r0
    }
 80035d6:	4618      	mov	r0, r3
 80035d8:	3710      	adds	r7, #16
 80035da:	46bd      	mov	sp, r7
 80035dc:	bdb0      	pop	{r4, r5, r7, pc}

080035de <_ZSt22__copy_move_backward_aILb0EPPfS1_ET1_T0_S3_S2_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 80035de:	b5b0      	push	{r4, r5, r7, lr}
 80035e0:	b084      	sub	sp, #16
 80035e2:	af00      	add	r7, sp, #0
 80035e4:	60f8      	str	r0, [r7, #12]
 80035e6:	60b9      	str	r1, [r7, #8]
 80035e8:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 80035ea:	68f8      	ldr	r0, [r7, #12]
 80035ec:	f000 f89e 	bl	800372c <_ZSt12__niter_baseIPPfET_S2_>
 80035f0:	4604      	mov	r4, r0
 80035f2:	68b8      	ldr	r0, [r7, #8]
 80035f4:	f000 f89a 	bl	800372c <_ZSt12__niter_baseIPPfET_S2_>
 80035f8:	4605      	mov	r5, r0
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	4618      	mov	r0, r3
 80035fe:	f000 f895 	bl	800372c <_ZSt12__niter_baseIPPfET_S2_>
 8003602:	4603      	mov	r3, r0
 8003604:	461a      	mov	r2, r3
 8003606:	4629      	mov	r1, r5
 8003608:	4620      	mov	r0, r4
 800360a:	f000 f8b6 	bl	800377a <_ZSt23__copy_move_backward_a1ILb0EPPfS1_ET1_T0_S3_S2_>
 800360e:	4602      	mov	r2, r0
 8003610:	1d3b      	adds	r3, r7, #4
 8003612:	4611      	mov	r1, r2
 8003614:	4618      	mov	r0, r3
 8003616:	f000 f8a4 	bl	8003762 <_ZSt12__niter_wrapIPPfET_RKS2_S2_>
 800361a:	4603      	mov	r3, r0
    }
 800361c:	4618      	mov	r0, r3
 800361e:	3710      	adds	r7, #16
 8003620:	46bd      	mov	sp, r7
 8003622:	bdb0      	pop	{r4, r5, r7, pc}

08003624 <_ZNK9__gnu_cxx13new_allocatorItE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8003624:	b580      	push	{r7, lr}
 8003626:	b082      	sub	sp, #8
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	f000 f856 	bl	80036de <_ZNK9__gnu_cxx13new_allocatorItE11_M_max_sizeEv>
 8003632:	4603      	mov	r3, r0
 8003634:	4618      	mov	r0, r3
 8003636:	3708      	adds	r7, #8
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}

0800363c <_ZSt12__miter_baseIPPtET_S2_>:
    __miter_base(_Iterator __it)
 800363c:	b480      	push	{r7}
 800363e:	b083      	sub	sp, #12
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
    { return __it; }
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	4618      	mov	r0, r3
 8003648:	370c      	adds	r7, #12
 800364a:	46bd      	mov	sp, r7
 800364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003650:	4770      	bx	lr

08003652 <_ZSt13__copy_move_aILb0EPPtS1_ET1_T0_S3_S2_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8003652:	b5b0      	push	{r4, r5, r7, lr}
 8003654:	b084      	sub	sp, #16
 8003656:	af00      	add	r7, sp, #0
 8003658:	60f8      	str	r0, [r7, #12]
 800365a:	60b9      	str	r1, [r7, #8]
 800365c:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 800365e:	68f8      	ldr	r0, [r7, #12]
 8003660:	f000 f89b 	bl	800379a <_ZSt12__niter_baseIPPtET_S2_>
 8003664:	4604      	mov	r4, r0
 8003666:	68b8      	ldr	r0, [r7, #8]
 8003668:	f000 f897 	bl	800379a <_ZSt12__niter_baseIPPtET_S2_>
 800366c:	4605      	mov	r5, r0
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	4618      	mov	r0, r3
 8003672:	f000 f892 	bl	800379a <_ZSt12__niter_baseIPPtET_S2_>
 8003676:	4603      	mov	r3, r0
 8003678:	461a      	mov	r2, r3
 800367a:	4629      	mov	r1, r5
 800367c:	4620      	mov	r0, r4
 800367e:	f000 f897 	bl	80037b0 <_ZSt14__copy_move_a1ILb0EPPtS1_ET1_T0_S3_S2_>
 8003682:	4602      	mov	r2, r0
 8003684:	1d3b      	adds	r3, r7, #4
 8003686:	4611      	mov	r1, r2
 8003688:	4618      	mov	r0, r3
 800368a:	f000 f8a1 	bl	80037d0 <_ZSt12__niter_wrapIPPtET_RKS2_S2_>
 800368e:	4603      	mov	r3, r0
    }
 8003690:	4618      	mov	r0, r3
 8003692:	3710      	adds	r7, #16
 8003694:	46bd      	mov	sp, r7
 8003696:	bdb0      	pop	{r4, r5, r7, pc}

08003698 <_ZSt22__copy_move_backward_aILb0EPPtS1_ET1_T0_S3_S2_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 8003698:	b5b0      	push	{r4, r5, r7, lr}
 800369a:	b084      	sub	sp, #16
 800369c:	af00      	add	r7, sp, #0
 800369e:	60f8      	str	r0, [r7, #12]
 80036a0:	60b9      	str	r1, [r7, #8]
 80036a2:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 80036a4:	68f8      	ldr	r0, [r7, #12]
 80036a6:	f000 f878 	bl	800379a <_ZSt12__niter_baseIPPtET_S2_>
 80036aa:	4604      	mov	r4, r0
 80036ac:	68b8      	ldr	r0, [r7, #8]
 80036ae:	f000 f874 	bl	800379a <_ZSt12__niter_baseIPPtET_S2_>
 80036b2:	4605      	mov	r5, r0
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	4618      	mov	r0, r3
 80036b8:	f000 f86f 	bl	800379a <_ZSt12__niter_baseIPPtET_S2_>
 80036bc:	4603      	mov	r3, r0
 80036be:	461a      	mov	r2, r3
 80036c0:	4629      	mov	r1, r5
 80036c2:	4620      	mov	r0, r4
 80036c4:	f000 f890 	bl	80037e8 <_ZSt23__copy_move_backward_a1ILb0EPPtS1_ET1_T0_S3_S2_>
 80036c8:	4602      	mov	r2, r0
 80036ca:	1d3b      	adds	r3, r7, #4
 80036cc:	4611      	mov	r1, r2
 80036ce:	4618      	mov	r0, r3
 80036d0:	f000 f87e 	bl	80037d0 <_ZSt12__niter_wrapIPPtET_RKS2_S2_>
 80036d4:	4603      	mov	r3, r0
    }
 80036d6:	4618      	mov	r0, r3
 80036d8:	3710      	adds	r7, #16
 80036da:	46bd      	mov	sp, r7
 80036dc:	bdb0      	pop	{r4, r5, r7, pc}

080036de <_ZNK9__gnu_cxx13new_allocatorItE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 80036de:	b480      	push	{r7}
 80036e0:	b083      	sub	sp, #12
 80036e2:	af00      	add	r7, sp, #0
 80036e4:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80036e6:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
      }
 80036ea:	4618      	mov	r0, r3
 80036ec:	370c      	adds	r7, #12
 80036ee:	46bd      	mov	sp, r7
 80036f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f4:	4770      	bx	lr

080036f6 <_ZNK9__gnu_cxx13new_allocatorIPfE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 80036f6:	b480      	push	{r7}
 80036f8:	b083      	sub	sp, #12
 80036fa:	af00      	add	r7, sp, #0
 80036fc:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80036fe:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 8003702:	4618      	mov	r0, r3
 8003704:	370c      	adds	r7, #12
 8003706:	46bd      	mov	sp, r7
 8003708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370c:	4770      	bx	lr

0800370e <_ZSt8__fill_aIPffEvT_S1_RKT0_>:
    __fill_a(_FIte __first, _FIte __last, const _Tp& __value)
 800370e:	b580      	push	{r7, lr}
 8003710:	b084      	sub	sp, #16
 8003712:	af00      	add	r7, sp, #0
 8003714:	60f8      	str	r0, [r7, #12]
 8003716:	60b9      	str	r1, [r7, #8]
 8003718:	607a      	str	r2, [r7, #4]
    { std::__fill_a1(__first, __last, __value); }
 800371a:	687a      	ldr	r2, [r7, #4]
 800371c:	68b9      	ldr	r1, [r7, #8]
 800371e:	68f8      	ldr	r0, [r7, #12]
 8003720:	f000 f872 	bl	8003808 <_ZSt9__fill_a1IPffEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S8_RKS4_>
 8003724:	bf00      	nop
 8003726:	3710      	adds	r7, #16
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}

0800372c <_ZSt12__niter_baseIPPfET_S2_>:
    __niter_base(_Iterator __it)
 800372c:	b480      	push	{r7}
 800372e:	b083      	sub	sp, #12
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
    { return __it; }
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	4618      	mov	r0, r3
 8003738:	370c      	adds	r7, #12
 800373a:	46bd      	mov	sp, r7
 800373c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003740:	4770      	bx	lr

08003742 <_ZSt14__copy_move_a1ILb0EPPfS1_ET1_T0_S3_S2_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8003742:	b580      	push	{r7, lr}
 8003744:	b084      	sub	sp, #16
 8003746:	af00      	add	r7, sp, #0
 8003748:	60f8      	str	r0, [r7, #12]
 800374a:	60b9      	str	r1, [r7, #8]
 800374c:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 800374e:	687a      	ldr	r2, [r7, #4]
 8003750:	68b9      	ldr	r1, [r7, #8]
 8003752:	68f8      	ldr	r0, [r7, #12]
 8003754:	f000 f872 	bl	800383c <_ZSt14__copy_move_a2ILb0EPPfS1_ET1_T0_S3_S2_>
 8003758:	4603      	mov	r3, r0
 800375a:	4618      	mov	r0, r3
 800375c:	3710      	adds	r7, #16
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}

08003762 <_ZSt12__niter_wrapIPPfET_RKS2_S2_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8003762:	b480      	push	{r7}
 8003764:	b083      	sub	sp, #12
 8003766:	af00      	add	r7, sp, #0
 8003768:	6078      	str	r0, [r7, #4]
 800376a:	6039      	str	r1, [r7, #0]
    { return __res; }
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	4618      	mov	r0, r3
 8003770:	370c      	adds	r7, #12
 8003772:	46bd      	mov	sp, r7
 8003774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003778:	4770      	bx	lr

0800377a <_ZSt23__copy_move_backward_a1ILb0EPPfS1_ET1_T0_S3_S2_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 800377a:	b580      	push	{r7, lr}
 800377c:	b084      	sub	sp, #16
 800377e:	af00      	add	r7, sp, #0
 8003780:	60f8      	str	r0, [r7, #12]
 8003782:	60b9      	str	r1, [r7, #8]
 8003784:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 8003786:	687a      	ldr	r2, [r7, #4]
 8003788:	68b9      	ldr	r1, [r7, #8]
 800378a:	68f8      	ldr	r0, [r7, #12]
 800378c:	f000 f866 	bl	800385c <_ZSt23__copy_move_backward_a2ILb0EPPfS1_ET1_T0_S3_S2_>
 8003790:	4603      	mov	r3, r0
 8003792:	4618      	mov	r0, r3
 8003794:	3710      	adds	r7, #16
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}

0800379a <_ZSt12__niter_baseIPPtET_S2_>:
    __niter_base(_Iterator __it)
 800379a:	b480      	push	{r7}
 800379c:	b083      	sub	sp, #12
 800379e:	af00      	add	r7, sp, #0
 80037a0:	6078      	str	r0, [r7, #4]
    { return __it; }
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	4618      	mov	r0, r3
 80037a6:	370c      	adds	r7, #12
 80037a8:	46bd      	mov	sp, r7
 80037aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ae:	4770      	bx	lr

080037b0 <_ZSt14__copy_move_a1ILb0EPPtS1_ET1_T0_S3_S2_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b084      	sub	sp, #16
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	60f8      	str	r0, [r7, #12]
 80037b8:	60b9      	str	r1, [r7, #8]
 80037ba:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 80037bc:	687a      	ldr	r2, [r7, #4]
 80037be:	68b9      	ldr	r1, [r7, #8]
 80037c0:	68f8      	ldr	r0, [r7, #12]
 80037c2:	f000 f85b 	bl	800387c <_ZSt14__copy_move_a2ILb0EPPtS1_ET1_T0_S3_S2_>
 80037c6:	4603      	mov	r3, r0
 80037c8:	4618      	mov	r0, r3
 80037ca:	3710      	adds	r7, #16
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}

080037d0 <_ZSt12__niter_wrapIPPtET_RKS2_S2_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 80037d0:	b480      	push	{r7}
 80037d2:	b083      	sub	sp, #12
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
 80037d8:	6039      	str	r1, [r7, #0]
    { return __res; }
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	4618      	mov	r0, r3
 80037de:	370c      	adds	r7, #12
 80037e0:	46bd      	mov	sp, r7
 80037e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e6:	4770      	bx	lr

080037e8 <_ZSt23__copy_move_backward_a1ILb0EPPtS1_ET1_T0_S3_S2_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b084      	sub	sp, #16
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	60f8      	str	r0, [r7, #12]
 80037f0:	60b9      	str	r1, [r7, #8]
 80037f2:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 80037f4:	687a      	ldr	r2, [r7, #4]
 80037f6:	68b9      	ldr	r1, [r7, #8]
 80037f8:	68f8      	ldr	r0, [r7, #12]
 80037fa:	f000 f84f 	bl	800389c <_ZSt23__copy_move_backward_a2ILb0EPPtS1_ET1_T0_S3_S2_>
 80037fe:	4603      	mov	r3, r0
 8003800:	4618      	mov	r0, r3
 8003802:	3710      	adds	r7, #16
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}

08003808 <_ZSt9__fill_a1IPffEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S8_RKS4_>:
    __fill_a1(_ForwardIterator __first, _ForwardIterator __last,
 8003808:	b480      	push	{r7}
 800380a:	b087      	sub	sp, #28
 800380c:	af00      	add	r7, sp, #0
 800380e:	60f8      	str	r0, [r7, #12]
 8003810:	60b9      	str	r1, [r7, #8]
 8003812:	607a      	str	r2, [r7, #4]
      const _Tp __tmp = __value;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	617b      	str	r3, [r7, #20]
      for (; __first != __last; ++__first)
 800381a:	68fa      	ldr	r2, [r7, #12]
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	429a      	cmp	r2, r3
 8003820:	d006      	beq.n	8003830 <_ZSt9__fill_a1IPffEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S8_RKS4_+0x28>
	*__first = __tmp;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	697a      	ldr	r2, [r7, #20]
 8003826:	601a      	str	r2, [r3, #0]
      for (; __first != __last; ++__first)
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	3304      	adds	r3, #4
 800382c:	60fb      	str	r3, [r7, #12]
 800382e:	e7f4      	b.n	800381a <_ZSt9__fill_a1IPffEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S8_RKS4_+0x12>
    }
 8003830:	bf00      	nop
 8003832:	371c      	adds	r7, #28
 8003834:	46bd      	mov	sp, r7
 8003836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383a:	4770      	bx	lr

0800383c <_ZSt14__copy_move_a2ILb0EPPfS1_ET1_T0_S3_S2_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 800383c:	b580      	push	{r7, lr}
 800383e:	b084      	sub	sp, #16
 8003840:	af00      	add	r7, sp, #0
 8003842:	60f8      	str	r0, [r7, #12]
 8003844:	60b9      	str	r1, [r7, #8]
 8003846:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 8003848:	687a      	ldr	r2, [r7, #4]
 800384a:	68b9      	ldr	r1, [r7, #8]
 800384c:	68f8      	ldr	r0, [r7, #12]
 800384e:	f000 f835 	bl	80038bc <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPfEEPT_PKS4_S7_S5_>
 8003852:	4603      	mov	r3, r0
    }
 8003854:	4618      	mov	r0, r3
 8003856:	3710      	adds	r7, #16
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}

0800385c <_ZSt23__copy_move_backward_a2ILb0EPPfS1_ET1_T0_S3_S2_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 800385c:	b580      	push	{r7, lr}
 800385e:	b084      	sub	sp, #16
 8003860:	af00      	add	r7, sp, #0
 8003862:	60f8      	str	r0, [r7, #12]
 8003864:	60b9      	str	r1, [r7, #8]
 8003866:	607a      	str	r2, [r7, #4]
				       _Category>::__copy_move_b(__first,
 8003868:	687a      	ldr	r2, [r7, #4]
 800386a:	68b9      	ldr	r1, [r7, #8]
 800386c:	68f8      	ldr	r0, [r7, #12]
 800386e:	f000 f842 	bl	80038f6 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPfEEPT_PKS4_S7_S5_>
 8003872:	4603      	mov	r3, r0
    }
 8003874:	4618      	mov	r0, r3
 8003876:	3710      	adds	r7, #16
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}

0800387c <_ZSt14__copy_move_a2ILb0EPPtS1_ET1_T0_S3_S2_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 800387c:	b580      	push	{r7, lr}
 800387e:	b084      	sub	sp, #16
 8003880:	af00      	add	r7, sp, #0
 8003882:	60f8      	str	r0, [r7, #12]
 8003884:	60b9      	str	r1, [r7, #8]
 8003886:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 8003888:	687a      	ldr	r2, [r7, #4]
 800388a:	68b9      	ldr	r1, [r7, #8]
 800388c:	68f8      	ldr	r0, [r7, #12]
 800388e:	f000 f854 	bl	800393a <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPtEEPT_PKS4_S7_S5_>
 8003892:	4603      	mov	r3, r0
    }
 8003894:	4618      	mov	r0, r3
 8003896:	3710      	adds	r7, #16
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}

0800389c <_ZSt23__copy_move_backward_a2ILb0EPPtS1_ET1_T0_S3_S2_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 800389c:	b580      	push	{r7, lr}
 800389e:	b084      	sub	sp, #16
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	60f8      	str	r0, [r7, #12]
 80038a4:	60b9      	str	r1, [r7, #8]
 80038a6:	607a      	str	r2, [r7, #4]
				       _Category>::__copy_move_b(__first,
 80038a8:	687a      	ldr	r2, [r7, #4]
 80038aa:	68b9      	ldr	r1, [r7, #8]
 80038ac:	68f8      	ldr	r0, [r7, #12]
 80038ae:	f000 f861 	bl	8003974 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPtEEPT_PKS4_S7_S5_>
 80038b2:	4603      	mov	r3, r0
    }
 80038b4:	4618      	mov	r0, r3
 80038b6:	3710      	adds	r7, #16
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}

080038bc <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPfEEPT_PKS4_S7_S5_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80038bc:	b580      	push	{r7, lr}
 80038be:	b086      	sub	sp, #24
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	60f8      	str	r0, [r7, #12]
 80038c4:	60b9      	str	r1, [r7, #8]
 80038c6:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 80038c8:	68ba      	ldr	r2, [r7, #8]
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	1ad3      	subs	r3, r2, r3
 80038ce:	109b      	asrs	r3, r3, #2
 80038d0:	617b      	str	r3, [r7, #20]
	  if (_Num)
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d006      	beq.n	80038e6 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPfEEPT_PKS4_S7_S5_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	009b      	lsls	r3, r3, #2
 80038dc:	461a      	mov	r2, r3
 80038de:	68f9      	ldr	r1, [r7, #12]
 80038e0:	6878      	ldr	r0, [r7, #4]
 80038e2:	f002 fe7f 	bl	80065e4 <memmove>
	  return __result + _Num;
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	009b      	lsls	r3, r3, #2
 80038ea:	687a      	ldr	r2, [r7, #4]
 80038ec:	4413      	add	r3, r2
	}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3718      	adds	r7, #24
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}

080038f6 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPfEEPT_PKS4_S7_S5_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80038f6:	b580      	push	{r7, lr}
 80038f8:	b086      	sub	sp, #24
 80038fa:	af00      	add	r7, sp, #0
 80038fc:	60f8      	str	r0, [r7, #12]
 80038fe:	60b9      	str	r1, [r7, #8]
 8003900:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8003902:	68ba      	ldr	r2, [r7, #8]
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	1ad3      	subs	r3, r2, r3
 8003908:	109b      	asrs	r3, r3, #2
 800390a:	617b      	str	r3, [r7, #20]
	  if (_Num)
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d00a      	beq.n	8003928 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPfEEPT_PKS4_S7_S5_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	009b      	lsls	r3, r3, #2
 8003916:	425b      	negs	r3, r3
 8003918:	687a      	ldr	r2, [r7, #4]
 800391a:	18d0      	adds	r0, r2, r3
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	009b      	lsls	r3, r3, #2
 8003920:	461a      	mov	r2, r3
 8003922:	68f9      	ldr	r1, [r7, #12]
 8003924:	f002 fe5e 	bl	80065e4 <memmove>
	  return __result - _Num;
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	009b      	lsls	r3, r3, #2
 800392c:	425b      	negs	r3, r3
 800392e:	687a      	ldr	r2, [r7, #4]
 8003930:	4413      	add	r3, r2
	}
 8003932:	4618      	mov	r0, r3
 8003934:	3718      	adds	r7, #24
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}

0800393a <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPtEEPT_PKS4_S7_S5_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 800393a:	b580      	push	{r7, lr}
 800393c:	b086      	sub	sp, #24
 800393e:	af00      	add	r7, sp, #0
 8003940:	60f8      	str	r0, [r7, #12]
 8003942:	60b9      	str	r1, [r7, #8]
 8003944:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8003946:	68ba      	ldr	r2, [r7, #8]
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	1ad3      	subs	r3, r2, r3
 800394c:	109b      	asrs	r3, r3, #2
 800394e:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d006      	beq.n	8003964 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPtEEPT_PKS4_S7_S5_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	009b      	lsls	r3, r3, #2
 800395a:	461a      	mov	r2, r3
 800395c:	68f9      	ldr	r1, [r7, #12]
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f002 fe40 	bl	80065e4 <memmove>
	  return __result + _Num;
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	009b      	lsls	r3, r3, #2
 8003968:	687a      	ldr	r2, [r7, #4]
 800396a:	4413      	add	r3, r2
	}
 800396c:	4618      	mov	r0, r3
 800396e:	3718      	adds	r7, #24
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}

08003974 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPtEEPT_PKS4_S7_S5_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8003974:	b580      	push	{r7, lr}
 8003976:	b086      	sub	sp, #24
 8003978:	af00      	add	r7, sp, #0
 800397a:	60f8      	str	r0, [r7, #12]
 800397c:	60b9      	str	r1, [r7, #8]
 800397e:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8003980:	68ba      	ldr	r2, [r7, #8]
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	1ad3      	subs	r3, r2, r3
 8003986:	109b      	asrs	r3, r3, #2
 8003988:	617b      	str	r3, [r7, #20]
	  if (_Num)
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d00a      	beq.n	80039a6 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPtEEPT_PKS4_S7_S5_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	009b      	lsls	r3, r3, #2
 8003994:	425b      	negs	r3, r3
 8003996:	687a      	ldr	r2, [r7, #4]
 8003998:	18d0      	adds	r0, r2, r3
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	009b      	lsls	r3, r3, #2
 800399e:	461a      	mov	r2, r3
 80039a0:	68f9      	ldr	r1, [r7, #12]
 80039a2:	f002 fe1f 	bl	80065e4 <memmove>
	  return __result - _Num;
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	009b      	lsls	r3, r3, #2
 80039aa:	425b      	negs	r3, r3
 80039ac:	687a      	ldr	r2, [r7, #4]
 80039ae:	4413      	add	r3, r2
	}
 80039b0:	4618      	mov	r0, r3
 80039b2:	3718      	adds	r7, #24
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}

080039b8 <_ZN9ParameterD1Ev>:
} Parameter ;
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b082      	sub	sp, #8
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	4618      	mov	r0, r3
 80039c4:	f002 fd73 	bl	80064ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	4618      	mov	r0, r3
 80039cc:	3708      	adds	r7, #8
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}
	...

080039d4 <_Z41__static_initialization_and_destruction_0ii>:
}

static inline uint32_t LL_SYSTICK_IsActiveCounterFlag(void)
{
  return ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == (SysTick_CTRL_COUNTFLAG_Msk));
}
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b08c      	sub	sp, #48	; 0x30
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
 80039dc:	6039      	str	r1, [r7, #0]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2b01      	cmp	r3, #1
 80039e2:	f040 80a9 	bne.w	8003b38 <_Z41__static_initialization_and_destruction_0ii+0x164>
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80039ec:	4293      	cmp	r3, r2
 80039ee:	f040 80a3 	bne.w	8003b38 <_Z41__static_initialization_and_destruction_0ii+0x164>
Parameter measured_sig_amp = {"Desired lock-point amplitude [mV]",500};	//the amplitude of the discriminator slope
 80039f2:	f107 030c 	add.w	r3, r7, #12
 80039f6:	4618      	mov	r0, r3
 80039f8:	f002 fd0f 	bl	800641a <_ZNSaIcEC1Ev>
 80039fc:	f107 030c 	add.w	r3, r7, #12
 8003a00:	461a      	mov	r2, r3
 8003a02:	4961      	ldr	r1, [pc, #388]	; (8003b88 <_Z41__static_initialization_and_destruction_0ii+0x1b4>)
 8003a04:	4861      	ldr	r0, [pc, #388]	; (8003b8c <_Z41__static_initialization_and_destruction_0ii+0x1b8>)
 8003a06:	f002 fd7d 	bl	8006504 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8003a0a:	f107 030c 	add.w	r3, r7, #12
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f002 fd04 	bl	800641c <_ZNSaIcED1Ev>
Parameter loop_speed = {"Running loop speed (locking mode) [kHz]",12.8};
 8003a14:	f107 0310 	add.w	r3, r7, #16
 8003a18:	4618      	mov	r0, r3
 8003a1a:	f002 fcfe 	bl	800641a <_ZNSaIcEC1Ev>
 8003a1e:	f107 0310 	add.w	r3, r7, #16
 8003a22:	461a      	mov	r2, r3
 8003a24:	495a      	ldr	r1, [pc, #360]	; (8003b90 <_Z41__static_initialization_and_destruction_0ii+0x1bc>)
 8003a26:	485b      	ldr	r0, [pc, #364]	; (8003b94 <_Z41__static_initialization_and_destruction_0ii+0x1c0>)
 8003a28:	f002 fd6c 	bl	8006504 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8003a2c:	f107 0310 	add.w	r3, r7, #16
 8003a30:	4618      	mov	r0, r3
 8003a32:	f002 fcf3 	bl	800641c <_ZNSaIcED1Ev>
Parameter pterm_piezo = {"P (piezo)",0.01};								// proportional gain term on piezo
 8003a36:	f107 0314 	add.w	r3, r7, #20
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f002 fced 	bl	800641a <_ZNSaIcEC1Ev>
 8003a40:	f107 0314 	add.w	r3, r7, #20
 8003a44:	461a      	mov	r2, r3
 8003a46:	4954      	ldr	r1, [pc, #336]	; (8003b98 <_Z41__static_initialization_and_destruction_0ii+0x1c4>)
 8003a48:	4854      	ldr	r0, [pc, #336]	; (8003b9c <_Z41__static_initialization_and_destruction_0ii+0x1c8>)
 8003a4a:	f002 fd5b 	bl	8006504 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8003a4e:	f107 0314 	add.w	r3, r7, #20
 8003a52:	4618      	mov	r0, r3
 8003a54:	f002 fce2 	bl	800641c <_ZNSaIcED1Ev>
Parameter itime = {"Integration time constant [us]",500};				// integration time constant in microseconds
 8003a58:	f107 0318 	add.w	r3, r7, #24
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f002 fcdc 	bl	800641a <_ZNSaIcEC1Ev>
 8003a62:	f107 0318 	add.w	r3, r7, #24
 8003a66:	461a      	mov	r2, r3
 8003a68:	494d      	ldr	r1, [pc, #308]	; (8003ba0 <_Z41__static_initialization_and_destruction_0ii+0x1cc>)
 8003a6a:	484e      	ldr	r0, [pc, #312]	; (8003ba4 <_Z41__static_initialization_and_destruction_0ii+0x1d0>)
 8003a6c:	f002 fd4a 	bl	8006504 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8003a70:	f107 0318 	add.w	r3, r7, #24
 8003a74:	4618      	mov	r0, r3
 8003a76:	f002 fcd1 	bl	800641c <_ZNSaIcED1Ev>
Parameter stime = {"Second integration time constant [us]",1000};		// second integration time (i squared) in microseconds
 8003a7a:	f107 031c 	add.w	r3, r7, #28
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f002 fccb 	bl	800641a <_ZNSaIcEC1Ev>
 8003a84:	f107 031c 	add.w	r3, r7, #28
 8003a88:	461a      	mov	r2, r3
 8003a8a:	4947      	ldr	r1, [pc, #284]	; (8003ba8 <_Z41__static_initialization_and_destruction_0ii+0x1d4>)
 8003a8c:	4847      	ldr	r0, [pc, #284]	; (8003bac <_Z41__static_initialization_and_destruction_0ii+0x1d8>)
 8003a8e:	f002 fd39 	bl	8006504 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8003a92:	f107 031c 	add.w	r3, r7, #28
 8003a96:	4618      	mov	r0, r3
 8003a98:	f002 fcc0 	bl	800641c <_ZNSaIcED1Ev>
Parameter dtime = {"Derivative time constant [us]",2};					// derivative time constant in microseconds
 8003a9c:	f107 0320 	add.w	r3, r7, #32
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f002 fcba 	bl	800641a <_ZNSaIcEC1Ev>
 8003aa6:	f107 0320 	add.w	r3, r7, #32
 8003aaa:	461a      	mov	r2, r3
 8003aac:	4940      	ldr	r1, [pc, #256]	; (8003bb0 <_Z41__static_initialization_and_destruction_0ii+0x1dc>)
 8003aae:	4841      	ldr	r0, [pc, #260]	; (8003bb4 <_Z41__static_initialization_and_destruction_0ii+0x1e0>)
 8003ab0:	f002 fd28 	bl	8006504 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8003ab4:	f107 0320 	add.w	r3, r7, #32
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f002 fcaf 	bl	800641c <_ZNSaIcED1Ev>
Parameter alpha = {"Low-pass filter constant alpha",0.9};				//proportional gain low-pass filter constant
 8003abe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f002 fca9 	bl	800641a <_ZNSaIcEC1Ev>
 8003ac8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003acc:	461a      	mov	r2, r3
 8003ace:	493a      	ldr	r1, [pc, #232]	; (8003bb8 <_Z41__static_initialization_and_destruction_0ii+0x1e4>)
 8003ad0:	483a      	ldr	r0, [pc, #232]	; (8003bbc <_Z41__static_initialization_and_destruction_0ii+0x1e8>)
 8003ad2:	f002 fd17 	bl	8006504 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8003ad6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ada:	4618      	mov	r0, r3
 8003adc:	f002 fc9e 	bl	800641c <_ZNSaIcED1Ev>
Parameter freq = {"Scan frequency [Hz]",10};							//in Hz
 8003ae0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f002 fc98 	bl	800641a <_ZNSaIcEC1Ev>
 8003aea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003aee:	461a      	mov	r2, r3
 8003af0:	4933      	ldr	r1, [pc, #204]	; (8003bc0 <_Z41__static_initialization_and_destruction_0ii+0x1ec>)
 8003af2:	4834      	ldr	r0, [pc, #208]	; (8003bc4 <_Z41__static_initialization_and_destruction_0ii+0x1f0>)
 8003af4:	f002 fd06 	bl	8006504 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8003af8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003afc:	4618      	mov	r0, r3
 8003afe:	f002 fc8d 	bl	800641c <_ZNSaIcED1Ev>
Parameter ramp_amp = {"Scan amplitude [V]", 3};							// in V
 8003b02:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003b06:	4618      	mov	r0, r3
 8003b08:	f002 fc87 	bl	800641a <_ZNSaIcEC1Ev>
 8003b0c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003b10:	461a      	mov	r2, r3
 8003b12:	492d      	ldr	r1, [pc, #180]	; (8003bc8 <_Z41__static_initialization_and_destruction_0ii+0x1f4>)
 8003b14:	482d      	ldr	r0, [pc, #180]	; (8003bcc <_Z41__static_initialization_and_destruction_0ii+0x1f8>)
 8003b16:	f002 fcf5 	bl	8006504 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8003b1a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f002 fc7c 	bl	800641c <_ZNSaIcED1Ev>
float period = 1000000.0/freq.param_value;
 8003b24:	4b27      	ldr	r3, [pc, #156]	; (8003bc4 <_Z41__static_initialization_and_destruction_0ii+0x1f0>)
 8003b26:	ed93 7a06 	vldr	s14, [r3, #24]
 8003b2a:	eddf 6a29 	vldr	s13, [pc, #164]	; 8003bd0 <_Z41__static_initialization_and_destruction_0ii+0x1fc>
 8003b2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b32:	4b28      	ldr	r3, [pc, #160]	; (8003bd4 <_Z41__static_initialization_and_destruction_0ii+0x200>)
 8003b34:	edc3 7a00 	vstr	s15, [r3]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d11f      	bne.n	8003b7e <_Z41__static_initialization_and_destruction_0ii+0x1aa>
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d11a      	bne.n	8003b7e <_Z41__static_initialization_and_destruction_0ii+0x1aa>
Parameter ramp_amp = {"Scan amplitude [V]", 3};							// in V
 8003b48:	4820      	ldr	r0, [pc, #128]	; (8003bcc <_Z41__static_initialization_and_destruction_0ii+0x1f8>)
 8003b4a:	f7ff ff35 	bl	80039b8 <_ZN9ParameterD1Ev>
Parameter freq = {"Scan frequency [Hz]",10};							//in Hz
 8003b4e:	481d      	ldr	r0, [pc, #116]	; (8003bc4 <_Z41__static_initialization_and_destruction_0ii+0x1f0>)
 8003b50:	f7ff ff32 	bl	80039b8 <_ZN9ParameterD1Ev>
Parameter alpha = {"Low-pass filter constant alpha",0.9};				//proportional gain low-pass filter constant
 8003b54:	4819      	ldr	r0, [pc, #100]	; (8003bbc <_Z41__static_initialization_and_destruction_0ii+0x1e8>)
 8003b56:	f7ff ff2f 	bl	80039b8 <_ZN9ParameterD1Ev>
Parameter dtime = {"Derivative time constant [us]",2};					// derivative time constant in microseconds
 8003b5a:	4816      	ldr	r0, [pc, #88]	; (8003bb4 <_Z41__static_initialization_and_destruction_0ii+0x1e0>)
 8003b5c:	f7ff ff2c 	bl	80039b8 <_ZN9ParameterD1Ev>
Parameter stime = {"Second integration time constant [us]",1000};		// second integration time (i squared) in microseconds
 8003b60:	4812      	ldr	r0, [pc, #72]	; (8003bac <_Z41__static_initialization_and_destruction_0ii+0x1d8>)
 8003b62:	f7ff ff29 	bl	80039b8 <_ZN9ParameterD1Ev>
Parameter itime = {"Integration time constant [us]",500};				// integration time constant in microseconds
 8003b66:	480f      	ldr	r0, [pc, #60]	; (8003ba4 <_Z41__static_initialization_and_destruction_0ii+0x1d0>)
 8003b68:	f7ff ff26 	bl	80039b8 <_ZN9ParameterD1Ev>
Parameter pterm_piezo = {"P (piezo)",0.01};								// proportional gain term on piezo
 8003b6c:	480b      	ldr	r0, [pc, #44]	; (8003b9c <_Z41__static_initialization_and_destruction_0ii+0x1c8>)
 8003b6e:	f7ff ff23 	bl	80039b8 <_ZN9ParameterD1Ev>
Parameter loop_speed = {"Running loop speed (locking mode) [kHz]",12.8};
 8003b72:	4808      	ldr	r0, [pc, #32]	; (8003b94 <_Z41__static_initialization_and_destruction_0ii+0x1c0>)
 8003b74:	f7ff ff20 	bl	80039b8 <_ZN9ParameterD1Ev>
Parameter measured_sig_amp = {"Desired lock-point amplitude [mV]",500};	//the amplitude of the discriminator slope
 8003b78:	4804      	ldr	r0, [pc, #16]	; (8003b8c <_Z41__static_initialization_and_destruction_0ii+0x1b8>)
 8003b7a:	f7ff ff1d 	bl	80039b8 <_ZN9ParameterD1Ev>
}
 8003b7e:	bf00      	nop
 8003b80:	3730      	adds	r7, #48	; 0x30
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}
 8003b86:	bf00      	nop
 8003b88:	080068f4 	.word	0x080068f4
 8003b8c:	20000000 	.word	0x20000000
 8003b90:	08006918 	.word	0x08006918
 8003b94:	2000001c 	.word	0x2000001c
 8003b98:	08006940 	.word	0x08006940
 8003b9c:	20000038 	.word	0x20000038
 8003ba0:	0800694c 	.word	0x0800694c
 8003ba4:	20000054 	.word	0x20000054
 8003ba8:	0800696c 	.word	0x0800696c
 8003bac:	20000070 	.word	0x20000070
 8003bb0:	08006994 	.word	0x08006994
 8003bb4:	2000008c 	.word	0x2000008c
 8003bb8:	080069b4 	.word	0x080069b4
 8003bbc:	200000a8 	.word	0x200000a8
 8003bc0:	080069d4 	.word	0x080069d4
 8003bc4:	200000c4 	.word	0x200000c4
 8003bc8:	080069e8 	.word	0x080069e8
 8003bcc:	200000e0 	.word	0x200000e0
 8003bd0:	49742400 	.word	0x49742400
 8003bd4:	20000274 	.word	0x20000274

08003bd8 <_GLOBAL__sub_I_t>:
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	af00      	add	r7, sp, #0
 8003bdc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003be0:	2001      	movs	r0, #1
 8003be2:	f7ff fef7 	bl	80039d4 <_Z41__static_initialization_and_destruction_0ii>
 8003be6:	bd80      	pop	{r7, pc}

08003be8 <_GLOBAL__sub_D_t>:
 8003be8:	b580      	push	{r7, lr}
 8003bea:	af00      	add	r7, sp, #0
 8003bec:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003bf0:	2000      	movs	r0, #0
 8003bf2:	f7ff feef 	bl	80039d4 <_Z41__static_initialization_and_destruction_0ii>
 8003bf6:	bd80      	pop	{r7, pc}

08003bf8 <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b082      	sub	sp, #8
 8003bfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8003bfe:	463b      	mov	r3, r7
 8003c00:	2200      	movs	r2, #0
 8003c02:	601a      	str	r2, [r3, #0]
 8003c04:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8003c06:	4b0f      	ldr	r3, [pc, #60]	; (8003c44 <MX_DAC_Init+0x4c>)
 8003c08:	4a0f      	ldr	r2, [pc, #60]	; (8003c48 <MX_DAC_Init+0x50>)
 8003c0a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8003c0c:	480d      	ldr	r0, [pc, #52]	; (8003c44 <MX_DAC_Init+0x4c>)
 8003c0e:	f000 fed8 	bl	80049c2 <HAL_DAC_Init>
 8003c12:	4603      	mov	r3, r0
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d001      	beq.n	8003c1c <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8003c18:	f000 f93a 	bl	8003e90 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8003c20:	2300      	movs	r3, #0
 8003c22:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8003c24:	463b      	mov	r3, r7
 8003c26:	2200      	movs	r2, #0
 8003c28:	4619      	mov	r1, r3
 8003c2a:	4806      	ldr	r0, [pc, #24]	; (8003c44 <MX_DAC_Init+0x4c>)
 8003c2c:	f000 feeb 	bl	8004a06 <HAL_DAC_ConfigChannel>
 8003c30:	4603      	mov	r3, r0
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d001      	beq.n	8003c3a <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8003c36:	f000 f92b 	bl	8003e90 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8003c3a:	bf00      	nop
 8003c3c:	3708      	adds	r7, #8
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}
 8003c42:	bf00      	nop
 8003c44:	20000278 	.word	0x20000278
 8003c48:	40007400 	.word	0x40007400

08003c4c <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b08a      	sub	sp, #40	; 0x28
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c54:	f107 0314 	add.w	r3, r7, #20
 8003c58:	2200      	movs	r2, #0
 8003c5a:	601a      	str	r2, [r3, #0]
 8003c5c:	605a      	str	r2, [r3, #4]
 8003c5e:	609a      	str	r2, [r3, #8]
 8003c60:	60da      	str	r2, [r3, #12]
 8003c62:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a15      	ldr	r2, [pc, #84]	; (8003cc0 <HAL_DAC_MspInit+0x74>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d123      	bne.n	8003cb6 <HAL_DAC_MspInit+0x6a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8003c6e:	4b15      	ldr	r3, [pc, #84]	; (8003cc4 <HAL_DAC_MspInit+0x78>)
 8003c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c72:	4a14      	ldr	r2, [pc, #80]	; (8003cc4 <HAL_DAC_MspInit+0x78>)
 8003c74:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003c78:	6413      	str	r3, [r2, #64]	; 0x40
 8003c7a:	4b12      	ldr	r3, [pc, #72]	; (8003cc4 <HAL_DAC_MspInit+0x78>)
 8003c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c7e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c82:	613b      	str	r3, [r7, #16]
 8003c84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c86:	4b0f      	ldr	r3, [pc, #60]	; (8003cc4 <HAL_DAC_MspInit+0x78>)
 8003c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c8a:	4a0e      	ldr	r2, [pc, #56]	; (8003cc4 <HAL_DAC_MspInit+0x78>)
 8003c8c:	f043 0301 	orr.w	r3, r3, #1
 8003c90:	6313      	str	r3, [r2, #48]	; 0x30
 8003c92:	4b0c      	ldr	r3, [pc, #48]	; (8003cc4 <HAL_DAC_MspInit+0x78>)
 8003c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c96:	f003 0301 	and.w	r3, r3, #1
 8003c9a:	60fb      	str	r3, [r7, #12]
 8003c9c:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003c9e:	2310      	movs	r3, #16
 8003ca0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003ca2:	2303      	movs	r3, #3
 8003ca4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003caa:	f107 0314 	add.w	r3, r7, #20
 8003cae:	4619      	mov	r1, r3
 8003cb0:	4805      	ldr	r0, [pc, #20]	; (8003cc8 <HAL_DAC_MspInit+0x7c>)
 8003cb2:	f001 f9e1 	bl	8005078 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 8003cb6:	bf00      	nop
 8003cb8:	3728      	adds	r7, #40	; 0x28
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}
 8003cbe:	bf00      	nop
 8003cc0:	40007400 	.word	0x40007400
 8003cc4:	40023800 	.word	0x40023800
 8003cc8:	40020000 	.word	0x40020000

08003ccc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b082      	sub	sp, #8
 8003cd0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003cd2:	4b0c      	ldr	r3, [pc, #48]	; (8003d04 <MX_DMA_Init+0x38>)
 8003cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cd6:	4a0b      	ldr	r2, [pc, #44]	; (8003d04 <MX_DMA_Init+0x38>)
 8003cd8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003cdc:	6313      	str	r3, [r2, #48]	; 0x30
 8003cde:	4b09      	ldr	r3, [pc, #36]	; (8003d04 <MX_DMA_Init+0x38>)
 8003ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ce2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ce6:	607b      	str	r3, [r7, #4]
 8003ce8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8003cea:	2200      	movs	r2, #0
 8003cec:	2100      	movs	r1, #0
 8003cee:	2038      	movs	r0, #56	; 0x38
 8003cf0:	f000 fe31 	bl	8004956 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8003cf4:	2038      	movs	r0, #56	; 0x38
 8003cf6:	f000 fe4a 	bl	800498e <HAL_NVIC_EnableIRQ>

}
 8003cfa:	bf00      	nop
 8003cfc:	3708      	adds	r7, #8
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}
 8003d02:	bf00      	nop
 8003d04:	40023800 	.word	0x40023800

08003d08 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b088      	sub	sp, #32
 8003d0c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d0e:	f107 030c 	add.w	r3, r7, #12
 8003d12:	2200      	movs	r2, #0
 8003d14:	601a      	str	r2, [r3, #0]
 8003d16:	605a      	str	r2, [r3, #4]
 8003d18:	609a      	str	r2, [r3, #8]
 8003d1a:	60da      	str	r2, [r3, #12]
 8003d1c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d1e:	4b21      	ldr	r3, [pc, #132]	; (8003da4 <MX_GPIO_Init+0x9c>)
 8003d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d22:	4a20      	ldr	r2, [pc, #128]	; (8003da4 <MX_GPIO_Init+0x9c>)
 8003d24:	f043 0301 	orr.w	r3, r3, #1
 8003d28:	6313      	str	r3, [r2, #48]	; 0x30
 8003d2a:	4b1e      	ldr	r3, [pc, #120]	; (8003da4 <MX_GPIO_Init+0x9c>)
 8003d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d2e:	f003 0301 	and.w	r3, r3, #1
 8003d32:	60bb      	str	r3, [r7, #8]
 8003d34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d36:	4b1b      	ldr	r3, [pc, #108]	; (8003da4 <MX_GPIO_Init+0x9c>)
 8003d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d3a:	4a1a      	ldr	r2, [pc, #104]	; (8003da4 <MX_GPIO_Init+0x9c>)
 8003d3c:	f043 0302 	orr.w	r3, r3, #2
 8003d40:	6313      	str	r3, [r2, #48]	; 0x30
 8003d42:	4b18      	ldr	r3, [pc, #96]	; (8003da4 <MX_GPIO_Init+0x9c>)
 8003d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d46:	f003 0302 	and.w	r3, r3, #2
 8003d4a:	607b      	str	r3, [r7, #4]
 8003d4c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8003d4e:	2200      	movs	r2, #0
 8003d50:	2108      	movs	r1, #8
 8003d52:	4815      	ldr	r0, [pc, #84]	; (8003da8 <MX_GPIO_Init+0xa0>)
 8003d54:	f001 fb3c 	bl	80053d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8003d58:	2200      	movs	r2, #0
 8003d5a:	2101      	movs	r1, #1
 8003d5c:	4813      	ldr	r0, [pc, #76]	; (8003dac <MX_GPIO_Init+0xa4>)
 8003d5e:	f001 fb37 	bl	80053d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003d62:	2308      	movs	r3, #8
 8003d64:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d66:	2301      	movs	r3, #1
 8003d68:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d72:	f107 030c 	add.w	r3, r7, #12
 8003d76:	4619      	mov	r1, r3
 8003d78:	480b      	ldr	r0, [pc, #44]	; (8003da8 <MX_GPIO_Init+0xa0>)
 8003d7a:	f001 f97d 	bl	8005078 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d82:	2301      	movs	r3, #1
 8003d84:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d86:	2300      	movs	r3, #0
 8003d88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d8e:	f107 030c 	add.w	r3, r7, #12
 8003d92:	4619      	mov	r1, r3
 8003d94:	4805      	ldr	r0, [pc, #20]	; (8003dac <MX_GPIO_Init+0xa4>)
 8003d96:	f001 f96f 	bl	8005078 <HAL_GPIO_Init>

}
 8003d9a:	bf00      	nop
 8003d9c:	3720      	adds	r7, #32
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}
 8003da2:	bf00      	nop
 8003da4:	40023800 	.word	0x40023800
 8003da8:	40020000 	.word	0x40020000
 8003dac:	40020400 	.word	0x40020400

08003db0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003db4:	f000 fa03 	bl	80041be <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003db8:	f000 f80e 	bl	8003dd8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003dbc:	f7ff ffa4 	bl	8003d08 <MX_GPIO_Init>
  MX_DMA_Init();
 8003dc0:	f7ff ff84 	bl	8003ccc <MX_DMA_Init>
  MX_ADC1_Init();
 8003dc4:	f7fd f850 	bl	8000e68 <MX_ADC1_Init>
  MX_DAC_Init();
 8003dc8:	f7ff ff16 	bl	8003bf8 <MX_DAC_Init>
  MX_SPI1_Init();
 8003dcc:	f000 f868 	bl	8003ea0 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  alt_main();
 8003dd0:	f7fd f950 	bl	8001074 <alt_main>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003dd4:	e7fe      	b.n	8003dd4 <main+0x24>
	...

08003dd8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b094      	sub	sp, #80	; 0x50
 8003ddc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003dde:	f107 0320 	add.w	r3, r7, #32
 8003de2:	2230      	movs	r2, #48	; 0x30
 8003de4:	2100      	movs	r1, #0
 8003de6:	4618      	mov	r0, r3
 8003de8:	f002 fc16 	bl	8006618 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003dec:	f107 030c 	add.w	r3, r7, #12
 8003df0:	2200      	movs	r2, #0
 8003df2:	601a      	str	r2, [r3, #0]
 8003df4:	605a      	str	r2, [r3, #4]
 8003df6:	609a      	str	r2, [r3, #8]
 8003df8:	60da      	str	r2, [r3, #12]
 8003dfa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003dfc:	4b22      	ldr	r3, [pc, #136]	; (8003e88 <SystemClock_Config+0xb0>)
 8003dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e00:	4a21      	ldr	r2, [pc, #132]	; (8003e88 <SystemClock_Config+0xb0>)
 8003e02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e06:	6413      	str	r3, [r2, #64]	; 0x40
 8003e08:	4b1f      	ldr	r3, [pc, #124]	; (8003e88 <SystemClock_Config+0xb0>)
 8003e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e10:	60bb      	str	r3, [r7, #8]
 8003e12:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8003e14:	4b1d      	ldr	r3, [pc, #116]	; (8003e8c <SystemClock_Config+0xb4>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003e1c:	4a1b      	ldr	r2, [pc, #108]	; (8003e8c <SystemClock_Config+0xb4>)
 8003e1e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e22:	6013      	str	r3, [r2, #0]
 8003e24:	4b19      	ldr	r3, [pc, #100]	; (8003e8c <SystemClock_Config+0xb4>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003e2c:	607b      	str	r3, [r7, #4]
 8003e2e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003e30:	2302      	movs	r3, #2
 8003e32:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003e34:	2301      	movs	r3, #1
 8003e36:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003e38:	2310      	movs	r3, #16
 8003e3a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003e40:	f107 0320 	add.w	r3, r7, #32
 8003e44:	4618      	mov	r0, r3
 8003e46:	f001 fadd 	bl	8005404 <HAL_RCC_OscConfig>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d001      	beq.n	8003e54 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8003e50:	f000 f81e 	bl	8003e90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003e54:	230f      	movs	r3, #15
 8003e56:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8003e58:	2300      	movs	r3, #0
 8003e5a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003e60:	2300      	movs	r3, #0
 8003e62:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003e64:	2300      	movs	r3, #0
 8003e66:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003e68:	f107 030c 	add.w	r3, r7, #12
 8003e6c:	2100      	movs	r1, #0
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f001 fd6c 	bl	800594c <HAL_RCC_ClockConfig>
 8003e74:	4603      	mov	r3, r0
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d001      	beq.n	8003e7e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8003e7a:	f000 f809 	bl	8003e90 <Error_Handler>
  }
}
 8003e7e:	bf00      	nop
 8003e80:	3750      	adds	r7, #80	; 0x50
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}
 8003e86:	bf00      	nop
 8003e88:	40023800 	.word	0x40023800
 8003e8c:	40007000 	.word	0x40007000

08003e90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003e90:	b480      	push	{r7}
 8003e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003e94:	bf00      	nop
 8003e96:	46bd      	mov	sp, r7
 8003e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9c:	4770      	bx	lr
	...

08003ea0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8003ea4:	4b1b      	ldr	r3, [pc, #108]	; (8003f14 <MX_SPI1_Init+0x74>)
 8003ea6:	4a1c      	ldr	r2, [pc, #112]	; (8003f18 <MX_SPI1_Init+0x78>)
 8003ea8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003eaa:	4b1a      	ldr	r3, [pc, #104]	; (8003f14 <MX_SPI1_Init+0x74>)
 8003eac:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003eb0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003eb2:	4b18      	ldr	r3, [pc, #96]	; (8003f14 <MX_SPI1_Init+0x74>)
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8003eb8:	4b16      	ldr	r3, [pc, #88]	; (8003f14 <MX_SPI1_Init+0x74>)
 8003eba:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8003ebe:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003ec0:	4b14      	ldr	r3, [pc, #80]	; (8003f14 <MX_SPI1_Init+0x74>)
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8003ec6:	4b13      	ldr	r3, [pc, #76]	; (8003f14 <MX_SPI1_Init+0x74>)
 8003ec8:	2201      	movs	r2, #1
 8003eca:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003ecc:	4b11      	ldr	r3, [pc, #68]	; (8003f14 <MX_SPI1_Init+0x74>)
 8003ece:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ed2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003ed4:	4b0f      	ldr	r3, [pc, #60]	; (8003f14 <MX_SPI1_Init+0x74>)
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003eda:	4b0e      	ldr	r3, [pc, #56]	; (8003f14 <MX_SPI1_Init+0x74>)
 8003edc:	2200      	movs	r2, #0
 8003ede:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003ee0:	4b0c      	ldr	r3, [pc, #48]	; (8003f14 <MX_SPI1_Init+0x74>)
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ee6:	4b0b      	ldr	r3, [pc, #44]	; (8003f14 <MX_SPI1_Init+0x74>)
 8003ee8:	2200      	movs	r2, #0
 8003eea:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003eec:	4b09      	ldr	r3, [pc, #36]	; (8003f14 <MX_SPI1_Init+0x74>)
 8003eee:	2207      	movs	r2, #7
 8003ef0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003ef2:	4b08      	ldr	r3, [pc, #32]	; (8003f14 <MX_SPI1_Init+0x74>)
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8003ef8:	4b06      	ldr	r3, [pc, #24]	; (8003f14 <MX_SPI1_Init+0x74>)
 8003efa:	2200      	movs	r2, #0
 8003efc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003efe:	4805      	ldr	r0, [pc, #20]	; (8003f14 <MX_SPI1_Init+0x74>)
 8003f00:	f001 fed6 	bl	8005cb0 <HAL_SPI_Init>
 8003f04:	4603      	mov	r3, r0
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d001      	beq.n	8003f0e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8003f0a:	f7ff ffc1 	bl	8003e90 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003f0e:	bf00      	nop
 8003f10:	bd80      	pop	{r7, pc}
 8003f12:	bf00      	nop
 8003f14:	2000028c 	.word	0x2000028c
 8003f18:	40013000 	.word	0x40013000

08003f1c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b08a      	sub	sp, #40	; 0x28
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f24:	f107 0314 	add.w	r3, r7, #20
 8003f28:	2200      	movs	r2, #0
 8003f2a:	601a      	str	r2, [r3, #0]
 8003f2c:	605a      	str	r2, [r3, #4]
 8003f2e:	609a      	str	r2, [r3, #8]
 8003f30:	60da      	str	r2, [r3, #12]
 8003f32:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a25      	ldr	r2, [pc, #148]	; (8003fd0 <HAL_SPI_MspInit+0xb4>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d143      	bne.n	8003fc6 <HAL_SPI_MspInit+0xaa>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003f3e:	4b25      	ldr	r3, [pc, #148]	; (8003fd4 <HAL_SPI_MspInit+0xb8>)
 8003f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f42:	4a24      	ldr	r2, [pc, #144]	; (8003fd4 <HAL_SPI_MspInit+0xb8>)
 8003f44:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003f48:	6453      	str	r3, [r2, #68]	; 0x44
 8003f4a:	4b22      	ldr	r3, [pc, #136]	; (8003fd4 <HAL_SPI_MspInit+0xb8>)
 8003f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f4e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f52:	613b      	str	r3, [r7, #16]
 8003f54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f56:	4b1f      	ldr	r3, [pc, #124]	; (8003fd4 <HAL_SPI_MspInit+0xb8>)
 8003f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f5a:	4a1e      	ldr	r2, [pc, #120]	; (8003fd4 <HAL_SPI_MspInit+0xb8>)
 8003f5c:	f043 0301 	orr.w	r3, r3, #1
 8003f60:	6313      	str	r3, [r2, #48]	; 0x30
 8003f62:	4b1c      	ldr	r3, [pc, #112]	; (8003fd4 <HAL_SPI_MspInit+0xb8>)
 8003f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f66:	f003 0301 	and.w	r3, r3, #1
 8003f6a:	60fb      	str	r3, [r7, #12]
 8003f6c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f6e:	4b19      	ldr	r3, [pc, #100]	; (8003fd4 <HAL_SPI_MspInit+0xb8>)
 8003f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f72:	4a18      	ldr	r2, [pc, #96]	; (8003fd4 <HAL_SPI_MspInit+0xb8>)
 8003f74:	f043 0302 	orr.w	r3, r3, #2
 8003f78:	6313      	str	r3, [r2, #48]	; 0x30
 8003f7a:	4b16      	ldr	r3, [pc, #88]	; (8003fd4 <HAL_SPI_MspInit+0xb8>)
 8003f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f7e:	f003 0302 	and.w	r3, r3, #2
 8003f82:	60bb      	str	r3, [r7, #8]
 8003f84:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003f86:	2380      	movs	r3, #128	; 0x80
 8003f88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f8a:	2302      	movs	r3, #2
 8003f8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f92:	2303      	movs	r3, #3
 8003f94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003f96:	2305      	movs	r3, #5
 8003f98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f9a:	f107 0314 	add.w	r3, r7, #20
 8003f9e:	4619      	mov	r1, r3
 8003fa0:	480d      	ldr	r0, [pc, #52]	; (8003fd8 <HAL_SPI_MspInit+0xbc>)
 8003fa2:	f001 f869 	bl	8005078 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003fa6:	2308      	movs	r3, #8
 8003fa8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003faa:	2302      	movs	r3, #2
 8003fac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fb2:	2303      	movs	r3, #3
 8003fb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003fb6:	2305      	movs	r3, #5
 8003fb8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003fba:	f107 0314 	add.w	r3, r7, #20
 8003fbe:	4619      	mov	r1, r3
 8003fc0:	4806      	ldr	r0, [pc, #24]	; (8003fdc <HAL_SPI_MspInit+0xc0>)
 8003fc2:	f001 f859 	bl	8005078 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8003fc6:	bf00      	nop
 8003fc8:	3728      	adds	r7, #40	; 0x28
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}
 8003fce:	bf00      	nop
 8003fd0:	40013000 	.word	0x40013000
 8003fd4:	40023800 	.word	0x40023800
 8003fd8:	40020000 	.word	0x40020000
 8003fdc:	40020400 	.word	0x40020400

08003fe0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b083      	sub	sp, #12
 8003fe4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8003fe6:	4b0f      	ldr	r3, [pc, #60]	; (8004024 <HAL_MspInit+0x44>)
 8003fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fea:	4a0e      	ldr	r2, [pc, #56]	; (8004024 <HAL_MspInit+0x44>)
 8003fec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ff0:	6413      	str	r3, [r2, #64]	; 0x40
 8003ff2:	4b0c      	ldr	r3, [pc, #48]	; (8004024 <HAL_MspInit+0x44>)
 8003ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ffa:	607b      	str	r3, [r7, #4]
 8003ffc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ffe:	4b09      	ldr	r3, [pc, #36]	; (8004024 <HAL_MspInit+0x44>)
 8004000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004002:	4a08      	ldr	r2, [pc, #32]	; (8004024 <HAL_MspInit+0x44>)
 8004004:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004008:	6453      	str	r3, [r2, #68]	; 0x44
 800400a:	4b06      	ldr	r3, [pc, #24]	; (8004024 <HAL_MspInit+0x44>)
 800400c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800400e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004012:	603b      	str	r3, [r7, #0]
 8004014:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004016:	bf00      	nop
 8004018:	370c      	adds	r7, #12
 800401a:	46bd      	mov	sp, r7
 800401c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004020:	4770      	bx	lr
 8004022:	bf00      	nop
 8004024:	40023800 	.word	0x40023800

08004028 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004028:	b480      	push	{r7}
 800402a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800402c:	bf00      	nop
 800402e:	46bd      	mov	sp, r7
 8004030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004034:	4770      	bx	lr

08004036 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004036:	b480      	push	{r7}
 8004038:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800403a:	e7fe      	b.n	800403a <HardFault_Handler+0x4>

0800403c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800403c:	b480      	push	{r7}
 800403e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004040:	e7fe      	b.n	8004040 <MemManage_Handler+0x4>

08004042 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004042:	b480      	push	{r7}
 8004044:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004046:	e7fe      	b.n	8004046 <BusFault_Handler+0x4>

08004048 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004048:	b480      	push	{r7}
 800404a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800404c:	e7fe      	b.n	800404c <UsageFault_Handler+0x4>

0800404e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800404e:	b480      	push	{r7}
 8004050:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004052:	bf00      	nop
 8004054:	46bd      	mov	sp, r7
 8004056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405a:	4770      	bx	lr

0800405c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800405c:	b480      	push	{r7}
 800405e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004060:	bf00      	nop
 8004062:	46bd      	mov	sp, r7
 8004064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004068:	4770      	bx	lr

0800406a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800406a:	b480      	push	{r7}
 800406c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800406e:	bf00      	nop
 8004070:	46bd      	mov	sp, r7
 8004072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004076:	4770      	bx	lr

08004078 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800407c:	f000 f8dc 	bl	8004238 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004080:	bf00      	nop
 8004082:	bd80      	pop	{r7, pc}

08004084 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004088:	4802      	ldr	r0, [pc, #8]	; (8004094 <DMA2_Stream0_IRQHandler+0x10>)
 800408a:	f000 fdb9 	bl	8004c00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800408e:	bf00      	nop
 8004090:	bd80      	pop	{r7, pc}
 8004092:	bf00      	nop
 8004094:	200001dc 	.word	0x200001dc

08004098 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004098:	b480      	push	{r7}
 800409a:	af00      	add	r7, sp, #0
	return 1;
 800409c:	2301      	movs	r3, #1
}
 800409e:	4618      	mov	r0, r3
 80040a0:	46bd      	mov	sp, r7
 80040a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a6:	4770      	bx	lr

080040a8 <_kill>:

int _kill(int pid, int sig)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b082      	sub	sp, #8
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
 80040b0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80040b2:	f002 fa4f 	bl	8006554 <__errno>
 80040b6:	4603      	mov	r3, r0
 80040b8:	2216      	movs	r2, #22
 80040ba:	601a      	str	r2, [r3, #0]
	return -1;
 80040bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	3708      	adds	r7, #8
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd80      	pop	{r7, pc}

080040c8 <_exit>:

void _exit (int status)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b082      	sub	sp, #8
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80040d0:	f04f 31ff 	mov.w	r1, #4294967295
 80040d4:	6878      	ldr	r0, [r7, #4]
 80040d6:	f7ff ffe7 	bl	80040a8 <_kill>
	while (1) {}		/* Make sure we hang here */
 80040da:	e7fe      	b.n	80040da <_exit+0x12>

080040dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b086      	sub	sp, #24
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80040e4:	4a14      	ldr	r2, [pc, #80]	; (8004138 <_sbrk+0x5c>)
 80040e6:	4b15      	ldr	r3, [pc, #84]	; (800413c <_sbrk+0x60>)
 80040e8:	1ad3      	subs	r3, r2, r3
 80040ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80040f0:	4b13      	ldr	r3, [pc, #76]	; (8004140 <_sbrk+0x64>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d102      	bne.n	80040fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80040f8:	4b11      	ldr	r3, [pc, #68]	; (8004140 <_sbrk+0x64>)
 80040fa:	4a12      	ldr	r2, [pc, #72]	; (8004144 <_sbrk+0x68>)
 80040fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80040fe:	4b10      	ldr	r3, [pc, #64]	; (8004140 <_sbrk+0x64>)
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	4413      	add	r3, r2
 8004106:	693a      	ldr	r2, [r7, #16]
 8004108:	429a      	cmp	r2, r3
 800410a:	d207      	bcs.n	800411c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800410c:	f002 fa22 	bl	8006554 <__errno>
 8004110:	4603      	mov	r3, r0
 8004112:	220c      	movs	r2, #12
 8004114:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004116:	f04f 33ff 	mov.w	r3, #4294967295
 800411a:	e009      	b.n	8004130 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800411c:	4b08      	ldr	r3, [pc, #32]	; (8004140 <_sbrk+0x64>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004122:	4b07      	ldr	r3, [pc, #28]	; (8004140 <_sbrk+0x64>)
 8004124:	681a      	ldr	r2, [r3, #0]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	4413      	add	r3, r2
 800412a:	4a05      	ldr	r2, [pc, #20]	; (8004140 <_sbrk+0x64>)
 800412c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800412e:	68fb      	ldr	r3, [r7, #12]
}
 8004130:	4618      	mov	r0, r3
 8004132:	3718      	adds	r7, #24
 8004134:	46bd      	mov	sp, r7
 8004136:	bd80      	pop	{r7, pc}
 8004138:	20050000 	.word	0x20050000
 800413c:	00000400 	.word	0x00000400
 8004140:	200002f0 	.word	0x200002f0
 8004144:	20000310 	.word	0x20000310

08004148 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004148:	b480      	push	{r7}
 800414a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800414c:	4b06      	ldr	r3, [pc, #24]	; (8004168 <SystemInit+0x20>)
 800414e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004152:	4a05      	ldr	r2, [pc, #20]	; (8004168 <SystemInit+0x20>)
 8004154:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004158:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800415c:	bf00      	nop
 800415e:	46bd      	mov	sp, r7
 8004160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004164:	4770      	bx	lr
 8004166:	bf00      	nop
 8004168:	e000ed00 	.word	0xe000ed00

0800416c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800416c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80041a4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004170:	480d      	ldr	r0, [pc, #52]	; (80041a8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004172:	490e      	ldr	r1, [pc, #56]	; (80041ac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004174:	4a0e      	ldr	r2, [pc, #56]	; (80041b0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004176:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004178:	e002      	b.n	8004180 <LoopCopyDataInit>

0800417a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800417a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800417c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800417e:	3304      	adds	r3, #4

08004180 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004180:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004182:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004184:	d3f9      	bcc.n	800417a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004186:	4a0b      	ldr	r2, [pc, #44]	; (80041b4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004188:	4c0b      	ldr	r4, [pc, #44]	; (80041b8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800418a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800418c:	e001      	b.n	8004192 <LoopFillZerobss>

0800418e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800418e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004190:	3204      	adds	r2, #4

08004192 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004192:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004194:	d3fb      	bcc.n	800418e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004196:	f7ff ffd7 	bl	8004148 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800419a:	f002 f9e1 	bl	8006560 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800419e:	f7ff fe07 	bl	8003db0 <main>
  bx  lr    
 80041a2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80041a4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80041a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80041ac:	20000178 	.word	0x20000178
  ldr r2, =_sidata
 80041b0:	08006a70 	.word	0x08006a70
  ldr r2, =_sbss
 80041b4:	20000178 	.word	0x20000178
  ldr r4, =_ebss
 80041b8:	2000030c 	.word	0x2000030c

080041bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80041bc:	e7fe      	b.n	80041bc <ADC_IRQHandler>

080041be <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80041be:	b580      	push	{r7, lr}
 80041c0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80041c2:	2003      	movs	r0, #3
 80041c4:	f000 fbbc 	bl	8004940 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80041c8:	2000      	movs	r0, #0
 80041ca:	f000 f805 	bl	80041d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80041ce:	f7ff ff07 	bl	8003fe0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80041d2:	2300      	movs	r3, #0
}
 80041d4:	4618      	mov	r0, r3
 80041d6:	bd80      	pop	{r7, pc}

080041d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b082      	sub	sp, #8
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80041e0:	4b12      	ldr	r3, [pc, #72]	; (800422c <HAL_InitTick+0x54>)
 80041e2:	681a      	ldr	r2, [r3, #0]
 80041e4:	4b12      	ldr	r3, [pc, #72]	; (8004230 <HAL_InitTick+0x58>)
 80041e6:	781b      	ldrb	r3, [r3, #0]
 80041e8:	4619      	mov	r1, r3
 80041ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80041ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80041f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80041f6:	4618      	mov	r0, r3
 80041f8:	f000 fbd7 	bl	80049aa <HAL_SYSTICK_Config>
 80041fc:	4603      	mov	r3, r0
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d001      	beq.n	8004206 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	e00e      	b.n	8004224 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2b0f      	cmp	r3, #15
 800420a:	d80a      	bhi.n	8004222 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800420c:	2200      	movs	r2, #0
 800420e:	6879      	ldr	r1, [r7, #4]
 8004210:	f04f 30ff 	mov.w	r0, #4294967295
 8004214:	f000 fb9f 	bl	8004956 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004218:	4a06      	ldr	r2, [pc, #24]	; (8004234 <HAL_InitTick+0x5c>)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800421e:	2300      	movs	r3, #0
 8004220:	e000      	b.n	8004224 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004222:	2301      	movs	r3, #1
}
 8004224:	4618      	mov	r0, r3
 8004226:	3708      	adds	r7, #8
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}
 800422c:	20000108 	.word	0x20000108
 8004230:	20000110 	.word	0x20000110
 8004234:	2000010c 	.word	0x2000010c

08004238 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004238:	b480      	push	{r7}
 800423a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800423c:	4b06      	ldr	r3, [pc, #24]	; (8004258 <HAL_IncTick+0x20>)
 800423e:	781b      	ldrb	r3, [r3, #0]
 8004240:	461a      	mov	r2, r3
 8004242:	4b06      	ldr	r3, [pc, #24]	; (800425c <HAL_IncTick+0x24>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4413      	add	r3, r2
 8004248:	4a04      	ldr	r2, [pc, #16]	; (800425c <HAL_IncTick+0x24>)
 800424a:	6013      	str	r3, [r2, #0]
}
 800424c:	bf00      	nop
 800424e:	46bd      	mov	sp, r7
 8004250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004254:	4770      	bx	lr
 8004256:	bf00      	nop
 8004258:	20000110 	.word	0x20000110
 800425c:	200002f4 	.word	0x200002f4

08004260 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004260:	b480      	push	{r7}
 8004262:	af00      	add	r7, sp, #0
  return uwTick;
 8004264:	4b03      	ldr	r3, [pc, #12]	; (8004274 <HAL_GetTick+0x14>)
 8004266:	681b      	ldr	r3, [r3, #0]
}
 8004268:	4618      	mov	r0, r3
 800426a:	46bd      	mov	sp, r7
 800426c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004270:	4770      	bx	lr
 8004272:	bf00      	nop
 8004274:	200002f4 	.word	0x200002f4

08004278 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b084      	sub	sp, #16
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004280:	2300      	movs	r3, #0
 8004282:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d101      	bne.n	800428e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	e031      	b.n	80042f2 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004292:	2b00      	cmp	r3, #0
 8004294:	d109      	bne.n	80042aa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f7fc fe46 	bl	8000f28 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2200      	movs	r2, #0
 80042a0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2200      	movs	r2, #0
 80042a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ae:	f003 0310 	and.w	r3, r3, #16
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d116      	bne.n	80042e4 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80042ba:	4b10      	ldr	r3, [pc, #64]	; (80042fc <HAL_ADC_Init+0x84>)
 80042bc:	4013      	ands	r3, r2
 80042be:	f043 0202 	orr.w	r2, r3, #2
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	f000 f970 	bl	80045ac <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2200      	movs	r2, #0
 80042d0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d6:	f023 0303 	bic.w	r3, r3, #3
 80042da:	f043 0201 	orr.w	r2, r3, #1
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	641a      	str	r2, [r3, #64]	; 0x40
 80042e2:	e001      	b.n	80042e8 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80042e4:	2301      	movs	r3, #1
 80042e6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2200      	movs	r2, #0
 80042ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80042f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80042f2:	4618      	mov	r0, r3
 80042f4:	3710      	adds	r7, #16
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd80      	pop	{r7, pc}
 80042fa:	bf00      	nop
 80042fc:	ffffeefd 	.word	0xffffeefd

08004300 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004300:	b480      	push	{r7}
 8004302:	b085      	sub	sp, #20
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
 8004308:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800430a:	2300      	movs	r3, #0
 800430c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004314:	2b01      	cmp	r3, #1
 8004316:	d101      	bne.n	800431c <HAL_ADC_ConfigChannel+0x1c>
 8004318:	2302      	movs	r3, #2
 800431a:	e136      	b.n	800458a <HAL_ADC_ConfigChannel+0x28a>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2201      	movs	r2, #1
 8004320:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	2b09      	cmp	r3, #9
 800432a:	d93a      	bls.n	80043a2 <HAL_ADC_ConfigChannel+0xa2>
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004334:	d035      	beq.n	80043a2 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	68d9      	ldr	r1, [r3, #12]
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	b29b      	uxth	r3, r3
 8004342:	461a      	mov	r2, r3
 8004344:	4613      	mov	r3, r2
 8004346:	005b      	lsls	r3, r3, #1
 8004348:	4413      	add	r3, r2
 800434a:	3b1e      	subs	r3, #30
 800434c:	2207      	movs	r2, #7
 800434e:	fa02 f303 	lsl.w	r3, r2, r3
 8004352:	43da      	mvns	r2, r3
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	400a      	ands	r2, r1
 800435a:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a8d      	ldr	r2, [pc, #564]	; (8004598 <HAL_ADC_ConfigChannel+0x298>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d10a      	bne.n	800437c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	68d9      	ldr	r1, [r3, #12]
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	061a      	lsls	r2, r3, #24
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	430a      	orrs	r2, r1
 8004378:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800437a:	e035      	b.n	80043e8 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	68d9      	ldr	r1, [r3, #12]
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	689a      	ldr	r2, [r3, #8]
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	b29b      	uxth	r3, r3
 800438c:	4618      	mov	r0, r3
 800438e:	4603      	mov	r3, r0
 8004390:	005b      	lsls	r3, r3, #1
 8004392:	4403      	add	r3, r0
 8004394:	3b1e      	subs	r3, #30
 8004396:	409a      	lsls	r2, r3
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	430a      	orrs	r2, r1
 800439e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80043a0:	e022      	b.n	80043e8 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	6919      	ldr	r1, [r3, #16]
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	b29b      	uxth	r3, r3
 80043ae:	461a      	mov	r2, r3
 80043b0:	4613      	mov	r3, r2
 80043b2:	005b      	lsls	r3, r3, #1
 80043b4:	4413      	add	r3, r2
 80043b6:	2207      	movs	r2, #7
 80043b8:	fa02 f303 	lsl.w	r3, r2, r3
 80043bc:	43da      	mvns	r2, r3
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	400a      	ands	r2, r1
 80043c4:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	6919      	ldr	r1, [r3, #16]
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	689a      	ldr	r2, [r3, #8]
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	b29b      	uxth	r3, r3
 80043d6:	4618      	mov	r0, r3
 80043d8:	4603      	mov	r3, r0
 80043da:	005b      	lsls	r3, r3, #1
 80043dc:	4403      	add	r3, r0
 80043de:	409a      	lsls	r2, r3
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	430a      	orrs	r2, r1
 80043e6:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	2b06      	cmp	r3, #6
 80043ee:	d824      	bhi.n	800443a <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	685a      	ldr	r2, [r3, #4]
 80043fa:	4613      	mov	r3, r2
 80043fc:	009b      	lsls	r3, r3, #2
 80043fe:	4413      	add	r3, r2
 8004400:	3b05      	subs	r3, #5
 8004402:	221f      	movs	r2, #31
 8004404:	fa02 f303 	lsl.w	r3, r2, r3
 8004408:	43da      	mvns	r2, r3
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	400a      	ands	r2, r1
 8004410:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	b29b      	uxth	r3, r3
 800441e:	4618      	mov	r0, r3
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	685a      	ldr	r2, [r3, #4]
 8004424:	4613      	mov	r3, r2
 8004426:	009b      	lsls	r3, r3, #2
 8004428:	4413      	add	r3, r2
 800442a:	3b05      	subs	r3, #5
 800442c:	fa00 f203 	lsl.w	r2, r0, r3
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	430a      	orrs	r2, r1
 8004436:	635a      	str	r2, [r3, #52]	; 0x34
 8004438:	e04c      	b.n	80044d4 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	2b0c      	cmp	r3, #12
 8004440:	d824      	bhi.n	800448c <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	685a      	ldr	r2, [r3, #4]
 800444c:	4613      	mov	r3, r2
 800444e:	009b      	lsls	r3, r3, #2
 8004450:	4413      	add	r3, r2
 8004452:	3b23      	subs	r3, #35	; 0x23
 8004454:	221f      	movs	r2, #31
 8004456:	fa02 f303 	lsl.w	r3, r2, r3
 800445a:	43da      	mvns	r2, r3
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	400a      	ands	r2, r1
 8004462:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	b29b      	uxth	r3, r3
 8004470:	4618      	mov	r0, r3
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	685a      	ldr	r2, [r3, #4]
 8004476:	4613      	mov	r3, r2
 8004478:	009b      	lsls	r3, r3, #2
 800447a:	4413      	add	r3, r2
 800447c:	3b23      	subs	r3, #35	; 0x23
 800447e:	fa00 f203 	lsl.w	r2, r0, r3
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	430a      	orrs	r2, r1
 8004488:	631a      	str	r2, [r3, #48]	; 0x30
 800448a:	e023      	b.n	80044d4 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	685a      	ldr	r2, [r3, #4]
 8004496:	4613      	mov	r3, r2
 8004498:	009b      	lsls	r3, r3, #2
 800449a:	4413      	add	r3, r2
 800449c:	3b41      	subs	r3, #65	; 0x41
 800449e:	221f      	movs	r2, #31
 80044a0:	fa02 f303 	lsl.w	r3, r2, r3
 80044a4:	43da      	mvns	r2, r3
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	400a      	ands	r2, r1
 80044ac:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	b29b      	uxth	r3, r3
 80044ba:	4618      	mov	r0, r3
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	685a      	ldr	r2, [r3, #4]
 80044c0:	4613      	mov	r3, r2
 80044c2:	009b      	lsls	r3, r3, #2
 80044c4:	4413      	add	r3, r2
 80044c6:	3b41      	subs	r3, #65	; 0x41
 80044c8:	fa00 f203 	lsl.w	r2, r0, r3
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	430a      	orrs	r2, r1
 80044d2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a30      	ldr	r2, [pc, #192]	; (800459c <HAL_ADC_ConfigChannel+0x29c>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d10a      	bne.n	80044f4 <HAL_ADC_ConfigChannel+0x1f4>
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80044e6:	d105      	bne.n	80044f4 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80044e8:	4b2d      	ldr	r3, [pc, #180]	; (80045a0 <HAL_ADC_ConfigChannel+0x2a0>)
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	4a2c      	ldr	r2, [pc, #176]	; (80045a0 <HAL_ADC_ConfigChannel+0x2a0>)
 80044ee:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80044f2:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a28      	ldr	r2, [pc, #160]	; (800459c <HAL_ADC_ConfigChannel+0x29c>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d10f      	bne.n	800451e <HAL_ADC_ConfigChannel+0x21e>
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	2b12      	cmp	r3, #18
 8004504:	d10b      	bne.n	800451e <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8004506:	4b26      	ldr	r3, [pc, #152]	; (80045a0 <HAL_ADC_ConfigChannel+0x2a0>)
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	4a25      	ldr	r2, [pc, #148]	; (80045a0 <HAL_ADC_ConfigChannel+0x2a0>)
 800450c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004510:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8004512:	4b23      	ldr	r3, [pc, #140]	; (80045a0 <HAL_ADC_ConfigChannel+0x2a0>)
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	4a22      	ldr	r2, [pc, #136]	; (80045a0 <HAL_ADC_ConfigChannel+0x2a0>)
 8004518:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800451c:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a1e      	ldr	r2, [pc, #120]	; (800459c <HAL_ADC_ConfigChannel+0x29c>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d12b      	bne.n	8004580 <HAL_ADC_ConfigChannel+0x280>
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a1a      	ldr	r2, [pc, #104]	; (8004598 <HAL_ADC_ConfigChannel+0x298>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d003      	beq.n	800453a <HAL_ADC_ConfigChannel+0x23a>
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	2b11      	cmp	r3, #17
 8004538:	d122      	bne.n	8004580 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 800453a:	4b19      	ldr	r3, [pc, #100]	; (80045a0 <HAL_ADC_ConfigChannel+0x2a0>)
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	4a18      	ldr	r2, [pc, #96]	; (80045a0 <HAL_ADC_ConfigChannel+0x2a0>)
 8004540:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8004544:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8004546:	4b16      	ldr	r3, [pc, #88]	; (80045a0 <HAL_ADC_ConfigChannel+0x2a0>)
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	4a15      	ldr	r2, [pc, #84]	; (80045a0 <HAL_ADC_ConfigChannel+0x2a0>)
 800454c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004550:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a10      	ldr	r2, [pc, #64]	; (8004598 <HAL_ADC_ConfigChannel+0x298>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d111      	bne.n	8004580 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800455c:	4b11      	ldr	r3, [pc, #68]	; (80045a4 <HAL_ADC_ConfigChannel+0x2a4>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a11      	ldr	r2, [pc, #68]	; (80045a8 <HAL_ADC_ConfigChannel+0x2a8>)
 8004562:	fba2 2303 	umull	r2, r3, r2, r3
 8004566:	0c9a      	lsrs	r2, r3, #18
 8004568:	4613      	mov	r3, r2
 800456a:	009b      	lsls	r3, r3, #2
 800456c:	4413      	add	r3, r2
 800456e:	005b      	lsls	r3, r3, #1
 8004570:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8004572:	e002      	b.n	800457a <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	3b01      	subs	r3, #1
 8004578:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d1f9      	bne.n	8004574 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2200      	movs	r2, #0
 8004584:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004588:	2300      	movs	r3, #0
}
 800458a:	4618      	mov	r0, r3
 800458c:	3714      	adds	r7, #20
 800458e:	46bd      	mov	sp, r7
 8004590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004594:	4770      	bx	lr
 8004596:	bf00      	nop
 8004598:	10000012 	.word	0x10000012
 800459c:	40012000 	.word	0x40012000
 80045a0:	40012300 	.word	0x40012300
 80045a4:	20000108 	.word	0x20000108
 80045a8:	431bde83 	.word	0x431bde83

080045ac <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b083      	sub	sp, #12
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80045b4:	4b78      	ldr	r3, [pc, #480]	; (8004798 <ADC_Init+0x1ec>)
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	4a77      	ldr	r2, [pc, #476]	; (8004798 <ADC_Init+0x1ec>)
 80045ba:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80045be:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80045c0:	4b75      	ldr	r3, [pc, #468]	; (8004798 <ADC_Init+0x1ec>)
 80045c2:	685a      	ldr	r2, [r3, #4]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	4973      	ldr	r1, [pc, #460]	; (8004798 <ADC_Init+0x1ec>)
 80045ca:	4313      	orrs	r3, r2
 80045cc:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	685a      	ldr	r2, [r3, #4]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80045dc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	6859      	ldr	r1, [r3, #4]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	691b      	ldr	r3, [r3, #16]
 80045e8:	021a      	lsls	r2, r3, #8
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	430a      	orrs	r2, r1
 80045f0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	685a      	ldr	r2, [r3, #4]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004600:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	6859      	ldr	r1, [r3, #4]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	689a      	ldr	r2, [r3, #8]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	430a      	orrs	r2, r1
 8004612:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	689a      	ldr	r2, [r3, #8]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004622:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	6899      	ldr	r1, [r3, #8]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	68da      	ldr	r2, [r3, #12]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	430a      	orrs	r2, r1
 8004634:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800463a:	4a58      	ldr	r2, [pc, #352]	; (800479c <ADC_Init+0x1f0>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d022      	beq.n	8004686 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	689a      	ldr	r2, [r3, #8]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800464e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	6899      	ldr	r1, [r3, #8]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	430a      	orrs	r2, r1
 8004660:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	689a      	ldr	r2, [r3, #8]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004670:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	6899      	ldr	r1, [r3, #8]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	430a      	orrs	r2, r1
 8004682:	609a      	str	r2, [r3, #8]
 8004684:	e00f      	b.n	80046a6 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	689a      	ldr	r2, [r3, #8]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004694:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	689a      	ldr	r2, [r3, #8]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80046a4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	689a      	ldr	r2, [r3, #8]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f022 0202 	bic.w	r2, r2, #2
 80046b4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	6899      	ldr	r1, [r3, #8]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	699b      	ldr	r3, [r3, #24]
 80046c0:	005a      	lsls	r2, r3, #1
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	430a      	orrs	r2, r1
 80046c8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d01b      	beq.n	800470c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	685a      	ldr	r2, [r3, #4]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80046e2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	685a      	ldr	r2, [r3, #4]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80046f2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	6859      	ldr	r1, [r3, #4]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046fe:	3b01      	subs	r3, #1
 8004700:	035a      	lsls	r2, r3, #13
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	430a      	orrs	r2, r1
 8004708:	605a      	str	r2, [r3, #4]
 800470a:	e007      	b.n	800471c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	685a      	ldr	r2, [r3, #4]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800471a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800472a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	69db      	ldr	r3, [r3, #28]
 8004736:	3b01      	subs	r3, #1
 8004738:	051a      	lsls	r2, r3, #20
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	430a      	orrs	r2, r1
 8004740:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	689a      	ldr	r2, [r3, #8]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004750:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	6899      	ldr	r1, [r3, #8]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800475e:	025a      	lsls	r2, r3, #9
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	430a      	orrs	r2, r1
 8004766:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	689a      	ldr	r2, [r3, #8]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004776:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	6899      	ldr	r1, [r3, #8]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	695b      	ldr	r3, [r3, #20]
 8004782:	029a      	lsls	r2, r3, #10
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	430a      	orrs	r2, r1
 800478a:	609a      	str	r2, [r3, #8]
}
 800478c:	bf00      	nop
 800478e:	370c      	adds	r7, #12
 8004790:	46bd      	mov	sp, r7
 8004792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004796:	4770      	bx	lr
 8004798:	40012300 	.word	0x40012300
 800479c:	0f000001 	.word	0x0f000001

080047a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b085      	sub	sp, #20
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	f003 0307 	and.w	r3, r3, #7
 80047ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80047b0:	4b0b      	ldr	r3, [pc, #44]	; (80047e0 <__NVIC_SetPriorityGrouping+0x40>)
 80047b2:	68db      	ldr	r3, [r3, #12]
 80047b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80047b6:	68ba      	ldr	r2, [r7, #8]
 80047b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80047bc:	4013      	ands	r3, r2
 80047be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80047c8:	4b06      	ldr	r3, [pc, #24]	; (80047e4 <__NVIC_SetPriorityGrouping+0x44>)
 80047ca:	4313      	orrs	r3, r2
 80047cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80047ce:	4a04      	ldr	r2, [pc, #16]	; (80047e0 <__NVIC_SetPriorityGrouping+0x40>)
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	60d3      	str	r3, [r2, #12]
}
 80047d4:	bf00      	nop
 80047d6:	3714      	adds	r7, #20
 80047d8:	46bd      	mov	sp, r7
 80047da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047de:	4770      	bx	lr
 80047e0:	e000ed00 	.word	0xe000ed00
 80047e4:	05fa0000 	.word	0x05fa0000

080047e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80047e8:	b480      	push	{r7}
 80047ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80047ec:	4b04      	ldr	r3, [pc, #16]	; (8004800 <__NVIC_GetPriorityGrouping+0x18>)
 80047ee:	68db      	ldr	r3, [r3, #12]
 80047f0:	0a1b      	lsrs	r3, r3, #8
 80047f2:	f003 0307 	and.w	r3, r3, #7
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	46bd      	mov	sp, r7
 80047fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fe:	4770      	bx	lr
 8004800:	e000ed00 	.word	0xe000ed00

08004804 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004804:	b480      	push	{r7}
 8004806:	b083      	sub	sp, #12
 8004808:	af00      	add	r7, sp, #0
 800480a:	4603      	mov	r3, r0
 800480c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800480e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004812:	2b00      	cmp	r3, #0
 8004814:	db0b      	blt.n	800482e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004816:	79fb      	ldrb	r3, [r7, #7]
 8004818:	f003 021f 	and.w	r2, r3, #31
 800481c:	4907      	ldr	r1, [pc, #28]	; (800483c <__NVIC_EnableIRQ+0x38>)
 800481e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004822:	095b      	lsrs	r3, r3, #5
 8004824:	2001      	movs	r0, #1
 8004826:	fa00 f202 	lsl.w	r2, r0, r2
 800482a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800482e:	bf00      	nop
 8004830:	370c      	adds	r7, #12
 8004832:	46bd      	mov	sp, r7
 8004834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004838:	4770      	bx	lr
 800483a:	bf00      	nop
 800483c:	e000e100 	.word	0xe000e100

08004840 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004840:	b480      	push	{r7}
 8004842:	b083      	sub	sp, #12
 8004844:	af00      	add	r7, sp, #0
 8004846:	4603      	mov	r3, r0
 8004848:	6039      	str	r1, [r7, #0]
 800484a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800484c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004850:	2b00      	cmp	r3, #0
 8004852:	db0a      	blt.n	800486a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	b2da      	uxtb	r2, r3
 8004858:	490c      	ldr	r1, [pc, #48]	; (800488c <__NVIC_SetPriority+0x4c>)
 800485a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800485e:	0112      	lsls	r2, r2, #4
 8004860:	b2d2      	uxtb	r2, r2
 8004862:	440b      	add	r3, r1
 8004864:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004868:	e00a      	b.n	8004880 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	b2da      	uxtb	r2, r3
 800486e:	4908      	ldr	r1, [pc, #32]	; (8004890 <__NVIC_SetPriority+0x50>)
 8004870:	79fb      	ldrb	r3, [r7, #7]
 8004872:	f003 030f 	and.w	r3, r3, #15
 8004876:	3b04      	subs	r3, #4
 8004878:	0112      	lsls	r2, r2, #4
 800487a:	b2d2      	uxtb	r2, r2
 800487c:	440b      	add	r3, r1
 800487e:	761a      	strb	r2, [r3, #24]
}
 8004880:	bf00      	nop
 8004882:	370c      	adds	r7, #12
 8004884:	46bd      	mov	sp, r7
 8004886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488a:	4770      	bx	lr
 800488c:	e000e100 	.word	0xe000e100
 8004890:	e000ed00 	.word	0xe000ed00

08004894 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004894:	b480      	push	{r7}
 8004896:	b089      	sub	sp, #36	; 0x24
 8004898:	af00      	add	r7, sp, #0
 800489a:	60f8      	str	r0, [r7, #12]
 800489c:	60b9      	str	r1, [r7, #8]
 800489e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	f003 0307 	and.w	r3, r3, #7
 80048a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80048a8:	69fb      	ldr	r3, [r7, #28]
 80048aa:	f1c3 0307 	rsb	r3, r3, #7
 80048ae:	2b04      	cmp	r3, #4
 80048b0:	bf28      	it	cs
 80048b2:	2304      	movcs	r3, #4
 80048b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80048b6:	69fb      	ldr	r3, [r7, #28]
 80048b8:	3304      	adds	r3, #4
 80048ba:	2b06      	cmp	r3, #6
 80048bc:	d902      	bls.n	80048c4 <NVIC_EncodePriority+0x30>
 80048be:	69fb      	ldr	r3, [r7, #28]
 80048c0:	3b03      	subs	r3, #3
 80048c2:	e000      	b.n	80048c6 <NVIC_EncodePriority+0x32>
 80048c4:	2300      	movs	r3, #0
 80048c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80048c8:	f04f 32ff 	mov.w	r2, #4294967295
 80048cc:	69bb      	ldr	r3, [r7, #24]
 80048ce:	fa02 f303 	lsl.w	r3, r2, r3
 80048d2:	43da      	mvns	r2, r3
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	401a      	ands	r2, r3
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80048dc:	f04f 31ff 	mov.w	r1, #4294967295
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	fa01 f303 	lsl.w	r3, r1, r3
 80048e6:	43d9      	mvns	r1, r3
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80048ec:	4313      	orrs	r3, r2
         );
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	3724      	adds	r7, #36	; 0x24
 80048f2:	46bd      	mov	sp, r7
 80048f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f8:	4770      	bx	lr
	...

080048fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b082      	sub	sp, #8
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	3b01      	subs	r3, #1
 8004908:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800490c:	d301      	bcc.n	8004912 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800490e:	2301      	movs	r3, #1
 8004910:	e00f      	b.n	8004932 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004912:	4a0a      	ldr	r2, [pc, #40]	; (800493c <SysTick_Config+0x40>)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	3b01      	subs	r3, #1
 8004918:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800491a:	210f      	movs	r1, #15
 800491c:	f04f 30ff 	mov.w	r0, #4294967295
 8004920:	f7ff ff8e 	bl	8004840 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004924:	4b05      	ldr	r3, [pc, #20]	; (800493c <SysTick_Config+0x40>)
 8004926:	2200      	movs	r2, #0
 8004928:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800492a:	4b04      	ldr	r3, [pc, #16]	; (800493c <SysTick_Config+0x40>)
 800492c:	2207      	movs	r2, #7
 800492e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004930:	2300      	movs	r3, #0
}
 8004932:	4618      	mov	r0, r3
 8004934:	3708      	adds	r7, #8
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}
 800493a:	bf00      	nop
 800493c:	e000e010 	.word	0xe000e010

08004940 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b082      	sub	sp, #8
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004948:	6878      	ldr	r0, [r7, #4]
 800494a:	f7ff ff29 	bl	80047a0 <__NVIC_SetPriorityGrouping>
}
 800494e:	bf00      	nop
 8004950:	3708      	adds	r7, #8
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}

08004956 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004956:	b580      	push	{r7, lr}
 8004958:	b086      	sub	sp, #24
 800495a:	af00      	add	r7, sp, #0
 800495c:	4603      	mov	r3, r0
 800495e:	60b9      	str	r1, [r7, #8]
 8004960:	607a      	str	r2, [r7, #4]
 8004962:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004964:	2300      	movs	r3, #0
 8004966:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004968:	f7ff ff3e 	bl	80047e8 <__NVIC_GetPriorityGrouping>
 800496c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800496e:	687a      	ldr	r2, [r7, #4]
 8004970:	68b9      	ldr	r1, [r7, #8]
 8004972:	6978      	ldr	r0, [r7, #20]
 8004974:	f7ff ff8e 	bl	8004894 <NVIC_EncodePriority>
 8004978:	4602      	mov	r2, r0
 800497a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800497e:	4611      	mov	r1, r2
 8004980:	4618      	mov	r0, r3
 8004982:	f7ff ff5d 	bl	8004840 <__NVIC_SetPriority>
}
 8004986:	bf00      	nop
 8004988:	3718      	adds	r7, #24
 800498a:	46bd      	mov	sp, r7
 800498c:	bd80      	pop	{r7, pc}

0800498e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800498e:	b580      	push	{r7, lr}
 8004990:	b082      	sub	sp, #8
 8004992:	af00      	add	r7, sp, #0
 8004994:	4603      	mov	r3, r0
 8004996:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004998:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800499c:	4618      	mov	r0, r3
 800499e:	f7ff ff31 	bl	8004804 <__NVIC_EnableIRQ>
}
 80049a2:	bf00      	nop
 80049a4:	3708      	adds	r7, #8
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bd80      	pop	{r7, pc}

080049aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80049aa:	b580      	push	{r7, lr}
 80049ac:	b082      	sub	sp, #8
 80049ae:	af00      	add	r7, sp, #0
 80049b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80049b2:	6878      	ldr	r0, [r7, #4]
 80049b4:	f7ff ffa2 	bl	80048fc <SysTick_Config>
 80049b8:	4603      	mov	r3, r0
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	3708      	adds	r7, #8
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}

080049c2 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80049c2:	b580      	push	{r7, lr}
 80049c4:	b082      	sub	sp, #8
 80049c6:	af00      	add	r7, sp, #0
 80049c8:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d101      	bne.n	80049d4 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80049d0:	2301      	movs	r3, #1
 80049d2:	e014      	b.n	80049fe <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	791b      	ldrb	r3, [r3, #4]
 80049d8:	b2db      	uxtb	r3, r3
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d105      	bne.n	80049ea <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2200      	movs	r2, #0
 80049e2:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80049e4:	6878      	ldr	r0, [r7, #4]
 80049e6:	f7ff f931 	bl	8003c4c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2202      	movs	r2, #2
 80049ee:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2200      	movs	r2, #0
 80049f4:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2201      	movs	r2, #1
 80049fa:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80049fc:	2300      	movs	r3, #0
}
 80049fe:	4618      	mov	r0, r3
 8004a00:	3708      	adds	r7, #8
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bd80      	pop	{r7, pc}

08004a06 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004a06:	b480      	push	{r7}
 8004a08:	b087      	sub	sp, #28
 8004a0a:	af00      	add	r7, sp, #0
 8004a0c:	60f8      	str	r0, [r7, #12]
 8004a0e:	60b9      	str	r1, [r7, #8]
 8004a10:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	795b      	ldrb	r3, [r3, #5]
 8004a16:	2b01      	cmp	r3, #1
 8004a18:	d101      	bne.n	8004a1e <HAL_DAC_ConfigChannel+0x18>
 8004a1a:	2302      	movs	r3, #2
 8004a1c:	e03c      	b.n	8004a98 <HAL_DAC_ConfigChannel+0x92>
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	2201      	movs	r2, #1
 8004a22:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	2202      	movs	r2, #2
 8004a28:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	f003 0310 	and.w	r3, r3, #16
 8004a38:	f640 72fe 	movw	r2, #4094	; 0xffe
 8004a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a40:	43db      	mvns	r3, r3
 8004a42:	697a      	ldr	r2, [r7, #20]
 8004a44:	4013      	ands	r3, r2
 8004a46:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	681a      	ldr	r2, [r3, #0]
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	4313      	orrs	r3, r2
 8004a52:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	f003 0310 	and.w	r3, r3, #16
 8004a5a:	693a      	ldr	r2, [r7, #16]
 8004a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a60:	697a      	ldr	r2, [r7, #20]
 8004a62:	4313      	orrs	r3, r2
 8004a64:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	697a      	ldr	r2, [r7, #20]
 8004a6c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	6819      	ldr	r1, [r3, #0]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	f003 0310 	and.w	r3, r3, #16
 8004a7a:	22c0      	movs	r2, #192	; 0xc0
 8004a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a80:	43da      	mvns	r2, r3
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	400a      	ands	r2, r1
 8004a88:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	2201      	movs	r2, #1
 8004a8e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	2200      	movs	r2, #0
 8004a94:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004a96:	2300      	movs	r3, #0
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	371c      	adds	r7, #28
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa2:	4770      	bx	lr

08004aa4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b086      	sub	sp, #24
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004aac:	2300      	movs	r3, #0
 8004aae:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004ab0:	f7ff fbd6 	bl	8004260 <HAL_GetTick>
 8004ab4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d101      	bne.n	8004ac0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004abc:	2301      	movs	r3, #1
 8004abe:	e099      	b.n	8004bf4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2202      	movs	r2, #2
 8004ac4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2200      	movs	r2, #0
 8004acc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	681a      	ldr	r2, [r3, #0]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f022 0201 	bic.w	r2, r2, #1
 8004ade:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004ae0:	e00f      	b.n	8004b02 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004ae2:	f7ff fbbd 	bl	8004260 <HAL_GetTick>
 8004ae6:	4602      	mov	r2, r0
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	1ad3      	subs	r3, r2, r3
 8004aec:	2b05      	cmp	r3, #5
 8004aee:	d908      	bls.n	8004b02 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2220      	movs	r2, #32
 8004af4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2203      	movs	r2, #3
 8004afa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004afe:	2303      	movs	r3, #3
 8004b00:	e078      	b.n	8004bf4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f003 0301 	and.w	r3, r3, #1
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d1e8      	bne.n	8004ae2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004b18:	697a      	ldr	r2, [r7, #20]
 8004b1a:	4b38      	ldr	r3, [pc, #224]	; (8004bfc <HAL_DMA_Init+0x158>)
 8004b1c:	4013      	ands	r3, r2
 8004b1e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	685a      	ldr	r2, [r3, #4]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	689b      	ldr	r3, [r3, #8]
 8004b28:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004b2e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	691b      	ldr	r3, [r3, #16]
 8004b34:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b3a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	699b      	ldr	r3, [r3, #24]
 8004b40:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b46:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6a1b      	ldr	r3, [r3, #32]
 8004b4c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004b4e:	697a      	ldr	r2, [r7, #20]
 8004b50:	4313      	orrs	r3, r2
 8004b52:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b58:	2b04      	cmp	r3, #4
 8004b5a:	d107      	bne.n	8004b6c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b64:	4313      	orrs	r3, r2
 8004b66:	697a      	ldr	r2, [r7, #20]
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	697a      	ldr	r2, [r7, #20]
 8004b72:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	695b      	ldr	r3, [r3, #20]
 8004b7a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	f023 0307 	bic.w	r3, r3, #7
 8004b82:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b88:	697a      	ldr	r2, [r7, #20]
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b92:	2b04      	cmp	r3, #4
 8004b94:	d117      	bne.n	8004bc6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b9a:	697a      	ldr	r2, [r7, #20]
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d00e      	beq.n	8004bc6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004ba8:	6878      	ldr	r0, [r7, #4]
 8004baa:	f000 f9e9 	bl	8004f80 <DMA_CheckFifoParam>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d008      	beq.n	8004bc6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2240      	movs	r2, #64	; 0x40
 8004bb8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2201      	movs	r2, #1
 8004bbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	e016      	b.n	8004bf4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	697a      	ldr	r2, [r7, #20]
 8004bcc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	f000 f9a0 	bl	8004f14 <DMA_CalcBaseAndBitshift>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bdc:	223f      	movs	r2, #63	; 0x3f
 8004bde:	409a      	lsls	r2, r3
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2200      	movs	r2, #0
 8004be8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2201      	movs	r2, #1
 8004bee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004bf2:	2300      	movs	r3, #0
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	3718      	adds	r7, #24
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bd80      	pop	{r7, pc}
 8004bfc:	f010803f 	.word	0xf010803f

08004c00 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b086      	sub	sp, #24
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8004c08:	2300      	movs	r3, #0
 8004c0a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8004c0c:	4b8e      	ldr	r3, [pc, #568]	; (8004e48 <HAL_DMA_IRQHandler+0x248>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a8e      	ldr	r2, [pc, #568]	; (8004e4c <HAL_DMA_IRQHandler+0x24c>)
 8004c12:	fba2 2303 	umull	r2, r3, r2, r3
 8004c16:	0a9b      	lsrs	r3, r3, #10
 8004c18:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c1e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004c20:	693b      	ldr	r3, [r7, #16]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c2a:	2208      	movs	r2, #8
 8004c2c:	409a      	lsls	r2, r3
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	4013      	ands	r3, r2
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d01a      	beq.n	8004c6c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f003 0304 	and.w	r3, r3, #4
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d013      	beq.n	8004c6c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	681a      	ldr	r2, [r3, #0]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f022 0204 	bic.w	r2, r2, #4
 8004c52:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c58:	2208      	movs	r2, #8
 8004c5a:	409a      	lsls	r2, r3
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c64:	f043 0201 	orr.w	r2, r3, #1
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c70:	2201      	movs	r2, #1
 8004c72:	409a      	lsls	r2, r3
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	4013      	ands	r3, r2
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d012      	beq.n	8004ca2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	695b      	ldr	r3, [r3, #20]
 8004c82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d00b      	beq.n	8004ca2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c8e:	2201      	movs	r2, #1
 8004c90:	409a      	lsls	r2, r3
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c9a:	f043 0202 	orr.w	r2, r3, #2
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ca6:	2204      	movs	r2, #4
 8004ca8:	409a      	lsls	r2, r3
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	4013      	ands	r3, r2
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d012      	beq.n	8004cd8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f003 0302 	and.w	r3, r3, #2
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d00b      	beq.n	8004cd8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cc4:	2204      	movs	r2, #4
 8004cc6:	409a      	lsls	r2, r3
 8004cc8:	693b      	ldr	r3, [r7, #16]
 8004cca:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cd0:	f043 0204 	orr.w	r2, r3, #4
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cdc:	2210      	movs	r2, #16
 8004cde:	409a      	lsls	r2, r3
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	4013      	ands	r3, r2
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d043      	beq.n	8004d70 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f003 0308 	and.w	r3, r3, #8
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d03c      	beq.n	8004d70 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cfa:	2210      	movs	r2, #16
 8004cfc:	409a      	lsls	r2, r3
 8004cfe:	693b      	ldr	r3, [r7, #16]
 8004d00:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d018      	beq.n	8004d42 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d108      	bne.n	8004d30 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d024      	beq.n	8004d70 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	4798      	blx	r3
 8004d2e:	e01f      	b.n	8004d70 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d01b      	beq.n	8004d70 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d3c:	6878      	ldr	r0, [r7, #4]
 8004d3e:	4798      	blx	r3
 8004d40:	e016      	b.n	8004d70 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d107      	bne.n	8004d60 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	681a      	ldr	r2, [r3, #0]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f022 0208 	bic.w	r2, r2, #8
 8004d5e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d003      	beq.n	8004d70 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d6c:	6878      	ldr	r0, [r7, #4]
 8004d6e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d74:	2220      	movs	r2, #32
 8004d76:	409a      	lsls	r2, r3
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	4013      	ands	r3, r2
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	f000 808f 	beq.w	8004ea0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f003 0310 	and.w	r3, r3, #16
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	f000 8087 	beq.w	8004ea0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d96:	2220      	movs	r2, #32
 8004d98:	409a      	lsls	r2, r3
 8004d9a:	693b      	ldr	r3, [r7, #16]
 8004d9c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004da4:	b2db      	uxtb	r3, r3
 8004da6:	2b05      	cmp	r3, #5
 8004da8:	d136      	bne.n	8004e18 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	681a      	ldr	r2, [r3, #0]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f022 0216 	bic.w	r2, r2, #22
 8004db8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	695a      	ldr	r2, [r3, #20]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004dc8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d103      	bne.n	8004dda <HAL_DMA_IRQHandler+0x1da>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d007      	beq.n	8004dea <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	681a      	ldr	r2, [r3, #0]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f022 0208 	bic.w	r2, r2, #8
 8004de8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dee:	223f      	movs	r2, #63	; 0x3f
 8004df0:	409a      	lsls	r2, r3
 8004df2:	693b      	ldr	r3, [r7, #16]
 8004df4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2201      	movs	r2, #1
 8004dfa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2200      	movs	r2, #0
 8004e02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d07e      	beq.n	8004f0c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	4798      	blx	r3
        }
        return;
 8004e16:	e079      	b.n	8004f0c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d01d      	beq.n	8004e62 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d10d      	bne.n	8004e50 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d031      	beq.n	8004ea0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e40:	6878      	ldr	r0, [r7, #4]
 8004e42:	4798      	blx	r3
 8004e44:	e02c      	b.n	8004ea0 <HAL_DMA_IRQHandler+0x2a0>
 8004e46:	bf00      	nop
 8004e48:	20000108 	.word	0x20000108
 8004e4c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d023      	beq.n	8004ea0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e5c:	6878      	ldr	r0, [r7, #4]
 8004e5e:	4798      	blx	r3
 8004e60:	e01e      	b.n	8004ea0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d10f      	bne.n	8004e90 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	681a      	ldr	r2, [r3, #0]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f022 0210 	bic.w	r2, r2, #16
 8004e7e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2201      	movs	r2, #1
 8004e84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d003      	beq.n	8004ea0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e9c:	6878      	ldr	r0, [r7, #4]
 8004e9e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d032      	beq.n	8004f0e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eac:	f003 0301 	and.w	r3, r3, #1
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d022      	beq.n	8004efa <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2205      	movs	r2, #5
 8004eb8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	681a      	ldr	r2, [r3, #0]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f022 0201 	bic.w	r2, r2, #1
 8004eca:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	3301      	adds	r3, #1
 8004ed0:	60bb      	str	r3, [r7, #8]
 8004ed2:	697a      	ldr	r2, [r7, #20]
 8004ed4:	429a      	cmp	r2, r3
 8004ed6:	d307      	bcc.n	8004ee8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f003 0301 	and.w	r3, r3, #1
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d1f2      	bne.n	8004ecc <HAL_DMA_IRQHandler+0x2cc>
 8004ee6:	e000      	b.n	8004eea <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004ee8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2201      	movs	r2, #1
 8004eee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d005      	beq.n	8004f0e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f06:	6878      	ldr	r0, [r7, #4]
 8004f08:	4798      	blx	r3
 8004f0a:	e000      	b.n	8004f0e <HAL_DMA_IRQHandler+0x30e>
        return;
 8004f0c:	bf00      	nop
    }
  }
}
 8004f0e:	3718      	adds	r7, #24
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd80      	pop	{r7, pc}

08004f14 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004f14:	b480      	push	{r7}
 8004f16:	b085      	sub	sp, #20
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	b2db      	uxtb	r3, r3
 8004f22:	3b10      	subs	r3, #16
 8004f24:	4a13      	ldr	r2, [pc, #76]	; (8004f74 <DMA_CalcBaseAndBitshift+0x60>)
 8004f26:	fba2 2303 	umull	r2, r3, r2, r3
 8004f2a:	091b      	lsrs	r3, r3, #4
 8004f2c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004f2e:	4a12      	ldr	r2, [pc, #72]	; (8004f78 <DMA_CalcBaseAndBitshift+0x64>)
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	4413      	add	r3, r2
 8004f34:	781b      	ldrb	r3, [r3, #0]
 8004f36:	461a      	mov	r2, r3
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	2b03      	cmp	r3, #3
 8004f40:	d908      	bls.n	8004f54 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	461a      	mov	r2, r3
 8004f48:	4b0c      	ldr	r3, [pc, #48]	; (8004f7c <DMA_CalcBaseAndBitshift+0x68>)
 8004f4a:	4013      	ands	r3, r2
 8004f4c:	1d1a      	adds	r2, r3, #4
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	659a      	str	r2, [r3, #88]	; 0x58
 8004f52:	e006      	b.n	8004f62 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	461a      	mov	r2, r3
 8004f5a:	4b08      	ldr	r3, [pc, #32]	; (8004f7c <DMA_CalcBaseAndBitshift+0x68>)
 8004f5c:	4013      	ands	r3, r2
 8004f5e:	687a      	ldr	r2, [r7, #4]
 8004f60:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004f66:	4618      	mov	r0, r3
 8004f68:	3714      	adds	r7, #20
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f70:	4770      	bx	lr
 8004f72:	bf00      	nop
 8004f74:	aaaaaaab 	.word	0xaaaaaaab
 8004f78:	08006a0c 	.word	0x08006a0c
 8004f7c:	fffffc00 	.word	0xfffffc00

08004f80 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b085      	sub	sp, #20
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f88:	2300      	movs	r3, #0
 8004f8a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f90:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	699b      	ldr	r3, [r3, #24]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d11f      	bne.n	8004fda <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	2b03      	cmp	r3, #3
 8004f9e:	d856      	bhi.n	800504e <DMA_CheckFifoParam+0xce>
 8004fa0:	a201      	add	r2, pc, #4	; (adr r2, 8004fa8 <DMA_CheckFifoParam+0x28>)
 8004fa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fa6:	bf00      	nop
 8004fa8:	08004fb9 	.word	0x08004fb9
 8004fac:	08004fcb 	.word	0x08004fcb
 8004fb0:	08004fb9 	.word	0x08004fb9
 8004fb4:	0800504f 	.word	0x0800504f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fbc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d046      	beq.n	8005052 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004fc8:	e043      	b.n	8005052 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fce:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004fd2:	d140      	bne.n	8005056 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004fd8:	e03d      	b.n	8005056 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	699b      	ldr	r3, [r3, #24]
 8004fde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fe2:	d121      	bne.n	8005028 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	2b03      	cmp	r3, #3
 8004fe8:	d837      	bhi.n	800505a <DMA_CheckFifoParam+0xda>
 8004fea:	a201      	add	r2, pc, #4	; (adr r2, 8004ff0 <DMA_CheckFifoParam+0x70>)
 8004fec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ff0:	08005001 	.word	0x08005001
 8004ff4:	08005007 	.word	0x08005007
 8004ff8:	08005001 	.word	0x08005001
 8004ffc:	08005019 	.word	0x08005019
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005000:	2301      	movs	r3, #1
 8005002:	73fb      	strb	r3, [r7, #15]
      break;
 8005004:	e030      	b.n	8005068 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800500a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800500e:	2b00      	cmp	r3, #0
 8005010:	d025      	beq.n	800505e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005016:	e022      	b.n	800505e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800501c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005020:	d11f      	bne.n	8005062 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005022:	2301      	movs	r3, #1
 8005024:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005026:	e01c      	b.n	8005062 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	2b02      	cmp	r3, #2
 800502c:	d903      	bls.n	8005036 <DMA_CheckFifoParam+0xb6>
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	2b03      	cmp	r3, #3
 8005032:	d003      	beq.n	800503c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005034:	e018      	b.n	8005068 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005036:	2301      	movs	r3, #1
 8005038:	73fb      	strb	r3, [r7, #15]
      break;
 800503a:	e015      	b.n	8005068 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005040:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005044:	2b00      	cmp	r3, #0
 8005046:	d00e      	beq.n	8005066 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005048:	2301      	movs	r3, #1
 800504a:	73fb      	strb	r3, [r7, #15]
      break;
 800504c:	e00b      	b.n	8005066 <DMA_CheckFifoParam+0xe6>
      break;
 800504e:	bf00      	nop
 8005050:	e00a      	b.n	8005068 <DMA_CheckFifoParam+0xe8>
      break;
 8005052:	bf00      	nop
 8005054:	e008      	b.n	8005068 <DMA_CheckFifoParam+0xe8>
      break;
 8005056:	bf00      	nop
 8005058:	e006      	b.n	8005068 <DMA_CheckFifoParam+0xe8>
      break;
 800505a:	bf00      	nop
 800505c:	e004      	b.n	8005068 <DMA_CheckFifoParam+0xe8>
      break;
 800505e:	bf00      	nop
 8005060:	e002      	b.n	8005068 <DMA_CheckFifoParam+0xe8>
      break;   
 8005062:	bf00      	nop
 8005064:	e000      	b.n	8005068 <DMA_CheckFifoParam+0xe8>
      break;
 8005066:	bf00      	nop
    }
  } 
  
  return status; 
 8005068:	7bfb      	ldrb	r3, [r7, #15]
}
 800506a:	4618      	mov	r0, r3
 800506c:	3714      	adds	r7, #20
 800506e:	46bd      	mov	sp, r7
 8005070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005074:	4770      	bx	lr
 8005076:	bf00      	nop

08005078 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005078:	b480      	push	{r7}
 800507a:	b089      	sub	sp, #36	; 0x24
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
 8005080:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8005082:	2300      	movs	r3, #0
 8005084:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8005086:	2300      	movs	r3, #0
 8005088:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800508a:	2300      	movs	r3, #0
 800508c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800508e:	2300      	movs	r3, #0
 8005090:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8005092:	2300      	movs	r3, #0
 8005094:	61fb      	str	r3, [r7, #28]
 8005096:	e175      	b.n	8005384 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005098:	2201      	movs	r2, #1
 800509a:	69fb      	ldr	r3, [r7, #28]
 800509c:	fa02 f303 	lsl.w	r3, r2, r3
 80050a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	697a      	ldr	r2, [r7, #20]
 80050a8:	4013      	ands	r3, r2
 80050aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80050ac:	693a      	ldr	r2, [r7, #16]
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	429a      	cmp	r2, r3
 80050b2:	f040 8164 	bne.w	800537e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	f003 0303 	and.w	r3, r3, #3
 80050be:	2b01      	cmp	r3, #1
 80050c0:	d005      	beq.n	80050ce <HAL_GPIO_Init+0x56>
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	f003 0303 	and.w	r3, r3, #3
 80050ca:	2b02      	cmp	r3, #2
 80050cc:	d130      	bne.n	8005130 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	689b      	ldr	r3, [r3, #8]
 80050d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80050d4:	69fb      	ldr	r3, [r7, #28]
 80050d6:	005b      	lsls	r3, r3, #1
 80050d8:	2203      	movs	r2, #3
 80050da:	fa02 f303 	lsl.w	r3, r2, r3
 80050de:	43db      	mvns	r3, r3
 80050e0:	69ba      	ldr	r2, [r7, #24]
 80050e2:	4013      	ands	r3, r2
 80050e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	68da      	ldr	r2, [r3, #12]
 80050ea:	69fb      	ldr	r3, [r7, #28]
 80050ec:	005b      	lsls	r3, r3, #1
 80050ee:	fa02 f303 	lsl.w	r3, r2, r3
 80050f2:	69ba      	ldr	r2, [r7, #24]
 80050f4:	4313      	orrs	r3, r2
 80050f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	69ba      	ldr	r2, [r7, #24]
 80050fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005104:	2201      	movs	r2, #1
 8005106:	69fb      	ldr	r3, [r7, #28]
 8005108:	fa02 f303 	lsl.w	r3, r2, r3
 800510c:	43db      	mvns	r3, r3
 800510e:	69ba      	ldr	r2, [r7, #24]
 8005110:	4013      	ands	r3, r2
 8005112:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	685b      	ldr	r3, [r3, #4]
 8005118:	091b      	lsrs	r3, r3, #4
 800511a:	f003 0201 	and.w	r2, r3, #1
 800511e:	69fb      	ldr	r3, [r7, #28]
 8005120:	fa02 f303 	lsl.w	r3, r2, r3
 8005124:	69ba      	ldr	r2, [r7, #24]
 8005126:	4313      	orrs	r3, r2
 8005128:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	69ba      	ldr	r2, [r7, #24]
 800512e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	f003 0303 	and.w	r3, r3, #3
 8005138:	2b03      	cmp	r3, #3
 800513a:	d017      	beq.n	800516c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	68db      	ldr	r3, [r3, #12]
 8005140:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8005142:	69fb      	ldr	r3, [r7, #28]
 8005144:	005b      	lsls	r3, r3, #1
 8005146:	2203      	movs	r2, #3
 8005148:	fa02 f303 	lsl.w	r3, r2, r3
 800514c:	43db      	mvns	r3, r3
 800514e:	69ba      	ldr	r2, [r7, #24]
 8005150:	4013      	ands	r3, r2
 8005152:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	689a      	ldr	r2, [r3, #8]
 8005158:	69fb      	ldr	r3, [r7, #28]
 800515a:	005b      	lsls	r3, r3, #1
 800515c:	fa02 f303 	lsl.w	r3, r2, r3
 8005160:	69ba      	ldr	r2, [r7, #24]
 8005162:	4313      	orrs	r3, r2
 8005164:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	69ba      	ldr	r2, [r7, #24]
 800516a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	f003 0303 	and.w	r3, r3, #3
 8005174:	2b02      	cmp	r3, #2
 8005176:	d123      	bne.n	80051c0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8005178:	69fb      	ldr	r3, [r7, #28]
 800517a:	08da      	lsrs	r2, r3, #3
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	3208      	adds	r2, #8
 8005180:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005184:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005186:	69fb      	ldr	r3, [r7, #28]
 8005188:	f003 0307 	and.w	r3, r3, #7
 800518c:	009b      	lsls	r3, r3, #2
 800518e:	220f      	movs	r2, #15
 8005190:	fa02 f303 	lsl.w	r3, r2, r3
 8005194:	43db      	mvns	r3, r3
 8005196:	69ba      	ldr	r2, [r7, #24]
 8005198:	4013      	ands	r3, r2
 800519a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	691a      	ldr	r2, [r3, #16]
 80051a0:	69fb      	ldr	r3, [r7, #28]
 80051a2:	f003 0307 	and.w	r3, r3, #7
 80051a6:	009b      	lsls	r3, r3, #2
 80051a8:	fa02 f303 	lsl.w	r3, r2, r3
 80051ac:	69ba      	ldr	r2, [r7, #24]
 80051ae:	4313      	orrs	r3, r2
 80051b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80051b2:	69fb      	ldr	r3, [r7, #28]
 80051b4:	08da      	lsrs	r2, r3, #3
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	3208      	adds	r2, #8
 80051ba:	69b9      	ldr	r1, [r7, #24]
 80051bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80051c6:	69fb      	ldr	r3, [r7, #28]
 80051c8:	005b      	lsls	r3, r3, #1
 80051ca:	2203      	movs	r2, #3
 80051cc:	fa02 f303 	lsl.w	r3, r2, r3
 80051d0:	43db      	mvns	r3, r3
 80051d2:	69ba      	ldr	r2, [r7, #24]
 80051d4:	4013      	ands	r3, r2
 80051d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	f003 0203 	and.w	r2, r3, #3
 80051e0:	69fb      	ldr	r3, [r7, #28]
 80051e2:	005b      	lsls	r3, r3, #1
 80051e4:	fa02 f303 	lsl.w	r3, r2, r3
 80051e8:	69ba      	ldr	r2, [r7, #24]
 80051ea:	4313      	orrs	r3, r2
 80051ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	69ba      	ldr	r2, [r7, #24]
 80051f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	f000 80be 	beq.w	800537e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005202:	4b66      	ldr	r3, [pc, #408]	; (800539c <HAL_GPIO_Init+0x324>)
 8005204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005206:	4a65      	ldr	r2, [pc, #404]	; (800539c <HAL_GPIO_Init+0x324>)
 8005208:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800520c:	6453      	str	r3, [r2, #68]	; 0x44
 800520e:	4b63      	ldr	r3, [pc, #396]	; (800539c <HAL_GPIO_Init+0x324>)
 8005210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005212:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005216:	60fb      	str	r3, [r7, #12]
 8005218:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800521a:	4a61      	ldr	r2, [pc, #388]	; (80053a0 <HAL_GPIO_Init+0x328>)
 800521c:	69fb      	ldr	r3, [r7, #28]
 800521e:	089b      	lsrs	r3, r3, #2
 8005220:	3302      	adds	r3, #2
 8005222:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005226:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005228:	69fb      	ldr	r3, [r7, #28]
 800522a:	f003 0303 	and.w	r3, r3, #3
 800522e:	009b      	lsls	r3, r3, #2
 8005230:	220f      	movs	r2, #15
 8005232:	fa02 f303 	lsl.w	r3, r2, r3
 8005236:	43db      	mvns	r3, r3
 8005238:	69ba      	ldr	r2, [r7, #24]
 800523a:	4013      	ands	r3, r2
 800523c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	4a58      	ldr	r2, [pc, #352]	; (80053a4 <HAL_GPIO_Init+0x32c>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d037      	beq.n	80052b6 <HAL_GPIO_Init+0x23e>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	4a57      	ldr	r2, [pc, #348]	; (80053a8 <HAL_GPIO_Init+0x330>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d031      	beq.n	80052b2 <HAL_GPIO_Init+0x23a>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	4a56      	ldr	r2, [pc, #344]	; (80053ac <HAL_GPIO_Init+0x334>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d02b      	beq.n	80052ae <HAL_GPIO_Init+0x236>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	4a55      	ldr	r2, [pc, #340]	; (80053b0 <HAL_GPIO_Init+0x338>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d025      	beq.n	80052aa <HAL_GPIO_Init+0x232>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	4a54      	ldr	r2, [pc, #336]	; (80053b4 <HAL_GPIO_Init+0x33c>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d01f      	beq.n	80052a6 <HAL_GPIO_Init+0x22e>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	4a53      	ldr	r2, [pc, #332]	; (80053b8 <HAL_GPIO_Init+0x340>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d019      	beq.n	80052a2 <HAL_GPIO_Init+0x22a>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	4a52      	ldr	r2, [pc, #328]	; (80053bc <HAL_GPIO_Init+0x344>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d013      	beq.n	800529e <HAL_GPIO_Init+0x226>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	4a51      	ldr	r2, [pc, #324]	; (80053c0 <HAL_GPIO_Init+0x348>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d00d      	beq.n	800529a <HAL_GPIO_Init+0x222>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	4a50      	ldr	r2, [pc, #320]	; (80053c4 <HAL_GPIO_Init+0x34c>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d007      	beq.n	8005296 <HAL_GPIO_Init+0x21e>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	4a4f      	ldr	r2, [pc, #316]	; (80053c8 <HAL_GPIO_Init+0x350>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d101      	bne.n	8005292 <HAL_GPIO_Init+0x21a>
 800528e:	2309      	movs	r3, #9
 8005290:	e012      	b.n	80052b8 <HAL_GPIO_Init+0x240>
 8005292:	230a      	movs	r3, #10
 8005294:	e010      	b.n	80052b8 <HAL_GPIO_Init+0x240>
 8005296:	2308      	movs	r3, #8
 8005298:	e00e      	b.n	80052b8 <HAL_GPIO_Init+0x240>
 800529a:	2307      	movs	r3, #7
 800529c:	e00c      	b.n	80052b8 <HAL_GPIO_Init+0x240>
 800529e:	2306      	movs	r3, #6
 80052a0:	e00a      	b.n	80052b8 <HAL_GPIO_Init+0x240>
 80052a2:	2305      	movs	r3, #5
 80052a4:	e008      	b.n	80052b8 <HAL_GPIO_Init+0x240>
 80052a6:	2304      	movs	r3, #4
 80052a8:	e006      	b.n	80052b8 <HAL_GPIO_Init+0x240>
 80052aa:	2303      	movs	r3, #3
 80052ac:	e004      	b.n	80052b8 <HAL_GPIO_Init+0x240>
 80052ae:	2302      	movs	r3, #2
 80052b0:	e002      	b.n	80052b8 <HAL_GPIO_Init+0x240>
 80052b2:	2301      	movs	r3, #1
 80052b4:	e000      	b.n	80052b8 <HAL_GPIO_Init+0x240>
 80052b6:	2300      	movs	r3, #0
 80052b8:	69fa      	ldr	r2, [r7, #28]
 80052ba:	f002 0203 	and.w	r2, r2, #3
 80052be:	0092      	lsls	r2, r2, #2
 80052c0:	4093      	lsls	r3, r2
 80052c2:	69ba      	ldr	r2, [r7, #24]
 80052c4:	4313      	orrs	r3, r2
 80052c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80052c8:	4935      	ldr	r1, [pc, #212]	; (80053a0 <HAL_GPIO_Init+0x328>)
 80052ca:	69fb      	ldr	r3, [r7, #28]
 80052cc:	089b      	lsrs	r3, r3, #2
 80052ce:	3302      	adds	r3, #2
 80052d0:	69ba      	ldr	r2, [r7, #24]
 80052d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80052d6:	4b3d      	ldr	r3, [pc, #244]	; (80053cc <HAL_GPIO_Init+0x354>)
 80052d8:	689b      	ldr	r3, [r3, #8]
 80052da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80052dc:	693b      	ldr	r3, [r7, #16]
 80052de:	43db      	mvns	r3, r3
 80052e0:	69ba      	ldr	r2, [r7, #24]
 80052e2:	4013      	ands	r3, r2
 80052e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	685b      	ldr	r3, [r3, #4]
 80052ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d003      	beq.n	80052fa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80052f2:	69ba      	ldr	r2, [r7, #24]
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	4313      	orrs	r3, r2
 80052f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80052fa:	4a34      	ldr	r2, [pc, #208]	; (80053cc <HAL_GPIO_Init+0x354>)
 80052fc:	69bb      	ldr	r3, [r7, #24]
 80052fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005300:	4b32      	ldr	r3, [pc, #200]	; (80053cc <HAL_GPIO_Init+0x354>)
 8005302:	68db      	ldr	r3, [r3, #12]
 8005304:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005306:	693b      	ldr	r3, [r7, #16]
 8005308:	43db      	mvns	r3, r3
 800530a:	69ba      	ldr	r2, [r7, #24]
 800530c:	4013      	ands	r3, r2
 800530e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005318:	2b00      	cmp	r3, #0
 800531a:	d003      	beq.n	8005324 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800531c:	69ba      	ldr	r2, [r7, #24]
 800531e:	693b      	ldr	r3, [r7, #16]
 8005320:	4313      	orrs	r3, r2
 8005322:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005324:	4a29      	ldr	r2, [pc, #164]	; (80053cc <HAL_GPIO_Init+0x354>)
 8005326:	69bb      	ldr	r3, [r7, #24]
 8005328:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800532a:	4b28      	ldr	r3, [pc, #160]	; (80053cc <HAL_GPIO_Init+0x354>)
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	43db      	mvns	r3, r3
 8005334:	69ba      	ldr	r2, [r7, #24]
 8005336:	4013      	ands	r3, r2
 8005338:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005342:	2b00      	cmp	r3, #0
 8005344:	d003      	beq.n	800534e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005346:	69ba      	ldr	r2, [r7, #24]
 8005348:	693b      	ldr	r3, [r7, #16]
 800534a:	4313      	orrs	r3, r2
 800534c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800534e:	4a1f      	ldr	r2, [pc, #124]	; (80053cc <HAL_GPIO_Init+0x354>)
 8005350:	69bb      	ldr	r3, [r7, #24]
 8005352:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005354:	4b1d      	ldr	r3, [pc, #116]	; (80053cc <HAL_GPIO_Init+0x354>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800535a:	693b      	ldr	r3, [r7, #16]
 800535c:	43db      	mvns	r3, r3
 800535e:	69ba      	ldr	r2, [r7, #24]
 8005360:	4013      	ands	r3, r2
 8005362:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800536c:	2b00      	cmp	r3, #0
 800536e:	d003      	beq.n	8005378 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005370:	69ba      	ldr	r2, [r7, #24]
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	4313      	orrs	r3, r2
 8005376:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005378:	4a14      	ldr	r2, [pc, #80]	; (80053cc <HAL_GPIO_Init+0x354>)
 800537a:	69bb      	ldr	r3, [r7, #24]
 800537c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800537e:	69fb      	ldr	r3, [r7, #28]
 8005380:	3301      	adds	r3, #1
 8005382:	61fb      	str	r3, [r7, #28]
 8005384:	69fb      	ldr	r3, [r7, #28]
 8005386:	2b0f      	cmp	r3, #15
 8005388:	f67f ae86 	bls.w	8005098 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800538c:	bf00      	nop
 800538e:	bf00      	nop
 8005390:	3724      	adds	r7, #36	; 0x24
 8005392:	46bd      	mov	sp, r7
 8005394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005398:	4770      	bx	lr
 800539a:	bf00      	nop
 800539c:	40023800 	.word	0x40023800
 80053a0:	40013800 	.word	0x40013800
 80053a4:	40020000 	.word	0x40020000
 80053a8:	40020400 	.word	0x40020400
 80053ac:	40020800 	.word	0x40020800
 80053b0:	40020c00 	.word	0x40020c00
 80053b4:	40021000 	.word	0x40021000
 80053b8:	40021400 	.word	0x40021400
 80053bc:	40021800 	.word	0x40021800
 80053c0:	40021c00 	.word	0x40021c00
 80053c4:	40022000 	.word	0x40022000
 80053c8:	40022400 	.word	0x40022400
 80053cc:	40013c00 	.word	0x40013c00

080053d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80053d0:	b480      	push	{r7}
 80053d2:	b083      	sub	sp, #12
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
 80053d8:	460b      	mov	r3, r1
 80053da:	807b      	strh	r3, [r7, #2]
 80053dc:	4613      	mov	r3, r2
 80053de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80053e0:	787b      	ldrb	r3, [r7, #1]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d003      	beq.n	80053ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80053e6:	887a      	ldrh	r2, [r7, #2]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80053ec:	e003      	b.n	80053f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80053ee:	887b      	ldrh	r3, [r7, #2]
 80053f0:	041a      	lsls	r2, r3, #16
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	619a      	str	r2, [r3, #24]
}
 80053f6:	bf00      	nop
 80053f8:	370c      	adds	r7, #12
 80053fa:	46bd      	mov	sp, r7
 80053fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005400:	4770      	bx	lr
	...

08005404 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b086      	sub	sp, #24
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800540c:	2300      	movs	r3, #0
 800540e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d101      	bne.n	800541a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8005416:	2301      	movs	r3, #1
 8005418:	e291      	b.n	800593e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f003 0301 	and.w	r3, r3, #1
 8005422:	2b00      	cmp	r3, #0
 8005424:	f000 8087 	beq.w	8005536 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005428:	4b96      	ldr	r3, [pc, #600]	; (8005684 <HAL_RCC_OscConfig+0x280>)
 800542a:	689b      	ldr	r3, [r3, #8]
 800542c:	f003 030c 	and.w	r3, r3, #12
 8005430:	2b04      	cmp	r3, #4
 8005432:	d00c      	beq.n	800544e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005434:	4b93      	ldr	r3, [pc, #588]	; (8005684 <HAL_RCC_OscConfig+0x280>)
 8005436:	689b      	ldr	r3, [r3, #8]
 8005438:	f003 030c 	and.w	r3, r3, #12
 800543c:	2b08      	cmp	r3, #8
 800543e:	d112      	bne.n	8005466 <HAL_RCC_OscConfig+0x62>
 8005440:	4b90      	ldr	r3, [pc, #576]	; (8005684 <HAL_RCC_OscConfig+0x280>)
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005448:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800544c:	d10b      	bne.n	8005466 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800544e:	4b8d      	ldr	r3, [pc, #564]	; (8005684 <HAL_RCC_OscConfig+0x280>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005456:	2b00      	cmp	r3, #0
 8005458:	d06c      	beq.n	8005534 <HAL_RCC_OscConfig+0x130>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d168      	bne.n	8005534 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005462:	2301      	movs	r3, #1
 8005464:	e26b      	b.n	800593e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800546e:	d106      	bne.n	800547e <HAL_RCC_OscConfig+0x7a>
 8005470:	4b84      	ldr	r3, [pc, #528]	; (8005684 <HAL_RCC_OscConfig+0x280>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a83      	ldr	r2, [pc, #524]	; (8005684 <HAL_RCC_OscConfig+0x280>)
 8005476:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800547a:	6013      	str	r3, [r2, #0]
 800547c:	e02e      	b.n	80054dc <HAL_RCC_OscConfig+0xd8>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	685b      	ldr	r3, [r3, #4]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d10c      	bne.n	80054a0 <HAL_RCC_OscConfig+0x9c>
 8005486:	4b7f      	ldr	r3, [pc, #508]	; (8005684 <HAL_RCC_OscConfig+0x280>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4a7e      	ldr	r2, [pc, #504]	; (8005684 <HAL_RCC_OscConfig+0x280>)
 800548c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005490:	6013      	str	r3, [r2, #0]
 8005492:	4b7c      	ldr	r3, [pc, #496]	; (8005684 <HAL_RCC_OscConfig+0x280>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a7b      	ldr	r2, [pc, #492]	; (8005684 <HAL_RCC_OscConfig+0x280>)
 8005498:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800549c:	6013      	str	r3, [r2, #0]
 800549e:	e01d      	b.n	80054dc <HAL_RCC_OscConfig+0xd8>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80054a8:	d10c      	bne.n	80054c4 <HAL_RCC_OscConfig+0xc0>
 80054aa:	4b76      	ldr	r3, [pc, #472]	; (8005684 <HAL_RCC_OscConfig+0x280>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4a75      	ldr	r2, [pc, #468]	; (8005684 <HAL_RCC_OscConfig+0x280>)
 80054b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80054b4:	6013      	str	r3, [r2, #0]
 80054b6:	4b73      	ldr	r3, [pc, #460]	; (8005684 <HAL_RCC_OscConfig+0x280>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4a72      	ldr	r2, [pc, #456]	; (8005684 <HAL_RCC_OscConfig+0x280>)
 80054bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054c0:	6013      	str	r3, [r2, #0]
 80054c2:	e00b      	b.n	80054dc <HAL_RCC_OscConfig+0xd8>
 80054c4:	4b6f      	ldr	r3, [pc, #444]	; (8005684 <HAL_RCC_OscConfig+0x280>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a6e      	ldr	r2, [pc, #440]	; (8005684 <HAL_RCC_OscConfig+0x280>)
 80054ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054ce:	6013      	str	r3, [r2, #0]
 80054d0:	4b6c      	ldr	r3, [pc, #432]	; (8005684 <HAL_RCC_OscConfig+0x280>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a6b      	ldr	r2, [pc, #428]	; (8005684 <HAL_RCC_OscConfig+0x280>)
 80054d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80054da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d013      	beq.n	800550c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054e4:	f7fe febc 	bl	8004260 <HAL_GetTick>
 80054e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054ea:	e008      	b.n	80054fe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80054ec:	f7fe feb8 	bl	8004260 <HAL_GetTick>
 80054f0:	4602      	mov	r2, r0
 80054f2:	693b      	ldr	r3, [r7, #16]
 80054f4:	1ad3      	subs	r3, r2, r3
 80054f6:	2b64      	cmp	r3, #100	; 0x64
 80054f8:	d901      	bls.n	80054fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80054fa:	2303      	movs	r3, #3
 80054fc:	e21f      	b.n	800593e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054fe:	4b61      	ldr	r3, [pc, #388]	; (8005684 <HAL_RCC_OscConfig+0x280>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005506:	2b00      	cmp	r3, #0
 8005508:	d0f0      	beq.n	80054ec <HAL_RCC_OscConfig+0xe8>
 800550a:	e014      	b.n	8005536 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800550c:	f7fe fea8 	bl	8004260 <HAL_GetTick>
 8005510:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005512:	e008      	b.n	8005526 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005514:	f7fe fea4 	bl	8004260 <HAL_GetTick>
 8005518:	4602      	mov	r2, r0
 800551a:	693b      	ldr	r3, [r7, #16]
 800551c:	1ad3      	subs	r3, r2, r3
 800551e:	2b64      	cmp	r3, #100	; 0x64
 8005520:	d901      	bls.n	8005526 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005522:	2303      	movs	r3, #3
 8005524:	e20b      	b.n	800593e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005526:	4b57      	ldr	r3, [pc, #348]	; (8005684 <HAL_RCC_OscConfig+0x280>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800552e:	2b00      	cmp	r3, #0
 8005530:	d1f0      	bne.n	8005514 <HAL_RCC_OscConfig+0x110>
 8005532:	e000      	b.n	8005536 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005534:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f003 0302 	and.w	r3, r3, #2
 800553e:	2b00      	cmp	r3, #0
 8005540:	d069      	beq.n	8005616 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005542:	4b50      	ldr	r3, [pc, #320]	; (8005684 <HAL_RCC_OscConfig+0x280>)
 8005544:	689b      	ldr	r3, [r3, #8]
 8005546:	f003 030c 	and.w	r3, r3, #12
 800554a:	2b00      	cmp	r3, #0
 800554c:	d00b      	beq.n	8005566 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800554e:	4b4d      	ldr	r3, [pc, #308]	; (8005684 <HAL_RCC_OscConfig+0x280>)
 8005550:	689b      	ldr	r3, [r3, #8]
 8005552:	f003 030c 	and.w	r3, r3, #12
 8005556:	2b08      	cmp	r3, #8
 8005558:	d11c      	bne.n	8005594 <HAL_RCC_OscConfig+0x190>
 800555a:	4b4a      	ldr	r3, [pc, #296]	; (8005684 <HAL_RCC_OscConfig+0x280>)
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005562:	2b00      	cmp	r3, #0
 8005564:	d116      	bne.n	8005594 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005566:	4b47      	ldr	r3, [pc, #284]	; (8005684 <HAL_RCC_OscConfig+0x280>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f003 0302 	and.w	r3, r3, #2
 800556e:	2b00      	cmp	r3, #0
 8005570:	d005      	beq.n	800557e <HAL_RCC_OscConfig+0x17a>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	68db      	ldr	r3, [r3, #12]
 8005576:	2b01      	cmp	r3, #1
 8005578:	d001      	beq.n	800557e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800557a:	2301      	movs	r3, #1
 800557c:	e1df      	b.n	800593e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800557e:	4b41      	ldr	r3, [pc, #260]	; (8005684 <HAL_RCC_OscConfig+0x280>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	691b      	ldr	r3, [r3, #16]
 800558a:	00db      	lsls	r3, r3, #3
 800558c:	493d      	ldr	r1, [pc, #244]	; (8005684 <HAL_RCC_OscConfig+0x280>)
 800558e:	4313      	orrs	r3, r2
 8005590:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005592:	e040      	b.n	8005616 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	68db      	ldr	r3, [r3, #12]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d023      	beq.n	80055e4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800559c:	4b39      	ldr	r3, [pc, #228]	; (8005684 <HAL_RCC_OscConfig+0x280>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4a38      	ldr	r2, [pc, #224]	; (8005684 <HAL_RCC_OscConfig+0x280>)
 80055a2:	f043 0301 	orr.w	r3, r3, #1
 80055a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055a8:	f7fe fe5a 	bl	8004260 <HAL_GetTick>
 80055ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055ae:	e008      	b.n	80055c2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80055b0:	f7fe fe56 	bl	8004260 <HAL_GetTick>
 80055b4:	4602      	mov	r2, r0
 80055b6:	693b      	ldr	r3, [r7, #16]
 80055b8:	1ad3      	subs	r3, r2, r3
 80055ba:	2b02      	cmp	r3, #2
 80055bc:	d901      	bls.n	80055c2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80055be:	2303      	movs	r3, #3
 80055c0:	e1bd      	b.n	800593e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055c2:	4b30      	ldr	r3, [pc, #192]	; (8005684 <HAL_RCC_OscConfig+0x280>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f003 0302 	and.w	r3, r3, #2
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d0f0      	beq.n	80055b0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055ce:	4b2d      	ldr	r3, [pc, #180]	; (8005684 <HAL_RCC_OscConfig+0x280>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	691b      	ldr	r3, [r3, #16]
 80055da:	00db      	lsls	r3, r3, #3
 80055dc:	4929      	ldr	r1, [pc, #164]	; (8005684 <HAL_RCC_OscConfig+0x280>)
 80055de:	4313      	orrs	r3, r2
 80055e0:	600b      	str	r3, [r1, #0]
 80055e2:	e018      	b.n	8005616 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80055e4:	4b27      	ldr	r3, [pc, #156]	; (8005684 <HAL_RCC_OscConfig+0x280>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4a26      	ldr	r2, [pc, #152]	; (8005684 <HAL_RCC_OscConfig+0x280>)
 80055ea:	f023 0301 	bic.w	r3, r3, #1
 80055ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055f0:	f7fe fe36 	bl	8004260 <HAL_GetTick>
 80055f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80055f6:	e008      	b.n	800560a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80055f8:	f7fe fe32 	bl	8004260 <HAL_GetTick>
 80055fc:	4602      	mov	r2, r0
 80055fe:	693b      	ldr	r3, [r7, #16]
 8005600:	1ad3      	subs	r3, r2, r3
 8005602:	2b02      	cmp	r3, #2
 8005604:	d901      	bls.n	800560a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005606:	2303      	movs	r3, #3
 8005608:	e199      	b.n	800593e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800560a:	4b1e      	ldr	r3, [pc, #120]	; (8005684 <HAL_RCC_OscConfig+0x280>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f003 0302 	and.w	r3, r3, #2
 8005612:	2b00      	cmp	r3, #0
 8005614:	d1f0      	bne.n	80055f8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f003 0308 	and.w	r3, r3, #8
 800561e:	2b00      	cmp	r3, #0
 8005620:	d038      	beq.n	8005694 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	695b      	ldr	r3, [r3, #20]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d019      	beq.n	800565e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800562a:	4b16      	ldr	r3, [pc, #88]	; (8005684 <HAL_RCC_OscConfig+0x280>)
 800562c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800562e:	4a15      	ldr	r2, [pc, #84]	; (8005684 <HAL_RCC_OscConfig+0x280>)
 8005630:	f043 0301 	orr.w	r3, r3, #1
 8005634:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005636:	f7fe fe13 	bl	8004260 <HAL_GetTick>
 800563a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800563c:	e008      	b.n	8005650 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800563e:	f7fe fe0f 	bl	8004260 <HAL_GetTick>
 8005642:	4602      	mov	r2, r0
 8005644:	693b      	ldr	r3, [r7, #16]
 8005646:	1ad3      	subs	r3, r2, r3
 8005648:	2b02      	cmp	r3, #2
 800564a:	d901      	bls.n	8005650 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800564c:	2303      	movs	r3, #3
 800564e:	e176      	b.n	800593e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005650:	4b0c      	ldr	r3, [pc, #48]	; (8005684 <HAL_RCC_OscConfig+0x280>)
 8005652:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005654:	f003 0302 	and.w	r3, r3, #2
 8005658:	2b00      	cmp	r3, #0
 800565a:	d0f0      	beq.n	800563e <HAL_RCC_OscConfig+0x23a>
 800565c:	e01a      	b.n	8005694 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800565e:	4b09      	ldr	r3, [pc, #36]	; (8005684 <HAL_RCC_OscConfig+0x280>)
 8005660:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005662:	4a08      	ldr	r2, [pc, #32]	; (8005684 <HAL_RCC_OscConfig+0x280>)
 8005664:	f023 0301 	bic.w	r3, r3, #1
 8005668:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800566a:	f7fe fdf9 	bl	8004260 <HAL_GetTick>
 800566e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005670:	e00a      	b.n	8005688 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005672:	f7fe fdf5 	bl	8004260 <HAL_GetTick>
 8005676:	4602      	mov	r2, r0
 8005678:	693b      	ldr	r3, [r7, #16]
 800567a:	1ad3      	subs	r3, r2, r3
 800567c:	2b02      	cmp	r3, #2
 800567e:	d903      	bls.n	8005688 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005680:	2303      	movs	r3, #3
 8005682:	e15c      	b.n	800593e <HAL_RCC_OscConfig+0x53a>
 8005684:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005688:	4b91      	ldr	r3, [pc, #580]	; (80058d0 <HAL_RCC_OscConfig+0x4cc>)
 800568a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800568c:	f003 0302 	and.w	r3, r3, #2
 8005690:	2b00      	cmp	r3, #0
 8005692:	d1ee      	bne.n	8005672 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f003 0304 	and.w	r3, r3, #4
 800569c:	2b00      	cmp	r3, #0
 800569e:	f000 80a4 	beq.w	80057ea <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80056a2:	4b8b      	ldr	r3, [pc, #556]	; (80058d0 <HAL_RCC_OscConfig+0x4cc>)
 80056a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d10d      	bne.n	80056ca <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80056ae:	4b88      	ldr	r3, [pc, #544]	; (80058d0 <HAL_RCC_OscConfig+0x4cc>)
 80056b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056b2:	4a87      	ldr	r2, [pc, #540]	; (80058d0 <HAL_RCC_OscConfig+0x4cc>)
 80056b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056b8:	6413      	str	r3, [r2, #64]	; 0x40
 80056ba:	4b85      	ldr	r3, [pc, #532]	; (80058d0 <HAL_RCC_OscConfig+0x4cc>)
 80056bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056c2:	60bb      	str	r3, [r7, #8]
 80056c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80056c6:	2301      	movs	r3, #1
 80056c8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80056ca:	4b82      	ldr	r3, [pc, #520]	; (80058d4 <HAL_RCC_OscConfig+0x4d0>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d118      	bne.n	8005708 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80056d6:	4b7f      	ldr	r3, [pc, #508]	; (80058d4 <HAL_RCC_OscConfig+0x4d0>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4a7e      	ldr	r2, [pc, #504]	; (80058d4 <HAL_RCC_OscConfig+0x4d0>)
 80056dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80056e2:	f7fe fdbd 	bl	8004260 <HAL_GetTick>
 80056e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80056e8:	e008      	b.n	80056fc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056ea:	f7fe fdb9 	bl	8004260 <HAL_GetTick>
 80056ee:	4602      	mov	r2, r0
 80056f0:	693b      	ldr	r3, [r7, #16]
 80056f2:	1ad3      	subs	r3, r2, r3
 80056f4:	2b64      	cmp	r3, #100	; 0x64
 80056f6:	d901      	bls.n	80056fc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80056f8:	2303      	movs	r3, #3
 80056fa:	e120      	b.n	800593e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80056fc:	4b75      	ldr	r3, [pc, #468]	; (80058d4 <HAL_RCC_OscConfig+0x4d0>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005704:	2b00      	cmp	r3, #0
 8005706:	d0f0      	beq.n	80056ea <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	689b      	ldr	r3, [r3, #8]
 800570c:	2b01      	cmp	r3, #1
 800570e:	d106      	bne.n	800571e <HAL_RCC_OscConfig+0x31a>
 8005710:	4b6f      	ldr	r3, [pc, #444]	; (80058d0 <HAL_RCC_OscConfig+0x4cc>)
 8005712:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005714:	4a6e      	ldr	r2, [pc, #440]	; (80058d0 <HAL_RCC_OscConfig+0x4cc>)
 8005716:	f043 0301 	orr.w	r3, r3, #1
 800571a:	6713      	str	r3, [r2, #112]	; 0x70
 800571c:	e02d      	b.n	800577a <HAL_RCC_OscConfig+0x376>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	689b      	ldr	r3, [r3, #8]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d10c      	bne.n	8005740 <HAL_RCC_OscConfig+0x33c>
 8005726:	4b6a      	ldr	r3, [pc, #424]	; (80058d0 <HAL_RCC_OscConfig+0x4cc>)
 8005728:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800572a:	4a69      	ldr	r2, [pc, #420]	; (80058d0 <HAL_RCC_OscConfig+0x4cc>)
 800572c:	f023 0301 	bic.w	r3, r3, #1
 8005730:	6713      	str	r3, [r2, #112]	; 0x70
 8005732:	4b67      	ldr	r3, [pc, #412]	; (80058d0 <HAL_RCC_OscConfig+0x4cc>)
 8005734:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005736:	4a66      	ldr	r2, [pc, #408]	; (80058d0 <HAL_RCC_OscConfig+0x4cc>)
 8005738:	f023 0304 	bic.w	r3, r3, #4
 800573c:	6713      	str	r3, [r2, #112]	; 0x70
 800573e:	e01c      	b.n	800577a <HAL_RCC_OscConfig+0x376>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	689b      	ldr	r3, [r3, #8]
 8005744:	2b05      	cmp	r3, #5
 8005746:	d10c      	bne.n	8005762 <HAL_RCC_OscConfig+0x35e>
 8005748:	4b61      	ldr	r3, [pc, #388]	; (80058d0 <HAL_RCC_OscConfig+0x4cc>)
 800574a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800574c:	4a60      	ldr	r2, [pc, #384]	; (80058d0 <HAL_RCC_OscConfig+0x4cc>)
 800574e:	f043 0304 	orr.w	r3, r3, #4
 8005752:	6713      	str	r3, [r2, #112]	; 0x70
 8005754:	4b5e      	ldr	r3, [pc, #376]	; (80058d0 <HAL_RCC_OscConfig+0x4cc>)
 8005756:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005758:	4a5d      	ldr	r2, [pc, #372]	; (80058d0 <HAL_RCC_OscConfig+0x4cc>)
 800575a:	f043 0301 	orr.w	r3, r3, #1
 800575e:	6713      	str	r3, [r2, #112]	; 0x70
 8005760:	e00b      	b.n	800577a <HAL_RCC_OscConfig+0x376>
 8005762:	4b5b      	ldr	r3, [pc, #364]	; (80058d0 <HAL_RCC_OscConfig+0x4cc>)
 8005764:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005766:	4a5a      	ldr	r2, [pc, #360]	; (80058d0 <HAL_RCC_OscConfig+0x4cc>)
 8005768:	f023 0301 	bic.w	r3, r3, #1
 800576c:	6713      	str	r3, [r2, #112]	; 0x70
 800576e:	4b58      	ldr	r3, [pc, #352]	; (80058d0 <HAL_RCC_OscConfig+0x4cc>)
 8005770:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005772:	4a57      	ldr	r2, [pc, #348]	; (80058d0 <HAL_RCC_OscConfig+0x4cc>)
 8005774:	f023 0304 	bic.w	r3, r3, #4
 8005778:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	689b      	ldr	r3, [r3, #8]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d015      	beq.n	80057ae <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005782:	f7fe fd6d 	bl	8004260 <HAL_GetTick>
 8005786:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005788:	e00a      	b.n	80057a0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800578a:	f7fe fd69 	bl	8004260 <HAL_GetTick>
 800578e:	4602      	mov	r2, r0
 8005790:	693b      	ldr	r3, [r7, #16]
 8005792:	1ad3      	subs	r3, r2, r3
 8005794:	f241 3288 	movw	r2, #5000	; 0x1388
 8005798:	4293      	cmp	r3, r2
 800579a:	d901      	bls.n	80057a0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800579c:	2303      	movs	r3, #3
 800579e:	e0ce      	b.n	800593e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057a0:	4b4b      	ldr	r3, [pc, #300]	; (80058d0 <HAL_RCC_OscConfig+0x4cc>)
 80057a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057a4:	f003 0302 	and.w	r3, r3, #2
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d0ee      	beq.n	800578a <HAL_RCC_OscConfig+0x386>
 80057ac:	e014      	b.n	80057d8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057ae:	f7fe fd57 	bl	8004260 <HAL_GetTick>
 80057b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80057b4:	e00a      	b.n	80057cc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057b6:	f7fe fd53 	bl	8004260 <HAL_GetTick>
 80057ba:	4602      	mov	r2, r0
 80057bc:	693b      	ldr	r3, [r7, #16]
 80057be:	1ad3      	subs	r3, r2, r3
 80057c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d901      	bls.n	80057cc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80057c8:	2303      	movs	r3, #3
 80057ca:	e0b8      	b.n	800593e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80057cc:	4b40      	ldr	r3, [pc, #256]	; (80058d0 <HAL_RCC_OscConfig+0x4cc>)
 80057ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057d0:	f003 0302 	and.w	r3, r3, #2
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d1ee      	bne.n	80057b6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80057d8:	7dfb      	ldrb	r3, [r7, #23]
 80057da:	2b01      	cmp	r3, #1
 80057dc:	d105      	bne.n	80057ea <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80057de:	4b3c      	ldr	r3, [pc, #240]	; (80058d0 <HAL_RCC_OscConfig+0x4cc>)
 80057e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057e2:	4a3b      	ldr	r2, [pc, #236]	; (80058d0 <HAL_RCC_OscConfig+0x4cc>)
 80057e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80057e8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	699b      	ldr	r3, [r3, #24]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	f000 80a4 	beq.w	800593c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80057f4:	4b36      	ldr	r3, [pc, #216]	; (80058d0 <HAL_RCC_OscConfig+0x4cc>)
 80057f6:	689b      	ldr	r3, [r3, #8]
 80057f8:	f003 030c 	and.w	r3, r3, #12
 80057fc:	2b08      	cmp	r3, #8
 80057fe:	d06b      	beq.n	80058d8 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	699b      	ldr	r3, [r3, #24]
 8005804:	2b02      	cmp	r3, #2
 8005806:	d149      	bne.n	800589c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005808:	4b31      	ldr	r3, [pc, #196]	; (80058d0 <HAL_RCC_OscConfig+0x4cc>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a30      	ldr	r2, [pc, #192]	; (80058d0 <HAL_RCC_OscConfig+0x4cc>)
 800580e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005812:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005814:	f7fe fd24 	bl	8004260 <HAL_GetTick>
 8005818:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800581a:	e008      	b.n	800582e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800581c:	f7fe fd20 	bl	8004260 <HAL_GetTick>
 8005820:	4602      	mov	r2, r0
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	1ad3      	subs	r3, r2, r3
 8005826:	2b02      	cmp	r3, #2
 8005828:	d901      	bls.n	800582e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800582a:	2303      	movs	r3, #3
 800582c:	e087      	b.n	800593e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800582e:	4b28      	ldr	r3, [pc, #160]	; (80058d0 <HAL_RCC_OscConfig+0x4cc>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005836:	2b00      	cmp	r3, #0
 8005838:	d1f0      	bne.n	800581c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	69da      	ldr	r2, [r3, #28]
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6a1b      	ldr	r3, [r3, #32]
 8005842:	431a      	orrs	r2, r3
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005848:	019b      	lsls	r3, r3, #6
 800584a:	431a      	orrs	r2, r3
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005850:	085b      	lsrs	r3, r3, #1
 8005852:	3b01      	subs	r3, #1
 8005854:	041b      	lsls	r3, r3, #16
 8005856:	431a      	orrs	r2, r3
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800585c:	061b      	lsls	r3, r3, #24
 800585e:	4313      	orrs	r3, r2
 8005860:	4a1b      	ldr	r2, [pc, #108]	; (80058d0 <HAL_RCC_OscConfig+0x4cc>)
 8005862:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005866:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005868:	4b19      	ldr	r3, [pc, #100]	; (80058d0 <HAL_RCC_OscConfig+0x4cc>)
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a18      	ldr	r2, [pc, #96]	; (80058d0 <HAL_RCC_OscConfig+0x4cc>)
 800586e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005872:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005874:	f7fe fcf4 	bl	8004260 <HAL_GetTick>
 8005878:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800587a:	e008      	b.n	800588e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800587c:	f7fe fcf0 	bl	8004260 <HAL_GetTick>
 8005880:	4602      	mov	r2, r0
 8005882:	693b      	ldr	r3, [r7, #16]
 8005884:	1ad3      	subs	r3, r2, r3
 8005886:	2b02      	cmp	r3, #2
 8005888:	d901      	bls.n	800588e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800588a:	2303      	movs	r3, #3
 800588c:	e057      	b.n	800593e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800588e:	4b10      	ldr	r3, [pc, #64]	; (80058d0 <HAL_RCC_OscConfig+0x4cc>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005896:	2b00      	cmp	r3, #0
 8005898:	d0f0      	beq.n	800587c <HAL_RCC_OscConfig+0x478>
 800589a:	e04f      	b.n	800593c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800589c:	4b0c      	ldr	r3, [pc, #48]	; (80058d0 <HAL_RCC_OscConfig+0x4cc>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4a0b      	ldr	r2, [pc, #44]	; (80058d0 <HAL_RCC_OscConfig+0x4cc>)
 80058a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80058a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058a8:	f7fe fcda 	bl	8004260 <HAL_GetTick>
 80058ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058ae:	e008      	b.n	80058c2 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058b0:	f7fe fcd6 	bl	8004260 <HAL_GetTick>
 80058b4:	4602      	mov	r2, r0
 80058b6:	693b      	ldr	r3, [r7, #16]
 80058b8:	1ad3      	subs	r3, r2, r3
 80058ba:	2b02      	cmp	r3, #2
 80058bc:	d901      	bls.n	80058c2 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80058be:	2303      	movs	r3, #3
 80058c0:	e03d      	b.n	800593e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058c2:	4b03      	ldr	r3, [pc, #12]	; (80058d0 <HAL_RCC_OscConfig+0x4cc>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d1f0      	bne.n	80058b0 <HAL_RCC_OscConfig+0x4ac>
 80058ce:	e035      	b.n	800593c <HAL_RCC_OscConfig+0x538>
 80058d0:	40023800 	.word	0x40023800
 80058d4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80058d8:	4b1b      	ldr	r3, [pc, #108]	; (8005948 <HAL_RCC_OscConfig+0x544>)
 80058da:	685b      	ldr	r3, [r3, #4]
 80058dc:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	699b      	ldr	r3, [r3, #24]
 80058e2:	2b01      	cmp	r3, #1
 80058e4:	d028      	beq.n	8005938 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80058f0:	429a      	cmp	r2, r3
 80058f2:	d121      	bne.n	8005938 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058fe:	429a      	cmp	r2, r3
 8005900:	d11a      	bne.n	8005938 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005902:	68fa      	ldr	r2, [r7, #12]
 8005904:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005908:	4013      	ands	r3, r2
 800590a:	687a      	ldr	r2, [r7, #4]
 800590c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800590e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005910:	4293      	cmp	r3, r2
 8005912:	d111      	bne.n	8005938 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800591e:	085b      	lsrs	r3, r3, #1
 8005920:	3b01      	subs	r3, #1
 8005922:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005924:	429a      	cmp	r2, r3
 8005926:	d107      	bne.n	8005938 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005932:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005934:	429a      	cmp	r2, r3
 8005936:	d001      	beq.n	800593c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8005938:	2301      	movs	r3, #1
 800593a:	e000      	b.n	800593e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800593c:	2300      	movs	r3, #0
}
 800593e:	4618      	mov	r0, r3
 8005940:	3718      	adds	r7, #24
 8005942:	46bd      	mov	sp, r7
 8005944:	bd80      	pop	{r7, pc}
 8005946:	bf00      	nop
 8005948:	40023800 	.word	0x40023800

0800594c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b084      	sub	sp, #16
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
 8005954:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005956:	2300      	movs	r3, #0
 8005958:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d101      	bne.n	8005964 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005960:	2301      	movs	r3, #1
 8005962:	e0d0      	b.n	8005b06 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005964:	4b6a      	ldr	r3, [pc, #424]	; (8005b10 <HAL_RCC_ClockConfig+0x1c4>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f003 030f 	and.w	r3, r3, #15
 800596c:	683a      	ldr	r2, [r7, #0]
 800596e:	429a      	cmp	r2, r3
 8005970:	d910      	bls.n	8005994 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005972:	4b67      	ldr	r3, [pc, #412]	; (8005b10 <HAL_RCC_ClockConfig+0x1c4>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f023 020f 	bic.w	r2, r3, #15
 800597a:	4965      	ldr	r1, [pc, #404]	; (8005b10 <HAL_RCC_ClockConfig+0x1c4>)
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	4313      	orrs	r3, r2
 8005980:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005982:	4b63      	ldr	r3, [pc, #396]	; (8005b10 <HAL_RCC_ClockConfig+0x1c4>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f003 030f 	and.w	r3, r3, #15
 800598a:	683a      	ldr	r2, [r7, #0]
 800598c:	429a      	cmp	r2, r3
 800598e:	d001      	beq.n	8005994 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005990:	2301      	movs	r3, #1
 8005992:	e0b8      	b.n	8005b06 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f003 0302 	and.w	r3, r3, #2
 800599c:	2b00      	cmp	r3, #0
 800599e:	d020      	beq.n	80059e2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f003 0304 	and.w	r3, r3, #4
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d005      	beq.n	80059b8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80059ac:	4b59      	ldr	r3, [pc, #356]	; (8005b14 <HAL_RCC_ClockConfig+0x1c8>)
 80059ae:	689b      	ldr	r3, [r3, #8]
 80059b0:	4a58      	ldr	r2, [pc, #352]	; (8005b14 <HAL_RCC_ClockConfig+0x1c8>)
 80059b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80059b6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f003 0308 	and.w	r3, r3, #8
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d005      	beq.n	80059d0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80059c4:	4b53      	ldr	r3, [pc, #332]	; (8005b14 <HAL_RCC_ClockConfig+0x1c8>)
 80059c6:	689b      	ldr	r3, [r3, #8]
 80059c8:	4a52      	ldr	r2, [pc, #328]	; (8005b14 <HAL_RCC_ClockConfig+0x1c8>)
 80059ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80059ce:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80059d0:	4b50      	ldr	r3, [pc, #320]	; (8005b14 <HAL_RCC_ClockConfig+0x1c8>)
 80059d2:	689b      	ldr	r3, [r3, #8]
 80059d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	689b      	ldr	r3, [r3, #8]
 80059dc:	494d      	ldr	r1, [pc, #308]	; (8005b14 <HAL_RCC_ClockConfig+0x1c8>)
 80059de:	4313      	orrs	r3, r2
 80059e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f003 0301 	and.w	r3, r3, #1
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d040      	beq.n	8005a70 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	2b01      	cmp	r3, #1
 80059f4:	d107      	bne.n	8005a06 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059f6:	4b47      	ldr	r3, [pc, #284]	; (8005b14 <HAL_RCC_ClockConfig+0x1c8>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d115      	bne.n	8005a2e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005a02:	2301      	movs	r3, #1
 8005a04:	e07f      	b.n	8005b06 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	685b      	ldr	r3, [r3, #4]
 8005a0a:	2b02      	cmp	r3, #2
 8005a0c:	d107      	bne.n	8005a1e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a0e:	4b41      	ldr	r3, [pc, #260]	; (8005b14 <HAL_RCC_ClockConfig+0x1c8>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d109      	bne.n	8005a2e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	e073      	b.n	8005b06 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a1e:	4b3d      	ldr	r3, [pc, #244]	; (8005b14 <HAL_RCC_ClockConfig+0x1c8>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f003 0302 	and.w	r3, r3, #2
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d101      	bne.n	8005a2e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	e06b      	b.n	8005b06 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005a2e:	4b39      	ldr	r3, [pc, #228]	; (8005b14 <HAL_RCC_ClockConfig+0x1c8>)
 8005a30:	689b      	ldr	r3, [r3, #8]
 8005a32:	f023 0203 	bic.w	r2, r3, #3
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	685b      	ldr	r3, [r3, #4]
 8005a3a:	4936      	ldr	r1, [pc, #216]	; (8005b14 <HAL_RCC_ClockConfig+0x1c8>)
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a40:	f7fe fc0e 	bl	8004260 <HAL_GetTick>
 8005a44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a46:	e00a      	b.n	8005a5e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a48:	f7fe fc0a 	bl	8004260 <HAL_GetTick>
 8005a4c:	4602      	mov	r2, r0
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	1ad3      	subs	r3, r2, r3
 8005a52:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d901      	bls.n	8005a5e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8005a5a:	2303      	movs	r3, #3
 8005a5c:	e053      	b.n	8005b06 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a5e:	4b2d      	ldr	r3, [pc, #180]	; (8005b14 <HAL_RCC_ClockConfig+0x1c8>)
 8005a60:	689b      	ldr	r3, [r3, #8]
 8005a62:	f003 020c 	and.w	r2, r3, #12
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	685b      	ldr	r3, [r3, #4]
 8005a6a:	009b      	lsls	r3, r3, #2
 8005a6c:	429a      	cmp	r2, r3
 8005a6e:	d1eb      	bne.n	8005a48 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005a70:	4b27      	ldr	r3, [pc, #156]	; (8005b10 <HAL_RCC_ClockConfig+0x1c4>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f003 030f 	and.w	r3, r3, #15
 8005a78:	683a      	ldr	r2, [r7, #0]
 8005a7a:	429a      	cmp	r2, r3
 8005a7c:	d210      	bcs.n	8005aa0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a7e:	4b24      	ldr	r3, [pc, #144]	; (8005b10 <HAL_RCC_ClockConfig+0x1c4>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f023 020f 	bic.w	r2, r3, #15
 8005a86:	4922      	ldr	r1, [pc, #136]	; (8005b10 <HAL_RCC_ClockConfig+0x1c4>)
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a8e:	4b20      	ldr	r3, [pc, #128]	; (8005b10 <HAL_RCC_ClockConfig+0x1c4>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f003 030f 	and.w	r3, r3, #15
 8005a96:	683a      	ldr	r2, [r7, #0]
 8005a98:	429a      	cmp	r2, r3
 8005a9a:	d001      	beq.n	8005aa0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	e032      	b.n	8005b06 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f003 0304 	and.w	r3, r3, #4
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d008      	beq.n	8005abe <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005aac:	4b19      	ldr	r3, [pc, #100]	; (8005b14 <HAL_RCC_ClockConfig+0x1c8>)
 8005aae:	689b      	ldr	r3, [r3, #8]
 8005ab0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	68db      	ldr	r3, [r3, #12]
 8005ab8:	4916      	ldr	r1, [pc, #88]	; (8005b14 <HAL_RCC_ClockConfig+0x1c8>)
 8005aba:	4313      	orrs	r3, r2
 8005abc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f003 0308 	and.w	r3, r3, #8
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d009      	beq.n	8005ade <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005aca:	4b12      	ldr	r3, [pc, #72]	; (8005b14 <HAL_RCC_ClockConfig+0x1c8>)
 8005acc:	689b      	ldr	r3, [r3, #8]
 8005ace:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	691b      	ldr	r3, [r3, #16]
 8005ad6:	00db      	lsls	r3, r3, #3
 8005ad8:	490e      	ldr	r1, [pc, #56]	; (8005b14 <HAL_RCC_ClockConfig+0x1c8>)
 8005ada:	4313      	orrs	r3, r2
 8005adc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005ade:	f000 f821 	bl	8005b24 <HAL_RCC_GetSysClockFreq>
 8005ae2:	4602      	mov	r2, r0
 8005ae4:	4b0b      	ldr	r3, [pc, #44]	; (8005b14 <HAL_RCC_ClockConfig+0x1c8>)
 8005ae6:	689b      	ldr	r3, [r3, #8]
 8005ae8:	091b      	lsrs	r3, r3, #4
 8005aea:	f003 030f 	and.w	r3, r3, #15
 8005aee:	490a      	ldr	r1, [pc, #40]	; (8005b18 <HAL_RCC_ClockConfig+0x1cc>)
 8005af0:	5ccb      	ldrb	r3, [r1, r3]
 8005af2:	fa22 f303 	lsr.w	r3, r2, r3
 8005af6:	4a09      	ldr	r2, [pc, #36]	; (8005b1c <HAL_RCC_ClockConfig+0x1d0>)
 8005af8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005afa:	4b09      	ldr	r3, [pc, #36]	; (8005b20 <HAL_RCC_ClockConfig+0x1d4>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4618      	mov	r0, r3
 8005b00:	f7fe fb6a 	bl	80041d8 <HAL_InitTick>

  return HAL_OK;
 8005b04:	2300      	movs	r3, #0
}
 8005b06:	4618      	mov	r0, r3
 8005b08:	3710      	adds	r7, #16
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bd80      	pop	{r7, pc}
 8005b0e:	bf00      	nop
 8005b10:	40023c00 	.word	0x40023c00
 8005b14:	40023800 	.word	0x40023800
 8005b18:	080069fc 	.word	0x080069fc
 8005b1c:	20000108 	.word	0x20000108
 8005b20:	2000010c 	.word	0x2000010c

08005b24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b28:	b090      	sub	sp, #64	; 0x40
 8005b2a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	637b      	str	r3, [r7, #52]	; 0x34
 8005b30:	2300      	movs	r3, #0
 8005b32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b34:	2300      	movs	r3, #0
 8005b36:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8005b38:	2300      	movs	r3, #0
 8005b3a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005b3c:	4b59      	ldr	r3, [pc, #356]	; (8005ca4 <HAL_RCC_GetSysClockFreq+0x180>)
 8005b3e:	689b      	ldr	r3, [r3, #8]
 8005b40:	f003 030c 	and.w	r3, r3, #12
 8005b44:	2b08      	cmp	r3, #8
 8005b46:	d00d      	beq.n	8005b64 <HAL_RCC_GetSysClockFreq+0x40>
 8005b48:	2b08      	cmp	r3, #8
 8005b4a:	f200 80a1 	bhi.w	8005c90 <HAL_RCC_GetSysClockFreq+0x16c>
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d002      	beq.n	8005b58 <HAL_RCC_GetSysClockFreq+0x34>
 8005b52:	2b04      	cmp	r3, #4
 8005b54:	d003      	beq.n	8005b5e <HAL_RCC_GetSysClockFreq+0x3a>
 8005b56:	e09b      	b.n	8005c90 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005b58:	4b53      	ldr	r3, [pc, #332]	; (8005ca8 <HAL_RCC_GetSysClockFreq+0x184>)
 8005b5a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005b5c:	e09b      	b.n	8005c96 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005b5e:	4b53      	ldr	r3, [pc, #332]	; (8005cac <HAL_RCC_GetSysClockFreq+0x188>)
 8005b60:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005b62:	e098      	b.n	8005c96 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005b64:	4b4f      	ldr	r3, [pc, #316]	; (8005ca4 <HAL_RCC_GetSysClockFreq+0x180>)
 8005b66:	685b      	ldr	r3, [r3, #4]
 8005b68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b6c:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005b6e:	4b4d      	ldr	r3, [pc, #308]	; (8005ca4 <HAL_RCC_GetSysClockFreq+0x180>)
 8005b70:	685b      	ldr	r3, [r3, #4]
 8005b72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d028      	beq.n	8005bcc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b7a:	4b4a      	ldr	r3, [pc, #296]	; (8005ca4 <HAL_RCC_GetSysClockFreq+0x180>)
 8005b7c:	685b      	ldr	r3, [r3, #4]
 8005b7e:	099b      	lsrs	r3, r3, #6
 8005b80:	2200      	movs	r2, #0
 8005b82:	623b      	str	r3, [r7, #32]
 8005b84:	627a      	str	r2, [r7, #36]	; 0x24
 8005b86:	6a3b      	ldr	r3, [r7, #32]
 8005b88:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005b8c:	2100      	movs	r1, #0
 8005b8e:	4b47      	ldr	r3, [pc, #284]	; (8005cac <HAL_RCC_GetSysClockFreq+0x188>)
 8005b90:	fb03 f201 	mul.w	r2, r3, r1
 8005b94:	2300      	movs	r3, #0
 8005b96:	fb00 f303 	mul.w	r3, r0, r3
 8005b9a:	4413      	add	r3, r2
 8005b9c:	4a43      	ldr	r2, [pc, #268]	; (8005cac <HAL_RCC_GetSysClockFreq+0x188>)
 8005b9e:	fba0 1202 	umull	r1, r2, r0, r2
 8005ba2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005ba4:	460a      	mov	r2, r1
 8005ba6:	62ba      	str	r2, [r7, #40]	; 0x28
 8005ba8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005baa:	4413      	add	r3, r2
 8005bac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005bae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	61bb      	str	r3, [r7, #24]
 8005bb4:	61fa      	str	r2, [r7, #28]
 8005bb6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005bba:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005bbe:	f7fa ffd1 	bl	8000b64 <__aeabi_uldivmod>
 8005bc2:	4602      	mov	r2, r0
 8005bc4:	460b      	mov	r3, r1
 8005bc6:	4613      	mov	r3, r2
 8005bc8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005bca:	e053      	b.n	8005c74 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005bcc:	4b35      	ldr	r3, [pc, #212]	; (8005ca4 <HAL_RCC_GetSysClockFreq+0x180>)
 8005bce:	685b      	ldr	r3, [r3, #4]
 8005bd0:	099b      	lsrs	r3, r3, #6
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	613b      	str	r3, [r7, #16]
 8005bd6:	617a      	str	r2, [r7, #20]
 8005bd8:	693b      	ldr	r3, [r7, #16]
 8005bda:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005bde:	f04f 0b00 	mov.w	fp, #0
 8005be2:	4652      	mov	r2, sl
 8005be4:	465b      	mov	r3, fp
 8005be6:	f04f 0000 	mov.w	r0, #0
 8005bea:	f04f 0100 	mov.w	r1, #0
 8005bee:	0159      	lsls	r1, r3, #5
 8005bf0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005bf4:	0150      	lsls	r0, r2, #5
 8005bf6:	4602      	mov	r2, r0
 8005bf8:	460b      	mov	r3, r1
 8005bfa:	ebb2 080a 	subs.w	r8, r2, sl
 8005bfe:	eb63 090b 	sbc.w	r9, r3, fp
 8005c02:	f04f 0200 	mov.w	r2, #0
 8005c06:	f04f 0300 	mov.w	r3, #0
 8005c0a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005c0e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005c12:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005c16:	ebb2 0408 	subs.w	r4, r2, r8
 8005c1a:	eb63 0509 	sbc.w	r5, r3, r9
 8005c1e:	f04f 0200 	mov.w	r2, #0
 8005c22:	f04f 0300 	mov.w	r3, #0
 8005c26:	00eb      	lsls	r3, r5, #3
 8005c28:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005c2c:	00e2      	lsls	r2, r4, #3
 8005c2e:	4614      	mov	r4, r2
 8005c30:	461d      	mov	r5, r3
 8005c32:	eb14 030a 	adds.w	r3, r4, sl
 8005c36:	603b      	str	r3, [r7, #0]
 8005c38:	eb45 030b 	adc.w	r3, r5, fp
 8005c3c:	607b      	str	r3, [r7, #4]
 8005c3e:	f04f 0200 	mov.w	r2, #0
 8005c42:	f04f 0300 	mov.w	r3, #0
 8005c46:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005c4a:	4629      	mov	r1, r5
 8005c4c:	028b      	lsls	r3, r1, #10
 8005c4e:	4621      	mov	r1, r4
 8005c50:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005c54:	4621      	mov	r1, r4
 8005c56:	028a      	lsls	r2, r1, #10
 8005c58:	4610      	mov	r0, r2
 8005c5a:	4619      	mov	r1, r3
 8005c5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c5e:	2200      	movs	r2, #0
 8005c60:	60bb      	str	r3, [r7, #8]
 8005c62:	60fa      	str	r2, [r7, #12]
 8005c64:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005c68:	f7fa ff7c 	bl	8000b64 <__aeabi_uldivmod>
 8005c6c:	4602      	mov	r2, r0
 8005c6e:	460b      	mov	r3, r1
 8005c70:	4613      	mov	r3, r2
 8005c72:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005c74:	4b0b      	ldr	r3, [pc, #44]	; (8005ca4 <HAL_RCC_GetSysClockFreq+0x180>)
 8005c76:	685b      	ldr	r3, [r3, #4]
 8005c78:	0c1b      	lsrs	r3, r3, #16
 8005c7a:	f003 0303 	and.w	r3, r3, #3
 8005c7e:	3301      	adds	r3, #1
 8005c80:	005b      	lsls	r3, r3, #1
 8005c82:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8005c84:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c88:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c8c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005c8e:	e002      	b.n	8005c96 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005c90:	4b05      	ldr	r3, [pc, #20]	; (8005ca8 <HAL_RCC_GetSysClockFreq+0x184>)
 8005c92:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005c94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005c96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005c98:	4618      	mov	r0, r3
 8005c9a:	3740      	adds	r7, #64	; 0x40
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005ca2:	bf00      	nop
 8005ca4:	40023800 	.word	0x40023800
 8005ca8:	00f42400 	.word	0x00f42400
 8005cac:	017d7840 	.word	0x017d7840

08005cb0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b084      	sub	sp, #16
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d101      	bne.n	8005cc2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	e09d      	b.n	8005dfe <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d108      	bne.n	8005cdc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	685b      	ldr	r3, [r3, #4]
 8005cce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005cd2:	d009      	beq.n	8005ce8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	61da      	str	r2, [r3, #28]
 8005cda:	e005      	b.n	8005ce8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2200      	movs	r2, #0
 8005cec:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005cf4:	b2db      	uxtb	r3, r3
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d106      	bne.n	8005d08 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	f7fe f90a 	bl	8003f1c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2202      	movs	r2, #2
 8005d0c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	681a      	ldr	r2, [r3, #0]
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d1e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	68db      	ldr	r3, [r3, #12]
 8005d24:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005d28:	d902      	bls.n	8005d30 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	60fb      	str	r3, [r7, #12]
 8005d2e:	e002      	b.n	8005d36 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005d30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005d34:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	68db      	ldr	r3, [r3, #12]
 8005d3a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005d3e:	d007      	beq.n	8005d50 <HAL_SPI_Init+0xa0>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	68db      	ldr	r3, [r3, #12]
 8005d44:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005d48:	d002      	beq.n	8005d50 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	685b      	ldr	r3, [r3, #4]
 8005d54:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	689b      	ldr	r3, [r3, #8]
 8005d5c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005d60:	431a      	orrs	r2, r3
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	691b      	ldr	r3, [r3, #16]
 8005d66:	f003 0302 	and.w	r3, r3, #2
 8005d6a:	431a      	orrs	r2, r3
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	695b      	ldr	r3, [r3, #20]
 8005d70:	f003 0301 	and.w	r3, r3, #1
 8005d74:	431a      	orrs	r2, r3
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	699b      	ldr	r3, [r3, #24]
 8005d7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d7e:	431a      	orrs	r2, r3
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	69db      	ldr	r3, [r3, #28]
 8005d84:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005d88:	431a      	orrs	r2, r3
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6a1b      	ldr	r3, [r3, #32]
 8005d8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d92:	ea42 0103 	orr.w	r1, r2, r3
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d9a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	430a      	orrs	r2, r1
 8005da4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	699b      	ldr	r3, [r3, #24]
 8005daa:	0c1b      	lsrs	r3, r3, #16
 8005dac:	f003 0204 	and.w	r2, r3, #4
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005db4:	f003 0310 	and.w	r3, r3, #16
 8005db8:	431a      	orrs	r2, r3
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dbe:	f003 0308 	and.w	r3, r3, #8
 8005dc2:	431a      	orrs	r2, r3
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	68db      	ldr	r3, [r3, #12]
 8005dc8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005dcc:	ea42 0103 	orr.w	r1, r2, r3
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	430a      	orrs	r2, r1
 8005ddc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	69da      	ldr	r2, [r3, #28]
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005dec:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2200      	movs	r2, #0
 8005df2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2201      	movs	r2, #1
 8005df8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005dfc:	2300      	movs	r3, #0
}
 8005dfe:	4618      	mov	r0, r3
 8005e00:	3710      	adds	r7, #16
 8005e02:	46bd      	mov	sp, r7
 8005e04:	bd80      	pop	{r7, pc}

08005e06 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e06:	b580      	push	{r7, lr}
 8005e08:	b088      	sub	sp, #32
 8005e0a:	af00      	add	r7, sp, #0
 8005e0c:	60f8      	str	r0, [r7, #12]
 8005e0e:	60b9      	str	r1, [r7, #8]
 8005e10:	603b      	str	r3, [r7, #0]
 8005e12:	4613      	mov	r3, r2
 8005e14:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005e16:	2300      	movs	r3, #0
 8005e18:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005e20:	2b01      	cmp	r3, #1
 8005e22:	d101      	bne.n	8005e28 <HAL_SPI_Transmit+0x22>
 8005e24:	2302      	movs	r3, #2
 8005e26:	e158      	b.n	80060da <HAL_SPI_Transmit+0x2d4>
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005e30:	f7fe fa16 	bl	8004260 <HAL_GetTick>
 8005e34:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005e36:	88fb      	ldrh	r3, [r7, #6]
 8005e38:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005e40:	b2db      	uxtb	r3, r3
 8005e42:	2b01      	cmp	r3, #1
 8005e44:	d002      	beq.n	8005e4c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005e46:	2302      	movs	r3, #2
 8005e48:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005e4a:	e13d      	b.n	80060c8 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d002      	beq.n	8005e58 <HAL_SPI_Transmit+0x52>
 8005e52:	88fb      	ldrh	r3, [r7, #6]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d102      	bne.n	8005e5e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005e58:	2301      	movs	r3, #1
 8005e5a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005e5c:	e134      	b.n	80060c8 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	2203      	movs	r2, #3
 8005e62:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	68ba      	ldr	r2, [r7, #8]
 8005e70:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	88fa      	ldrh	r2, [r7, #6]
 8005e76:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	88fa      	ldrh	r2, [r7, #6]
 8005e7c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	2200      	movs	r2, #0
 8005e82:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	2200      	movs	r2, #0
 8005e88:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	2200      	movs	r2, #0
 8005e98:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	689b      	ldr	r3, [r3, #8]
 8005ea4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ea8:	d10f      	bne.n	8005eca <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	681a      	ldr	r2, [r3, #0]
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005eb8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	681a      	ldr	r2, [r3, #0]
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005ec8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ed4:	2b40      	cmp	r3, #64	; 0x40
 8005ed6:	d007      	beq.n	8005ee8 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	681a      	ldr	r2, [r3, #0]
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ee6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	68db      	ldr	r3, [r3, #12]
 8005eec:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005ef0:	d94b      	bls.n	8005f8a <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	685b      	ldr	r3, [r3, #4]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d002      	beq.n	8005f00 <HAL_SPI_Transmit+0xfa>
 8005efa:	8afb      	ldrh	r3, [r7, #22]
 8005efc:	2b01      	cmp	r3, #1
 8005efe:	d13e      	bne.n	8005f7e <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f04:	881a      	ldrh	r2, [r3, #0]
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f10:	1c9a      	adds	r2, r3, #2
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f1a:	b29b      	uxth	r3, r3
 8005f1c:	3b01      	subs	r3, #1
 8005f1e:	b29a      	uxth	r2, r3
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005f24:	e02b      	b.n	8005f7e <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	689b      	ldr	r3, [r3, #8]
 8005f2c:	f003 0302 	and.w	r3, r3, #2
 8005f30:	2b02      	cmp	r3, #2
 8005f32:	d112      	bne.n	8005f5a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f38:	881a      	ldrh	r2, [r3, #0]
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f44:	1c9a      	adds	r2, r3, #2
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f4e:	b29b      	uxth	r3, r3
 8005f50:	3b01      	subs	r3, #1
 8005f52:	b29a      	uxth	r2, r3
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005f58:	e011      	b.n	8005f7e <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005f5a:	f7fe f981 	bl	8004260 <HAL_GetTick>
 8005f5e:	4602      	mov	r2, r0
 8005f60:	69bb      	ldr	r3, [r7, #24]
 8005f62:	1ad3      	subs	r3, r2, r3
 8005f64:	683a      	ldr	r2, [r7, #0]
 8005f66:	429a      	cmp	r2, r3
 8005f68:	d803      	bhi.n	8005f72 <HAL_SPI_Transmit+0x16c>
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f70:	d102      	bne.n	8005f78 <HAL_SPI_Transmit+0x172>
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d102      	bne.n	8005f7e <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8005f78:	2303      	movs	r3, #3
 8005f7a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005f7c:	e0a4      	b.n	80060c8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f82:	b29b      	uxth	r3, r3
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d1ce      	bne.n	8005f26 <HAL_SPI_Transmit+0x120>
 8005f88:	e07c      	b.n	8006084 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	685b      	ldr	r3, [r3, #4]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d002      	beq.n	8005f98 <HAL_SPI_Transmit+0x192>
 8005f92:	8afb      	ldrh	r3, [r7, #22]
 8005f94:	2b01      	cmp	r3, #1
 8005f96:	d170      	bne.n	800607a <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f9c:	b29b      	uxth	r3, r3
 8005f9e:	2b01      	cmp	r3, #1
 8005fa0:	d912      	bls.n	8005fc8 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fa6:	881a      	ldrh	r2, [r3, #0]
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fb2:	1c9a      	adds	r2, r3, #2
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fbc:	b29b      	uxth	r3, r3
 8005fbe:	3b02      	subs	r3, #2
 8005fc0:	b29a      	uxth	r2, r3
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005fc6:	e058      	b.n	800607a <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	330c      	adds	r3, #12
 8005fd2:	7812      	ldrb	r2, [r2, #0]
 8005fd4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fda:	1c5a      	adds	r2, r3, #1
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fe4:	b29b      	uxth	r3, r3
 8005fe6:	3b01      	subs	r3, #1
 8005fe8:	b29a      	uxth	r2, r3
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005fee:	e044      	b.n	800607a <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	689b      	ldr	r3, [r3, #8]
 8005ff6:	f003 0302 	and.w	r3, r3, #2
 8005ffa:	2b02      	cmp	r3, #2
 8005ffc:	d12b      	bne.n	8006056 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006002:	b29b      	uxth	r3, r3
 8006004:	2b01      	cmp	r3, #1
 8006006:	d912      	bls.n	800602e <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800600c:	881a      	ldrh	r2, [r3, #0]
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006018:	1c9a      	adds	r2, r3, #2
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006022:	b29b      	uxth	r3, r3
 8006024:	3b02      	subs	r3, #2
 8006026:	b29a      	uxth	r2, r3
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800602c:	e025      	b.n	800607a <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	330c      	adds	r3, #12
 8006038:	7812      	ldrb	r2, [r2, #0]
 800603a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006040:	1c5a      	adds	r2, r3, #1
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800604a:	b29b      	uxth	r3, r3
 800604c:	3b01      	subs	r3, #1
 800604e:	b29a      	uxth	r2, r3
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006054:	e011      	b.n	800607a <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006056:	f7fe f903 	bl	8004260 <HAL_GetTick>
 800605a:	4602      	mov	r2, r0
 800605c:	69bb      	ldr	r3, [r7, #24]
 800605e:	1ad3      	subs	r3, r2, r3
 8006060:	683a      	ldr	r2, [r7, #0]
 8006062:	429a      	cmp	r2, r3
 8006064:	d803      	bhi.n	800606e <HAL_SPI_Transmit+0x268>
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	f1b3 3fff 	cmp.w	r3, #4294967295
 800606c:	d102      	bne.n	8006074 <HAL_SPI_Transmit+0x26e>
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d102      	bne.n	800607a <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8006074:	2303      	movs	r3, #3
 8006076:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006078:	e026      	b.n	80060c8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800607e:	b29b      	uxth	r3, r3
 8006080:	2b00      	cmp	r3, #0
 8006082:	d1b5      	bne.n	8005ff0 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006084:	69ba      	ldr	r2, [r7, #24]
 8006086:	6839      	ldr	r1, [r7, #0]
 8006088:	68f8      	ldr	r0, [r7, #12]
 800608a:	f000 f949 	bl	8006320 <SPI_EndRxTxTransaction>
 800608e:	4603      	mov	r3, r0
 8006090:	2b00      	cmp	r3, #0
 8006092:	d002      	beq.n	800609a <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	2220      	movs	r2, #32
 8006098:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	689b      	ldr	r3, [r3, #8]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d10a      	bne.n	80060b8 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80060a2:	2300      	movs	r3, #0
 80060a4:	613b      	str	r3, [r7, #16]
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	68db      	ldr	r3, [r3, #12]
 80060ac:	613b      	str	r3, [r7, #16]
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	689b      	ldr	r3, [r3, #8]
 80060b4:	613b      	str	r3, [r7, #16]
 80060b6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d002      	beq.n	80060c6 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80060c0:	2301      	movs	r3, #1
 80060c2:	77fb      	strb	r3, [r7, #31]
 80060c4:	e000      	b.n	80060c8 <HAL_SPI_Transmit+0x2c2>
  }

error:
 80060c6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	2201      	movs	r2, #1
 80060cc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	2200      	movs	r2, #0
 80060d4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80060d8:	7ffb      	ldrb	r3, [r7, #31]
}
 80060da:	4618      	mov	r0, r3
 80060dc:	3720      	adds	r7, #32
 80060de:	46bd      	mov	sp, r7
 80060e0:	bd80      	pop	{r7, pc}
	...

080060e4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b088      	sub	sp, #32
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	60f8      	str	r0, [r7, #12]
 80060ec:	60b9      	str	r1, [r7, #8]
 80060ee:	603b      	str	r3, [r7, #0]
 80060f0:	4613      	mov	r3, r2
 80060f2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80060f4:	f7fe f8b4 	bl	8004260 <HAL_GetTick>
 80060f8:	4602      	mov	r2, r0
 80060fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060fc:	1a9b      	subs	r3, r3, r2
 80060fe:	683a      	ldr	r2, [r7, #0]
 8006100:	4413      	add	r3, r2
 8006102:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006104:	f7fe f8ac 	bl	8004260 <HAL_GetTick>
 8006108:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800610a:	4b39      	ldr	r3, [pc, #228]	; (80061f0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	015b      	lsls	r3, r3, #5
 8006110:	0d1b      	lsrs	r3, r3, #20
 8006112:	69fa      	ldr	r2, [r7, #28]
 8006114:	fb02 f303 	mul.w	r3, r2, r3
 8006118:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800611a:	e054      	b.n	80061c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006122:	d050      	beq.n	80061c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006124:	f7fe f89c 	bl	8004260 <HAL_GetTick>
 8006128:	4602      	mov	r2, r0
 800612a:	69bb      	ldr	r3, [r7, #24]
 800612c:	1ad3      	subs	r3, r2, r3
 800612e:	69fa      	ldr	r2, [r7, #28]
 8006130:	429a      	cmp	r2, r3
 8006132:	d902      	bls.n	800613a <SPI_WaitFlagStateUntilTimeout+0x56>
 8006134:	69fb      	ldr	r3, [r7, #28]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d13d      	bne.n	80061b6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	685a      	ldr	r2, [r3, #4]
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006148:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	685b      	ldr	r3, [r3, #4]
 800614e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006152:	d111      	bne.n	8006178 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	689b      	ldr	r3, [r3, #8]
 8006158:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800615c:	d004      	beq.n	8006168 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	689b      	ldr	r3, [r3, #8]
 8006162:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006166:	d107      	bne.n	8006178 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	681a      	ldr	r2, [r3, #0]
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006176:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800617c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006180:	d10f      	bne.n	80061a2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	681a      	ldr	r2, [r3, #0]
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006190:	601a      	str	r2, [r3, #0]
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	681a      	ldr	r2, [r3, #0]
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80061a0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	2201      	movs	r2, #1
 80061a6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	2200      	movs	r2, #0
 80061ae:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80061b2:	2303      	movs	r3, #3
 80061b4:	e017      	b.n	80061e6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80061b6:	697b      	ldr	r3, [r7, #20]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d101      	bne.n	80061c0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80061bc:	2300      	movs	r3, #0
 80061be:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80061c0:	697b      	ldr	r3, [r7, #20]
 80061c2:	3b01      	subs	r3, #1
 80061c4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	689a      	ldr	r2, [r3, #8]
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	4013      	ands	r3, r2
 80061d0:	68ba      	ldr	r2, [r7, #8]
 80061d2:	429a      	cmp	r2, r3
 80061d4:	bf0c      	ite	eq
 80061d6:	2301      	moveq	r3, #1
 80061d8:	2300      	movne	r3, #0
 80061da:	b2db      	uxtb	r3, r3
 80061dc:	461a      	mov	r2, r3
 80061de:	79fb      	ldrb	r3, [r7, #7]
 80061e0:	429a      	cmp	r2, r3
 80061e2:	d19b      	bne.n	800611c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80061e4:	2300      	movs	r3, #0
}
 80061e6:	4618      	mov	r0, r3
 80061e8:	3720      	adds	r7, #32
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bd80      	pop	{r7, pc}
 80061ee:	bf00      	nop
 80061f0:	20000108 	.word	0x20000108

080061f4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b08a      	sub	sp, #40	; 0x28
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	60f8      	str	r0, [r7, #12]
 80061fc:	60b9      	str	r1, [r7, #8]
 80061fe:	607a      	str	r2, [r7, #4]
 8006200:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006202:	2300      	movs	r3, #0
 8006204:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006206:	f7fe f82b 	bl	8004260 <HAL_GetTick>
 800620a:	4602      	mov	r2, r0
 800620c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800620e:	1a9b      	subs	r3, r3, r2
 8006210:	683a      	ldr	r2, [r7, #0]
 8006212:	4413      	add	r3, r2
 8006214:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8006216:	f7fe f823 	bl	8004260 <HAL_GetTick>
 800621a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	330c      	adds	r3, #12
 8006222:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006224:	4b3d      	ldr	r3, [pc, #244]	; (800631c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006226:	681a      	ldr	r2, [r3, #0]
 8006228:	4613      	mov	r3, r2
 800622a:	009b      	lsls	r3, r3, #2
 800622c:	4413      	add	r3, r2
 800622e:	00da      	lsls	r2, r3, #3
 8006230:	1ad3      	subs	r3, r2, r3
 8006232:	0d1b      	lsrs	r3, r3, #20
 8006234:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006236:	fb02 f303 	mul.w	r3, r2, r3
 800623a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800623c:	e060      	b.n	8006300 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006244:	d107      	bne.n	8006256 <SPI_WaitFifoStateUntilTimeout+0x62>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d104      	bne.n	8006256 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800624c:	69fb      	ldr	r3, [r7, #28]
 800624e:	781b      	ldrb	r3, [r3, #0]
 8006250:	b2db      	uxtb	r3, r3
 8006252:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006254:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	f1b3 3fff 	cmp.w	r3, #4294967295
 800625c:	d050      	beq.n	8006300 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800625e:	f7fd ffff 	bl	8004260 <HAL_GetTick>
 8006262:	4602      	mov	r2, r0
 8006264:	6a3b      	ldr	r3, [r7, #32]
 8006266:	1ad3      	subs	r3, r2, r3
 8006268:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800626a:	429a      	cmp	r2, r3
 800626c:	d902      	bls.n	8006274 <SPI_WaitFifoStateUntilTimeout+0x80>
 800626e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006270:	2b00      	cmp	r3, #0
 8006272:	d13d      	bne.n	80062f0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	685a      	ldr	r2, [r3, #4]
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006282:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	685b      	ldr	r3, [r3, #4]
 8006288:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800628c:	d111      	bne.n	80062b2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	689b      	ldr	r3, [r3, #8]
 8006292:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006296:	d004      	beq.n	80062a2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	689b      	ldr	r3, [r3, #8]
 800629c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062a0:	d107      	bne.n	80062b2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	681a      	ldr	r2, [r3, #0]
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062b0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062ba:	d10f      	bne.n	80062dc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	681a      	ldr	r2, [r3, #0]
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80062ca:	601a      	str	r2, [r3, #0]
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	681a      	ldr	r2, [r3, #0]
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80062da:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	2201      	movs	r2, #1
 80062e0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	2200      	movs	r2, #0
 80062e8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80062ec:	2303      	movs	r3, #3
 80062ee:	e010      	b.n	8006312 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80062f0:	69bb      	ldr	r3, [r7, #24]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d101      	bne.n	80062fa <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80062f6:	2300      	movs	r3, #0
 80062f8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80062fa:	69bb      	ldr	r3, [r7, #24]
 80062fc:	3b01      	subs	r3, #1
 80062fe:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	689a      	ldr	r2, [r3, #8]
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	4013      	ands	r3, r2
 800630a:	687a      	ldr	r2, [r7, #4]
 800630c:	429a      	cmp	r2, r3
 800630e:	d196      	bne.n	800623e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006310:	2300      	movs	r3, #0
}
 8006312:	4618      	mov	r0, r3
 8006314:	3728      	adds	r7, #40	; 0x28
 8006316:	46bd      	mov	sp, r7
 8006318:	bd80      	pop	{r7, pc}
 800631a:	bf00      	nop
 800631c:	20000108 	.word	0x20000108

08006320 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b088      	sub	sp, #32
 8006324:	af02      	add	r7, sp, #8
 8006326:	60f8      	str	r0, [r7, #12]
 8006328:	60b9      	str	r1, [r7, #8]
 800632a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	9300      	str	r3, [sp, #0]
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	2200      	movs	r2, #0
 8006334:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006338:	68f8      	ldr	r0, [r7, #12]
 800633a:	f7ff ff5b 	bl	80061f4 <SPI_WaitFifoStateUntilTimeout>
 800633e:	4603      	mov	r3, r0
 8006340:	2b00      	cmp	r3, #0
 8006342:	d007      	beq.n	8006354 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006348:	f043 0220 	orr.w	r2, r3, #32
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006350:	2303      	movs	r3, #3
 8006352:	e046      	b.n	80063e2 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006354:	4b25      	ldr	r3, [pc, #148]	; (80063ec <SPI_EndRxTxTransaction+0xcc>)
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4a25      	ldr	r2, [pc, #148]	; (80063f0 <SPI_EndRxTxTransaction+0xd0>)
 800635a:	fba2 2303 	umull	r2, r3, r2, r3
 800635e:	0d5b      	lsrs	r3, r3, #21
 8006360:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006364:	fb02 f303 	mul.w	r3, r2, r3
 8006368:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	685b      	ldr	r3, [r3, #4]
 800636e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006372:	d112      	bne.n	800639a <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	9300      	str	r3, [sp, #0]
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	2200      	movs	r2, #0
 800637c:	2180      	movs	r1, #128	; 0x80
 800637e:	68f8      	ldr	r0, [r7, #12]
 8006380:	f7ff feb0 	bl	80060e4 <SPI_WaitFlagStateUntilTimeout>
 8006384:	4603      	mov	r3, r0
 8006386:	2b00      	cmp	r3, #0
 8006388:	d016      	beq.n	80063b8 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800638e:	f043 0220 	orr.w	r2, r3, #32
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8006396:	2303      	movs	r3, #3
 8006398:	e023      	b.n	80063e2 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800639a:	697b      	ldr	r3, [r7, #20]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d00a      	beq.n	80063b6 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 80063a0:	697b      	ldr	r3, [r7, #20]
 80063a2:	3b01      	subs	r3, #1
 80063a4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	689b      	ldr	r3, [r3, #8]
 80063ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063b0:	2b80      	cmp	r3, #128	; 0x80
 80063b2:	d0f2      	beq.n	800639a <SPI_EndRxTxTransaction+0x7a>
 80063b4:	e000      	b.n	80063b8 <SPI_EndRxTxTransaction+0x98>
        break;
 80063b6:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	9300      	str	r3, [sp, #0]
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	2200      	movs	r2, #0
 80063c0:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80063c4:	68f8      	ldr	r0, [r7, #12]
 80063c6:	f7ff ff15 	bl	80061f4 <SPI_WaitFifoStateUntilTimeout>
 80063ca:	4603      	mov	r3, r0
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d007      	beq.n	80063e0 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063d4:	f043 0220 	orr.w	r2, r3, #32
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80063dc:	2303      	movs	r3, #3
 80063de:	e000      	b.n	80063e2 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 80063e0:	2300      	movs	r3, #0
}
 80063e2:	4618      	mov	r0, r3
 80063e4:	3718      	adds	r7, #24
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bd80      	pop	{r7, pc}
 80063ea:	bf00      	nop
 80063ec:	20000108 	.word	0x20000108
 80063f0:	165e9f81 	.word	0x165e9f81

080063f4 <_ZdlPvj>:
 80063f4:	f000 b89b 	b.w	800652e <_ZdlPv>

080063f8 <_Znwj>:
 80063f8:	2801      	cmp	r0, #1
 80063fa:	bf38      	it	cc
 80063fc:	2001      	movcc	r0, #1
 80063fe:	b510      	push	{r4, lr}
 8006400:	4604      	mov	r4, r0
 8006402:	4620      	mov	r0, r4
 8006404:	f000 f8d0 	bl	80065a8 <malloc>
 8006408:	b930      	cbnz	r0, 8006418 <_Znwj+0x20>
 800640a:	f000 f893 	bl	8006534 <_ZSt15get_new_handlerv>
 800640e:	b908      	cbnz	r0, 8006414 <_Znwj+0x1c>
 8006410:	f000 f898 	bl	8006544 <abort>
 8006414:	4780      	blx	r0
 8006416:	e7f4      	b.n	8006402 <_Znwj+0xa>
 8006418:	bd10      	pop	{r4, pc}

0800641a <_ZNSaIcEC1Ev>:
 800641a:	4770      	bx	lr

0800641c <_ZNSaIcED1Ev>:
 800641c:	4770      	bx	lr

0800641e <_ZSt17__throw_bad_allocv>:
 800641e:	b508      	push	{r3, lr}
 8006420:	f000 f890 	bl	8006544 <abort>

08006424 <_ZSt19__throw_logic_errorPKc>:
 8006424:	b508      	push	{r3, lr}
 8006426:	f000 f88d 	bl	8006544 <abort>

0800642a <_ZSt20__throw_length_errorPKc>:
 800642a:	b508      	push	{r3, lr}
 800642c:	f000 f88a 	bl	8006544 <abort>

08006430 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
 8006430:	b10a      	cbz	r2, 8006436 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
 8006432:	f000 b8c9 	b.w	80065c8 <memcpy>
 8006436:	4770      	bx	lr

08006438 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 8006438:	b508      	push	{r3, lr}
 800643a:	680b      	ldr	r3, [r1, #0]
 800643c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006440:	d302      	bcc.n	8006448 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 8006442:	480d      	ldr	r0, [pc, #52]	; (8006478 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 8006444:	f7ff fff1 	bl	800642a <_ZSt20__throw_length_errorPKc>
 8006448:	4293      	cmp	r3, r2
 800644a:	d90b      	bls.n	8006464 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 800644c:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 8006450:	ea4f 0042 	mov.w	r0, r2, lsl #1
 8006454:	d206      	bcs.n	8006464 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8006456:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800645a:	bf2a      	itet	cs
 800645c:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
 8006460:	6008      	strcc	r0, [r1, #0]
 8006462:	600b      	strcs	r3, [r1, #0]
 8006464:	6808      	ldr	r0, [r1, #0]
 8006466:	3001      	adds	r0, #1
 8006468:	d501      	bpl.n	800646e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 800646a:	f7ff ffd8 	bl	800641e <_ZSt17__throw_bad_allocv>
 800646e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8006472:	f7ff bfc1 	b.w	80063f8 <_Znwj>
 8006476:	bf00      	nop
 8006478:	08006a14 	.word	0x08006a14

0800647c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 800647c:	f850 3b08 	ldr.w	r3, [r0], #8
 8006480:	4283      	cmp	r3, r0
 8006482:	d002      	beq.n	800648a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 8006484:	4618      	mov	r0, r3
 8006486:	f000 b852 	b.w	800652e <_ZdlPv>
 800648a:	4770      	bx	lr

0800648c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 800648c:	2a01      	cmp	r2, #1
 800648e:	b410      	push	{r4}
 8006490:	d104      	bne.n	800649c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x10>
 8006492:	780a      	ldrb	r2, [r1, #0]
 8006494:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006498:	7002      	strb	r2, [r0, #0]
 800649a:	4770      	bx	lr
 800649c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80064a0:	f7ff bfc6 	b.w	8006430 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

080064a4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 80064a4:	b508      	push	{r3, lr}
 80064a6:	1a52      	subs	r2, r2, r1
 80064a8:	f7ff fff0 	bl	800648c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80064ac:	bd08      	pop	{r3, pc}

080064ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 80064ae:	b510      	push	{r4, lr}
 80064b0:	4604      	mov	r4, r0
 80064b2:	f7ff ffe3 	bl	800647c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 80064b6:	4620      	mov	r0, r4
 80064b8:	bd10      	pop	{r4, pc}
	...

080064bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 80064bc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80064be:	4604      	mov	r4, r0
 80064c0:	4616      	mov	r6, r2
 80064c2:	460d      	mov	r5, r1
 80064c4:	b919      	cbnz	r1, 80064ce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 80064c6:	b112      	cbz	r2, 80064ce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 80064c8:	480d      	ldr	r0, [pc, #52]	; (8006500 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 80064ca:	f7ff ffab 	bl	8006424 <_ZSt19__throw_logic_errorPKc>
 80064ce:	1b73      	subs	r3, r6, r5
 80064d0:	2b0f      	cmp	r3, #15
 80064d2:	9301      	str	r3, [sp, #4]
 80064d4:	d907      	bls.n	80064e6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
 80064d6:	2200      	movs	r2, #0
 80064d8:	a901      	add	r1, sp, #4
 80064da:	4620      	mov	r0, r4
 80064dc:	f7ff ffac 	bl	8006438 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 80064e0:	9b01      	ldr	r3, [sp, #4]
 80064e2:	6020      	str	r0, [r4, #0]
 80064e4:	60a3      	str	r3, [r4, #8]
 80064e6:	4632      	mov	r2, r6
 80064e8:	4629      	mov	r1, r5
 80064ea:	6820      	ldr	r0, [r4, #0]
 80064ec:	f7ff ffda 	bl	80064a4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 80064f0:	9b01      	ldr	r3, [sp, #4]
 80064f2:	6822      	ldr	r2, [r4, #0]
 80064f4:	6063      	str	r3, [r4, #4]
 80064f6:	2100      	movs	r1, #0
 80064f8:	54d1      	strb	r1, [r2, r3]
 80064fa:	b002      	add	sp, #8
 80064fc:	bd70      	pop	{r4, r5, r6, pc}
 80064fe:	bf00      	nop
 8006500:	08006a2c 	.word	0x08006a2c

08006504 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 8006504:	b538      	push	{r3, r4, r5, lr}
 8006506:	f100 0308 	add.w	r3, r0, #8
 800650a:	4604      	mov	r4, r0
 800650c:	6003      	str	r3, [r0, #0]
 800650e:	460d      	mov	r5, r1
 8006510:	b159      	cbz	r1, 800652a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x26>
 8006512:	4608      	mov	r0, r1
 8006514:	f7f9 fe78 	bl	8000208 <strlen>
 8006518:	182a      	adds	r2, r5, r0
 800651a:	4620      	mov	r0, r4
 800651c:	f04f 0300 	mov.w	r3, #0
 8006520:	4629      	mov	r1, r5
 8006522:	f7ff ffcb 	bl	80064bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 8006526:	4620      	mov	r0, r4
 8006528:	bd38      	pop	{r3, r4, r5, pc}
 800652a:	2201      	movs	r2, #1
 800652c:	e7f5      	b.n	800651a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x16>

0800652e <_ZdlPv>:
 800652e:	f000 b843 	b.w	80065b8 <free>
	...

08006534 <_ZSt15get_new_handlerv>:
 8006534:	4b02      	ldr	r3, [pc, #8]	; (8006540 <_ZSt15get_new_handlerv+0xc>)
 8006536:	6818      	ldr	r0, [r3, #0]
 8006538:	f3bf 8f5b 	dmb	ish
 800653c:	4770      	bx	lr
 800653e:	bf00      	nop
 8006540:	200002f8 	.word	0x200002f8

08006544 <abort>:
 8006544:	b508      	push	{r3, lr}
 8006546:	2006      	movs	r0, #6
 8006548:	f000 f986 	bl	8006858 <raise>
 800654c:	2001      	movs	r0, #1
 800654e:	f7fd fdbb 	bl	80040c8 <_exit>
	...

08006554 <__errno>:
 8006554:	4b01      	ldr	r3, [pc, #4]	; (800655c <__errno+0x8>)
 8006556:	6818      	ldr	r0, [r3, #0]
 8006558:	4770      	bx	lr
 800655a:	bf00      	nop
 800655c:	20000114 	.word	0x20000114

08006560 <__libc_init_array>:
 8006560:	b570      	push	{r4, r5, r6, lr}
 8006562:	4d0d      	ldr	r5, [pc, #52]	; (8006598 <__libc_init_array+0x38>)
 8006564:	4c0d      	ldr	r4, [pc, #52]	; (800659c <__libc_init_array+0x3c>)
 8006566:	1b64      	subs	r4, r4, r5
 8006568:	10a4      	asrs	r4, r4, #2
 800656a:	2600      	movs	r6, #0
 800656c:	42a6      	cmp	r6, r4
 800656e:	d109      	bne.n	8006584 <__libc_init_array+0x24>
 8006570:	4d0b      	ldr	r5, [pc, #44]	; (80065a0 <__libc_init_array+0x40>)
 8006572:	4c0c      	ldr	r4, [pc, #48]	; (80065a4 <__libc_init_array+0x44>)
 8006574:	f000 f99a 	bl	80068ac <_init>
 8006578:	1b64      	subs	r4, r4, r5
 800657a:	10a4      	asrs	r4, r4, #2
 800657c:	2600      	movs	r6, #0
 800657e:	42a6      	cmp	r6, r4
 8006580:	d105      	bne.n	800658e <__libc_init_array+0x2e>
 8006582:	bd70      	pop	{r4, r5, r6, pc}
 8006584:	f855 3b04 	ldr.w	r3, [r5], #4
 8006588:	4798      	blx	r3
 800658a:	3601      	adds	r6, #1
 800658c:	e7ee      	b.n	800656c <__libc_init_array+0xc>
 800658e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006592:	4798      	blx	r3
 8006594:	3601      	adds	r6, #1
 8006596:	e7f2      	b.n	800657e <__libc_init_array+0x1e>
 8006598:	08006a60 	.word	0x08006a60
 800659c:	08006a60 	.word	0x08006a60
 80065a0:	08006a60 	.word	0x08006a60
 80065a4:	08006a68 	.word	0x08006a68

080065a8 <malloc>:
 80065a8:	4b02      	ldr	r3, [pc, #8]	; (80065b4 <malloc+0xc>)
 80065aa:	4601      	mov	r1, r0
 80065ac:	6818      	ldr	r0, [r3, #0]
 80065ae:	f000 b8a7 	b.w	8006700 <_malloc_r>
 80065b2:	bf00      	nop
 80065b4:	20000114 	.word	0x20000114

080065b8 <free>:
 80065b8:	4b02      	ldr	r3, [pc, #8]	; (80065c4 <free+0xc>)
 80065ba:	4601      	mov	r1, r0
 80065bc:	6818      	ldr	r0, [r3, #0]
 80065be:	f000 b833 	b.w	8006628 <_free_r>
 80065c2:	bf00      	nop
 80065c4:	20000114 	.word	0x20000114

080065c8 <memcpy>:
 80065c8:	440a      	add	r2, r1
 80065ca:	4291      	cmp	r1, r2
 80065cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80065d0:	d100      	bne.n	80065d4 <memcpy+0xc>
 80065d2:	4770      	bx	lr
 80065d4:	b510      	push	{r4, lr}
 80065d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80065da:	f803 4f01 	strb.w	r4, [r3, #1]!
 80065de:	4291      	cmp	r1, r2
 80065e0:	d1f9      	bne.n	80065d6 <memcpy+0xe>
 80065e2:	bd10      	pop	{r4, pc}

080065e4 <memmove>:
 80065e4:	4288      	cmp	r0, r1
 80065e6:	b510      	push	{r4, lr}
 80065e8:	eb01 0402 	add.w	r4, r1, r2
 80065ec:	d902      	bls.n	80065f4 <memmove+0x10>
 80065ee:	4284      	cmp	r4, r0
 80065f0:	4623      	mov	r3, r4
 80065f2:	d807      	bhi.n	8006604 <memmove+0x20>
 80065f4:	1e43      	subs	r3, r0, #1
 80065f6:	42a1      	cmp	r1, r4
 80065f8:	d008      	beq.n	800660c <memmove+0x28>
 80065fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80065fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006602:	e7f8      	b.n	80065f6 <memmove+0x12>
 8006604:	4402      	add	r2, r0
 8006606:	4601      	mov	r1, r0
 8006608:	428a      	cmp	r2, r1
 800660a:	d100      	bne.n	800660e <memmove+0x2a>
 800660c:	bd10      	pop	{r4, pc}
 800660e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006612:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006616:	e7f7      	b.n	8006608 <memmove+0x24>

08006618 <memset>:
 8006618:	4402      	add	r2, r0
 800661a:	4603      	mov	r3, r0
 800661c:	4293      	cmp	r3, r2
 800661e:	d100      	bne.n	8006622 <memset+0xa>
 8006620:	4770      	bx	lr
 8006622:	f803 1b01 	strb.w	r1, [r3], #1
 8006626:	e7f9      	b.n	800661c <memset+0x4>

08006628 <_free_r>:
 8006628:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800662a:	2900      	cmp	r1, #0
 800662c:	d044      	beq.n	80066b8 <_free_r+0x90>
 800662e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006632:	9001      	str	r0, [sp, #4]
 8006634:	2b00      	cmp	r3, #0
 8006636:	f1a1 0404 	sub.w	r4, r1, #4
 800663a:	bfb8      	it	lt
 800663c:	18e4      	addlt	r4, r4, r3
 800663e:	f000 f927 	bl	8006890 <__malloc_lock>
 8006642:	4a1e      	ldr	r2, [pc, #120]	; (80066bc <_free_r+0x94>)
 8006644:	9801      	ldr	r0, [sp, #4]
 8006646:	6813      	ldr	r3, [r2, #0]
 8006648:	b933      	cbnz	r3, 8006658 <_free_r+0x30>
 800664a:	6063      	str	r3, [r4, #4]
 800664c:	6014      	str	r4, [r2, #0]
 800664e:	b003      	add	sp, #12
 8006650:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006654:	f000 b922 	b.w	800689c <__malloc_unlock>
 8006658:	42a3      	cmp	r3, r4
 800665a:	d908      	bls.n	800666e <_free_r+0x46>
 800665c:	6825      	ldr	r5, [r4, #0]
 800665e:	1961      	adds	r1, r4, r5
 8006660:	428b      	cmp	r3, r1
 8006662:	bf01      	itttt	eq
 8006664:	6819      	ldreq	r1, [r3, #0]
 8006666:	685b      	ldreq	r3, [r3, #4]
 8006668:	1949      	addeq	r1, r1, r5
 800666a:	6021      	streq	r1, [r4, #0]
 800666c:	e7ed      	b.n	800664a <_free_r+0x22>
 800666e:	461a      	mov	r2, r3
 8006670:	685b      	ldr	r3, [r3, #4]
 8006672:	b10b      	cbz	r3, 8006678 <_free_r+0x50>
 8006674:	42a3      	cmp	r3, r4
 8006676:	d9fa      	bls.n	800666e <_free_r+0x46>
 8006678:	6811      	ldr	r1, [r2, #0]
 800667a:	1855      	adds	r5, r2, r1
 800667c:	42a5      	cmp	r5, r4
 800667e:	d10b      	bne.n	8006698 <_free_r+0x70>
 8006680:	6824      	ldr	r4, [r4, #0]
 8006682:	4421      	add	r1, r4
 8006684:	1854      	adds	r4, r2, r1
 8006686:	42a3      	cmp	r3, r4
 8006688:	6011      	str	r1, [r2, #0]
 800668a:	d1e0      	bne.n	800664e <_free_r+0x26>
 800668c:	681c      	ldr	r4, [r3, #0]
 800668e:	685b      	ldr	r3, [r3, #4]
 8006690:	6053      	str	r3, [r2, #4]
 8006692:	4421      	add	r1, r4
 8006694:	6011      	str	r1, [r2, #0]
 8006696:	e7da      	b.n	800664e <_free_r+0x26>
 8006698:	d902      	bls.n	80066a0 <_free_r+0x78>
 800669a:	230c      	movs	r3, #12
 800669c:	6003      	str	r3, [r0, #0]
 800669e:	e7d6      	b.n	800664e <_free_r+0x26>
 80066a0:	6825      	ldr	r5, [r4, #0]
 80066a2:	1961      	adds	r1, r4, r5
 80066a4:	428b      	cmp	r3, r1
 80066a6:	bf04      	itt	eq
 80066a8:	6819      	ldreq	r1, [r3, #0]
 80066aa:	685b      	ldreq	r3, [r3, #4]
 80066ac:	6063      	str	r3, [r4, #4]
 80066ae:	bf04      	itt	eq
 80066b0:	1949      	addeq	r1, r1, r5
 80066b2:	6021      	streq	r1, [r4, #0]
 80066b4:	6054      	str	r4, [r2, #4]
 80066b6:	e7ca      	b.n	800664e <_free_r+0x26>
 80066b8:	b003      	add	sp, #12
 80066ba:	bd30      	pop	{r4, r5, pc}
 80066bc:	200002fc 	.word	0x200002fc

080066c0 <sbrk_aligned>:
 80066c0:	b570      	push	{r4, r5, r6, lr}
 80066c2:	4e0e      	ldr	r6, [pc, #56]	; (80066fc <sbrk_aligned+0x3c>)
 80066c4:	460c      	mov	r4, r1
 80066c6:	6831      	ldr	r1, [r6, #0]
 80066c8:	4605      	mov	r5, r0
 80066ca:	b911      	cbnz	r1, 80066d2 <sbrk_aligned+0x12>
 80066cc:	f000 f88c 	bl	80067e8 <_sbrk_r>
 80066d0:	6030      	str	r0, [r6, #0]
 80066d2:	4621      	mov	r1, r4
 80066d4:	4628      	mov	r0, r5
 80066d6:	f000 f887 	bl	80067e8 <_sbrk_r>
 80066da:	1c43      	adds	r3, r0, #1
 80066dc:	d00a      	beq.n	80066f4 <sbrk_aligned+0x34>
 80066de:	1cc4      	adds	r4, r0, #3
 80066e0:	f024 0403 	bic.w	r4, r4, #3
 80066e4:	42a0      	cmp	r0, r4
 80066e6:	d007      	beq.n	80066f8 <sbrk_aligned+0x38>
 80066e8:	1a21      	subs	r1, r4, r0
 80066ea:	4628      	mov	r0, r5
 80066ec:	f000 f87c 	bl	80067e8 <_sbrk_r>
 80066f0:	3001      	adds	r0, #1
 80066f2:	d101      	bne.n	80066f8 <sbrk_aligned+0x38>
 80066f4:	f04f 34ff 	mov.w	r4, #4294967295
 80066f8:	4620      	mov	r0, r4
 80066fa:	bd70      	pop	{r4, r5, r6, pc}
 80066fc:	20000300 	.word	0x20000300

08006700 <_malloc_r>:
 8006700:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006704:	1ccd      	adds	r5, r1, #3
 8006706:	f025 0503 	bic.w	r5, r5, #3
 800670a:	3508      	adds	r5, #8
 800670c:	2d0c      	cmp	r5, #12
 800670e:	bf38      	it	cc
 8006710:	250c      	movcc	r5, #12
 8006712:	2d00      	cmp	r5, #0
 8006714:	4607      	mov	r7, r0
 8006716:	db01      	blt.n	800671c <_malloc_r+0x1c>
 8006718:	42a9      	cmp	r1, r5
 800671a:	d905      	bls.n	8006728 <_malloc_r+0x28>
 800671c:	230c      	movs	r3, #12
 800671e:	603b      	str	r3, [r7, #0]
 8006720:	2600      	movs	r6, #0
 8006722:	4630      	mov	r0, r6
 8006724:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006728:	4e2e      	ldr	r6, [pc, #184]	; (80067e4 <_malloc_r+0xe4>)
 800672a:	f000 f8b1 	bl	8006890 <__malloc_lock>
 800672e:	6833      	ldr	r3, [r6, #0]
 8006730:	461c      	mov	r4, r3
 8006732:	bb34      	cbnz	r4, 8006782 <_malloc_r+0x82>
 8006734:	4629      	mov	r1, r5
 8006736:	4638      	mov	r0, r7
 8006738:	f7ff ffc2 	bl	80066c0 <sbrk_aligned>
 800673c:	1c43      	adds	r3, r0, #1
 800673e:	4604      	mov	r4, r0
 8006740:	d14d      	bne.n	80067de <_malloc_r+0xde>
 8006742:	6834      	ldr	r4, [r6, #0]
 8006744:	4626      	mov	r6, r4
 8006746:	2e00      	cmp	r6, #0
 8006748:	d140      	bne.n	80067cc <_malloc_r+0xcc>
 800674a:	6823      	ldr	r3, [r4, #0]
 800674c:	4631      	mov	r1, r6
 800674e:	4638      	mov	r0, r7
 8006750:	eb04 0803 	add.w	r8, r4, r3
 8006754:	f000 f848 	bl	80067e8 <_sbrk_r>
 8006758:	4580      	cmp	r8, r0
 800675a:	d13a      	bne.n	80067d2 <_malloc_r+0xd2>
 800675c:	6821      	ldr	r1, [r4, #0]
 800675e:	3503      	adds	r5, #3
 8006760:	1a6d      	subs	r5, r5, r1
 8006762:	f025 0503 	bic.w	r5, r5, #3
 8006766:	3508      	adds	r5, #8
 8006768:	2d0c      	cmp	r5, #12
 800676a:	bf38      	it	cc
 800676c:	250c      	movcc	r5, #12
 800676e:	4629      	mov	r1, r5
 8006770:	4638      	mov	r0, r7
 8006772:	f7ff ffa5 	bl	80066c0 <sbrk_aligned>
 8006776:	3001      	adds	r0, #1
 8006778:	d02b      	beq.n	80067d2 <_malloc_r+0xd2>
 800677a:	6823      	ldr	r3, [r4, #0]
 800677c:	442b      	add	r3, r5
 800677e:	6023      	str	r3, [r4, #0]
 8006780:	e00e      	b.n	80067a0 <_malloc_r+0xa0>
 8006782:	6822      	ldr	r2, [r4, #0]
 8006784:	1b52      	subs	r2, r2, r5
 8006786:	d41e      	bmi.n	80067c6 <_malloc_r+0xc6>
 8006788:	2a0b      	cmp	r2, #11
 800678a:	d916      	bls.n	80067ba <_malloc_r+0xba>
 800678c:	1961      	adds	r1, r4, r5
 800678e:	42a3      	cmp	r3, r4
 8006790:	6025      	str	r5, [r4, #0]
 8006792:	bf18      	it	ne
 8006794:	6059      	strne	r1, [r3, #4]
 8006796:	6863      	ldr	r3, [r4, #4]
 8006798:	bf08      	it	eq
 800679a:	6031      	streq	r1, [r6, #0]
 800679c:	5162      	str	r2, [r4, r5]
 800679e:	604b      	str	r3, [r1, #4]
 80067a0:	4638      	mov	r0, r7
 80067a2:	f104 060b 	add.w	r6, r4, #11
 80067a6:	f000 f879 	bl	800689c <__malloc_unlock>
 80067aa:	f026 0607 	bic.w	r6, r6, #7
 80067ae:	1d23      	adds	r3, r4, #4
 80067b0:	1af2      	subs	r2, r6, r3
 80067b2:	d0b6      	beq.n	8006722 <_malloc_r+0x22>
 80067b4:	1b9b      	subs	r3, r3, r6
 80067b6:	50a3      	str	r3, [r4, r2]
 80067b8:	e7b3      	b.n	8006722 <_malloc_r+0x22>
 80067ba:	6862      	ldr	r2, [r4, #4]
 80067bc:	42a3      	cmp	r3, r4
 80067be:	bf0c      	ite	eq
 80067c0:	6032      	streq	r2, [r6, #0]
 80067c2:	605a      	strne	r2, [r3, #4]
 80067c4:	e7ec      	b.n	80067a0 <_malloc_r+0xa0>
 80067c6:	4623      	mov	r3, r4
 80067c8:	6864      	ldr	r4, [r4, #4]
 80067ca:	e7b2      	b.n	8006732 <_malloc_r+0x32>
 80067cc:	4634      	mov	r4, r6
 80067ce:	6876      	ldr	r6, [r6, #4]
 80067d0:	e7b9      	b.n	8006746 <_malloc_r+0x46>
 80067d2:	230c      	movs	r3, #12
 80067d4:	603b      	str	r3, [r7, #0]
 80067d6:	4638      	mov	r0, r7
 80067d8:	f000 f860 	bl	800689c <__malloc_unlock>
 80067dc:	e7a1      	b.n	8006722 <_malloc_r+0x22>
 80067de:	6025      	str	r5, [r4, #0]
 80067e0:	e7de      	b.n	80067a0 <_malloc_r+0xa0>
 80067e2:	bf00      	nop
 80067e4:	200002fc 	.word	0x200002fc

080067e8 <_sbrk_r>:
 80067e8:	b538      	push	{r3, r4, r5, lr}
 80067ea:	4d06      	ldr	r5, [pc, #24]	; (8006804 <_sbrk_r+0x1c>)
 80067ec:	2300      	movs	r3, #0
 80067ee:	4604      	mov	r4, r0
 80067f0:	4608      	mov	r0, r1
 80067f2:	602b      	str	r3, [r5, #0]
 80067f4:	f7fd fc72 	bl	80040dc <_sbrk>
 80067f8:	1c43      	adds	r3, r0, #1
 80067fa:	d102      	bne.n	8006802 <_sbrk_r+0x1a>
 80067fc:	682b      	ldr	r3, [r5, #0]
 80067fe:	b103      	cbz	r3, 8006802 <_sbrk_r+0x1a>
 8006800:	6023      	str	r3, [r4, #0]
 8006802:	bd38      	pop	{r3, r4, r5, pc}
 8006804:	20000304 	.word	0x20000304

08006808 <_raise_r>:
 8006808:	291f      	cmp	r1, #31
 800680a:	b538      	push	{r3, r4, r5, lr}
 800680c:	4604      	mov	r4, r0
 800680e:	460d      	mov	r5, r1
 8006810:	d904      	bls.n	800681c <_raise_r+0x14>
 8006812:	2316      	movs	r3, #22
 8006814:	6003      	str	r3, [r0, #0]
 8006816:	f04f 30ff 	mov.w	r0, #4294967295
 800681a:	bd38      	pop	{r3, r4, r5, pc}
 800681c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800681e:	b112      	cbz	r2, 8006826 <_raise_r+0x1e>
 8006820:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006824:	b94b      	cbnz	r3, 800683a <_raise_r+0x32>
 8006826:	4620      	mov	r0, r4
 8006828:	f000 f830 	bl	800688c <_getpid_r>
 800682c:	462a      	mov	r2, r5
 800682e:	4601      	mov	r1, r0
 8006830:	4620      	mov	r0, r4
 8006832:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006836:	f000 b817 	b.w	8006868 <_kill_r>
 800683a:	2b01      	cmp	r3, #1
 800683c:	d00a      	beq.n	8006854 <_raise_r+0x4c>
 800683e:	1c59      	adds	r1, r3, #1
 8006840:	d103      	bne.n	800684a <_raise_r+0x42>
 8006842:	2316      	movs	r3, #22
 8006844:	6003      	str	r3, [r0, #0]
 8006846:	2001      	movs	r0, #1
 8006848:	e7e7      	b.n	800681a <_raise_r+0x12>
 800684a:	2400      	movs	r4, #0
 800684c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006850:	4628      	mov	r0, r5
 8006852:	4798      	blx	r3
 8006854:	2000      	movs	r0, #0
 8006856:	e7e0      	b.n	800681a <_raise_r+0x12>

08006858 <raise>:
 8006858:	4b02      	ldr	r3, [pc, #8]	; (8006864 <raise+0xc>)
 800685a:	4601      	mov	r1, r0
 800685c:	6818      	ldr	r0, [r3, #0]
 800685e:	f7ff bfd3 	b.w	8006808 <_raise_r>
 8006862:	bf00      	nop
 8006864:	20000114 	.word	0x20000114

08006868 <_kill_r>:
 8006868:	b538      	push	{r3, r4, r5, lr}
 800686a:	4d07      	ldr	r5, [pc, #28]	; (8006888 <_kill_r+0x20>)
 800686c:	2300      	movs	r3, #0
 800686e:	4604      	mov	r4, r0
 8006870:	4608      	mov	r0, r1
 8006872:	4611      	mov	r1, r2
 8006874:	602b      	str	r3, [r5, #0]
 8006876:	f7fd fc17 	bl	80040a8 <_kill>
 800687a:	1c43      	adds	r3, r0, #1
 800687c:	d102      	bne.n	8006884 <_kill_r+0x1c>
 800687e:	682b      	ldr	r3, [r5, #0]
 8006880:	b103      	cbz	r3, 8006884 <_kill_r+0x1c>
 8006882:	6023      	str	r3, [r4, #0]
 8006884:	bd38      	pop	{r3, r4, r5, pc}
 8006886:	bf00      	nop
 8006888:	20000304 	.word	0x20000304

0800688c <_getpid_r>:
 800688c:	f7fd bc04 	b.w	8004098 <_getpid>

08006890 <__malloc_lock>:
 8006890:	4801      	ldr	r0, [pc, #4]	; (8006898 <__malloc_lock+0x8>)
 8006892:	f000 b809 	b.w	80068a8 <__retarget_lock_acquire_recursive>
 8006896:	bf00      	nop
 8006898:	20000308 	.word	0x20000308

0800689c <__malloc_unlock>:
 800689c:	4801      	ldr	r0, [pc, #4]	; (80068a4 <__malloc_unlock+0x8>)
 800689e:	f000 b804 	b.w	80068aa <__retarget_lock_release_recursive>
 80068a2:	bf00      	nop
 80068a4:	20000308 	.word	0x20000308

080068a8 <__retarget_lock_acquire_recursive>:
 80068a8:	4770      	bx	lr

080068aa <__retarget_lock_release_recursive>:
 80068aa:	4770      	bx	lr

080068ac <_init>:
 80068ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068ae:	bf00      	nop
 80068b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068b2:	bc08      	pop	{r3}
 80068b4:	469e      	mov	lr, r3
 80068b6:	4770      	bx	lr

080068b8 <_fini>:
 80068b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068ba:	bf00      	nop
 80068bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068be:	bc08      	pop	{r3}
 80068c0:	469e      	mov	lr, r3
 80068c2:	4770      	bx	lr
