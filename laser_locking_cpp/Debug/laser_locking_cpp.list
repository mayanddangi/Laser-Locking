
laser_locking_cpp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006714  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000164  080068dc  080068dc  000168dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a40  08006a40  00020178  2**0
                  CONTENTS
  4 .ARM          00000008  08006a40  08006a40  00016a40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006a48  08006a48  00020178  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08006a48  08006a48  00016a48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08006a50  08006a50  00016a50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000178  20000000  08006a58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000190  20000178  08006bd0  00020178  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000308  08006bd0  00020308  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020178  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018c90  00000000  00000000  000201a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002b24  00000000  00000000  00038e38  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ef0  00000000  00000000  0003b960  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000da8  00000000  00000000  0003c850  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002a544  00000000  00000000  0003d5f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000cb63  00000000  00000000  00067b3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f9832  00000000  00000000  0007469f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0016ded1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000055ec  00000000  00000000  0016df4c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000178 	.word	0x20000178
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080068c4 	.word	0x080068c4

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	2000017c 	.word	0x2000017c
 8000204:	080068c4 	.word	0x080068c4

08000208 <strlen>:
 8000208:	4603      	mov	r3, r0
 800020a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020e:	2a00      	cmp	r2, #0
 8000210:	d1fb      	bne.n	800020a <strlen+0x2>
 8000212:	1a18      	subs	r0, r3, r0
 8000214:	3801      	subs	r0, #1
 8000216:	4770      	bx	lr

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000356:	f1a4 0401 	sub.w	r4, r4, #1
 800035a:	d1e9      	bne.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2f>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000acc:	bf24      	itt	cs
 8000ace:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ad6:	d90d      	bls.n	8000af4 <__aeabi_d2f+0x30>
 8000ad8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000adc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ae8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aec:	bf08      	it	eq
 8000aee:	f020 0001 	biceq.w	r0, r0, #1
 8000af2:	4770      	bx	lr
 8000af4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000af8:	d121      	bne.n	8000b3e <__aeabi_d2f+0x7a>
 8000afa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000afe:	bfbc      	itt	lt
 8000b00:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b04:	4770      	bxlt	lr
 8000b06:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b0e:	f1c2 0218 	rsb	r2, r2, #24
 8000b12:	f1c2 0c20 	rsb	ip, r2, #32
 8000b16:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b1e:	bf18      	it	ne
 8000b20:	f040 0001 	orrne.w	r0, r0, #1
 8000b24:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b28:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b2c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b30:	ea40 000c 	orr.w	r0, r0, ip
 8000b34:	fa23 f302 	lsr.w	r3, r3, r2
 8000b38:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b3c:	e7cc      	b.n	8000ad8 <__aeabi_d2f+0x14>
 8000b3e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b42:	d107      	bne.n	8000b54 <__aeabi_d2f+0x90>
 8000b44:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b48:	bf1e      	ittt	ne
 8000b4a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b4e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b52:	4770      	bxne	lr
 8000b54:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b58:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b5c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop

08000b64 <__aeabi_uldivmod>:
 8000b64:	b953      	cbnz	r3, 8000b7c <__aeabi_uldivmod+0x18>
 8000b66:	b94a      	cbnz	r2, 8000b7c <__aeabi_uldivmod+0x18>
 8000b68:	2900      	cmp	r1, #0
 8000b6a:	bf08      	it	eq
 8000b6c:	2800      	cmpeq	r0, #0
 8000b6e:	bf1c      	itt	ne
 8000b70:	f04f 31ff 	movne.w	r1, #4294967295
 8000b74:	f04f 30ff 	movne.w	r0, #4294967295
 8000b78:	f000 b972 	b.w	8000e60 <__aeabi_idiv0>
 8000b7c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b80:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b84:	f000 f806 	bl	8000b94 <__udivmoddi4>
 8000b88:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b90:	b004      	add	sp, #16
 8000b92:	4770      	bx	lr

08000b94 <__udivmoddi4>:
 8000b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b98:	9e08      	ldr	r6, [sp, #32]
 8000b9a:	4604      	mov	r4, r0
 8000b9c:	4688      	mov	r8, r1
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d14b      	bne.n	8000c3a <__udivmoddi4+0xa6>
 8000ba2:	428a      	cmp	r2, r1
 8000ba4:	4615      	mov	r5, r2
 8000ba6:	d967      	bls.n	8000c78 <__udivmoddi4+0xe4>
 8000ba8:	fab2 f282 	clz	r2, r2
 8000bac:	b14a      	cbz	r2, 8000bc2 <__udivmoddi4+0x2e>
 8000bae:	f1c2 0720 	rsb	r7, r2, #32
 8000bb2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bb6:	fa20 f707 	lsr.w	r7, r0, r7
 8000bba:	4095      	lsls	r5, r2
 8000bbc:	ea47 0803 	orr.w	r8, r7, r3
 8000bc0:	4094      	lsls	r4, r2
 8000bc2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bc6:	0c23      	lsrs	r3, r4, #16
 8000bc8:	fbb8 f7fe 	udiv	r7, r8, lr
 8000bcc:	fa1f fc85 	uxth.w	ip, r5
 8000bd0:	fb0e 8817 	mls	r8, lr, r7, r8
 8000bd4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bd8:	fb07 f10c 	mul.w	r1, r7, ip
 8000bdc:	4299      	cmp	r1, r3
 8000bde:	d909      	bls.n	8000bf4 <__udivmoddi4+0x60>
 8000be0:	18eb      	adds	r3, r5, r3
 8000be2:	f107 30ff 	add.w	r0, r7, #4294967295
 8000be6:	f080 811b 	bcs.w	8000e20 <__udivmoddi4+0x28c>
 8000bea:	4299      	cmp	r1, r3
 8000bec:	f240 8118 	bls.w	8000e20 <__udivmoddi4+0x28c>
 8000bf0:	3f02      	subs	r7, #2
 8000bf2:	442b      	add	r3, r5
 8000bf4:	1a5b      	subs	r3, r3, r1
 8000bf6:	b2a4      	uxth	r4, r4
 8000bf8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000bfc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c00:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c04:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c08:	45a4      	cmp	ip, r4
 8000c0a:	d909      	bls.n	8000c20 <__udivmoddi4+0x8c>
 8000c0c:	192c      	adds	r4, r5, r4
 8000c0e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c12:	f080 8107 	bcs.w	8000e24 <__udivmoddi4+0x290>
 8000c16:	45a4      	cmp	ip, r4
 8000c18:	f240 8104 	bls.w	8000e24 <__udivmoddi4+0x290>
 8000c1c:	3802      	subs	r0, #2
 8000c1e:	442c      	add	r4, r5
 8000c20:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c24:	eba4 040c 	sub.w	r4, r4, ip
 8000c28:	2700      	movs	r7, #0
 8000c2a:	b11e      	cbz	r6, 8000c34 <__udivmoddi4+0xa0>
 8000c2c:	40d4      	lsrs	r4, r2
 8000c2e:	2300      	movs	r3, #0
 8000c30:	e9c6 4300 	strd	r4, r3, [r6]
 8000c34:	4639      	mov	r1, r7
 8000c36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c3a:	428b      	cmp	r3, r1
 8000c3c:	d909      	bls.n	8000c52 <__udivmoddi4+0xbe>
 8000c3e:	2e00      	cmp	r6, #0
 8000c40:	f000 80eb 	beq.w	8000e1a <__udivmoddi4+0x286>
 8000c44:	2700      	movs	r7, #0
 8000c46:	e9c6 0100 	strd	r0, r1, [r6]
 8000c4a:	4638      	mov	r0, r7
 8000c4c:	4639      	mov	r1, r7
 8000c4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c52:	fab3 f783 	clz	r7, r3
 8000c56:	2f00      	cmp	r7, #0
 8000c58:	d147      	bne.n	8000cea <__udivmoddi4+0x156>
 8000c5a:	428b      	cmp	r3, r1
 8000c5c:	d302      	bcc.n	8000c64 <__udivmoddi4+0xd0>
 8000c5e:	4282      	cmp	r2, r0
 8000c60:	f200 80fa 	bhi.w	8000e58 <__udivmoddi4+0x2c4>
 8000c64:	1a84      	subs	r4, r0, r2
 8000c66:	eb61 0303 	sbc.w	r3, r1, r3
 8000c6a:	2001      	movs	r0, #1
 8000c6c:	4698      	mov	r8, r3
 8000c6e:	2e00      	cmp	r6, #0
 8000c70:	d0e0      	beq.n	8000c34 <__udivmoddi4+0xa0>
 8000c72:	e9c6 4800 	strd	r4, r8, [r6]
 8000c76:	e7dd      	b.n	8000c34 <__udivmoddi4+0xa0>
 8000c78:	b902      	cbnz	r2, 8000c7c <__udivmoddi4+0xe8>
 8000c7a:	deff      	udf	#255	; 0xff
 8000c7c:	fab2 f282 	clz	r2, r2
 8000c80:	2a00      	cmp	r2, #0
 8000c82:	f040 808f 	bne.w	8000da4 <__udivmoddi4+0x210>
 8000c86:	1b49      	subs	r1, r1, r5
 8000c88:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c8c:	fa1f f885 	uxth.w	r8, r5
 8000c90:	2701      	movs	r7, #1
 8000c92:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c96:	0c23      	lsrs	r3, r4, #16
 8000c98:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ca0:	fb08 f10c 	mul.w	r1, r8, ip
 8000ca4:	4299      	cmp	r1, r3
 8000ca6:	d907      	bls.n	8000cb8 <__udivmoddi4+0x124>
 8000ca8:	18eb      	adds	r3, r5, r3
 8000caa:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cae:	d202      	bcs.n	8000cb6 <__udivmoddi4+0x122>
 8000cb0:	4299      	cmp	r1, r3
 8000cb2:	f200 80cd 	bhi.w	8000e50 <__udivmoddi4+0x2bc>
 8000cb6:	4684      	mov	ip, r0
 8000cb8:	1a59      	subs	r1, r3, r1
 8000cba:	b2a3      	uxth	r3, r4
 8000cbc:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cc0:	fb0e 1410 	mls	r4, lr, r0, r1
 8000cc4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000cc8:	fb08 f800 	mul.w	r8, r8, r0
 8000ccc:	45a0      	cmp	r8, r4
 8000cce:	d907      	bls.n	8000ce0 <__udivmoddi4+0x14c>
 8000cd0:	192c      	adds	r4, r5, r4
 8000cd2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cd6:	d202      	bcs.n	8000cde <__udivmoddi4+0x14a>
 8000cd8:	45a0      	cmp	r8, r4
 8000cda:	f200 80b6 	bhi.w	8000e4a <__udivmoddi4+0x2b6>
 8000cde:	4618      	mov	r0, r3
 8000ce0:	eba4 0408 	sub.w	r4, r4, r8
 8000ce4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ce8:	e79f      	b.n	8000c2a <__udivmoddi4+0x96>
 8000cea:	f1c7 0c20 	rsb	ip, r7, #32
 8000cee:	40bb      	lsls	r3, r7
 8000cf0:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000cf4:	ea4e 0e03 	orr.w	lr, lr, r3
 8000cf8:	fa01 f407 	lsl.w	r4, r1, r7
 8000cfc:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d00:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d04:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d08:	4325      	orrs	r5, r4
 8000d0a:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d0e:	0c2c      	lsrs	r4, r5, #16
 8000d10:	fb08 3319 	mls	r3, r8, r9, r3
 8000d14:	fa1f fa8e 	uxth.w	sl, lr
 8000d18:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d1c:	fb09 f40a 	mul.w	r4, r9, sl
 8000d20:	429c      	cmp	r4, r3
 8000d22:	fa02 f207 	lsl.w	r2, r2, r7
 8000d26:	fa00 f107 	lsl.w	r1, r0, r7
 8000d2a:	d90b      	bls.n	8000d44 <__udivmoddi4+0x1b0>
 8000d2c:	eb1e 0303 	adds.w	r3, lr, r3
 8000d30:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d34:	f080 8087 	bcs.w	8000e46 <__udivmoddi4+0x2b2>
 8000d38:	429c      	cmp	r4, r3
 8000d3a:	f240 8084 	bls.w	8000e46 <__udivmoddi4+0x2b2>
 8000d3e:	f1a9 0902 	sub.w	r9, r9, #2
 8000d42:	4473      	add	r3, lr
 8000d44:	1b1b      	subs	r3, r3, r4
 8000d46:	b2ad      	uxth	r5, r5
 8000d48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d4c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d50:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d54:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d58:	45a2      	cmp	sl, r4
 8000d5a:	d908      	bls.n	8000d6e <__udivmoddi4+0x1da>
 8000d5c:	eb1e 0404 	adds.w	r4, lr, r4
 8000d60:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d64:	d26b      	bcs.n	8000e3e <__udivmoddi4+0x2aa>
 8000d66:	45a2      	cmp	sl, r4
 8000d68:	d969      	bls.n	8000e3e <__udivmoddi4+0x2aa>
 8000d6a:	3802      	subs	r0, #2
 8000d6c:	4474      	add	r4, lr
 8000d6e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d72:	fba0 8902 	umull	r8, r9, r0, r2
 8000d76:	eba4 040a 	sub.w	r4, r4, sl
 8000d7a:	454c      	cmp	r4, r9
 8000d7c:	46c2      	mov	sl, r8
 8000d7e:	464b      	mov	r3, r9
 8000d80:	d354      	bcc.n	8000e2c <__udivmoddi4+0x298>
 8000d82:	d051      	beq.n	8000e28 <__udivmoddi4+0x294>
 8000d84:	2e00      	cmp	r6, #0
 8000d86:	d069      	beq.n	8000e5c <__udivmoddi4+0x2c8>
 8000d88:	ebb1 050a 	subs.w	r5, r1, sl
 8000d8c:	eb64 0403 	sbc.w	r4, r4, r3
 8000d90:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d94:	40fd      	lsrs	r5, r7
 8000d96:	40fc      	lsrs	r4, r7
 8000d98:	ea4c 0505 	orr.w	r5, ip, r5
 8000d9c:	e9c6 5400 	strd	r5, r4, [r6]
 8000da0:	2700      	movs	r7, #0
 8000da2:	e747      	b.n	8000c34 <__udivmoddi4+0xa0>
 8000da4:	f1c2 0320 	rsb	r3, r2, #32
 8000da8:	fa20 f703 	lsr.w	r7, r0, r3
 8000dac:	4095      	lsls	r5, r2
 8000dae:	fa01 f002 	lsl.w	r0, r1, r2
 8000db2:	fa21 f303 	lsr.w	r3, r1, r3
 8000db6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dba:	4338      	orrs	r0, r7
 8000dbc:	0c01      	lsrs	r1, r0, #16
 8000dbe:	fbb3 f7fe 	udiv	r7, r3, lr
 8000dc2:	fa1f f885 	uxth.w	r8, r5
 8000dc6:	fb0e 3317 	mls	r3, lr, r7, r3
 8000dca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dce:	fb07 f308 	mul.w	r3, r7, r8
 8000dd2:	428b      	cmp	r3, r1
 8000dd4:	fa04 f402 	lsl.w	r4, r4, r2
 8000dd8:	d907      	bls.n	8000dea <__udivmoddi4+0x256>
 8000dda:	1869      	adds	r1, r5, r1
 8000ddc:	f107 3cff 	add.w	ip, r7, #4294967295
 8000de0:	d22f      	bcs.n	8000e42 <__udivmoddi4+0x2ae>
 8000de2:	428b      	cmp	r3, r1
 8000de4:	d92d      	bls.n	8000e42 <__udivmoddi4+0x2ae>
 8000de6:	3f02      	subs	r7, #2
 8000de8:	4429      	add	r1, r5
 8000dea:	1acb      	subs	r3, r1, r3
 8000dec:	b281      	uxth	r1, r0
 8000dee:	fbb3 f0fe 	udiv	r0, r3, lr
 8000df2:	fb0e 3310 	mls	r3, lr, r0, r3
 8000df6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dfa:	fb00 f308 	mul.w	r3, r0, r8
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d907      	bls.n	8000e12 <__udivmoddi4+0x27e>
 8000e02:	1869      	adds	r1, r5, r1
 8000e04:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e08:	d217      	bcs.n	8000e3a <__udivmoddi4+0x2a6>
 8000e0a:	428b      	cmp	r3, r1
 8000e0c:	d915      	bls.n	8000e3a <__udivmoddi4+0x2a6>
 8000e0e:	3802      	subs	r0, #2
 8000e10:	4429      	add	r1, r5
 8000e12:	1ac9      	subs	r1, r1, r3
 8000e14:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e18:	e73b      	b.n	8000c92 <__udivmoddi4+0xfe>
 8000e1a:	4637      	mov	r7, r6
 8000e1c:	4630      	mov	r0, r6
 8000e1e:	e709      	b.n	8000c34 <__udivmoddi4+0xa0>
 8000e20:	4607      	mov	r7, r0
 8000e22:	e6e7      	b.n	8000bf4 <__udivmoddi4+0x60>
 8000e24:	4618      	mov	r0, r3
 8000e26:	e6fb      	b.n	8000c20 <__udivmoddi4+0x8c>
 8000e28:	4541      	cmp	r1, r8
 8000e2a:	d2ab      	bcs.n	8000d84 <__udivmoddi4+0x1f0>
 8000e2c:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e30:	eb69 020e 	sbc.w	r2, r9, lr
 8000e34:	3801      	subs	r0, #1
 8000e36:	4613      	mov	r3, r2
 8000e38:	e7a4      	b.n	8000d84 <__udivmoddi4+0x1f0>
 8000e3a:	4660      	mov	r0, ip
 8000e3c:	e7e9      	b.n	8000e12 <__udivmoddi4+0x27e>
 8000e3e:	4618      	mov	r0, r3
 8000e40:	e795      	b.n	8000d6e <__udivmoddi4+0x1da>
 8000e42:	4667      	mov	r7, ip
 8000e44:	e7d1      	b.n	8000dea <__udivmoddi4+0x256>
 8000e46:	4681      	mov	r9, r0
 8000e48:	e77c      	b.n	8000d44 <__udivmoddi4+0x1b0>
 8000e4a:	3802      	subs	r0, #2
 8000e4c:	442c      	add	r4, r5
 8000e4e:	e747      	b.n	8000ce0 <__udivmoddi4+0x14c>
 8000e50:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e54:	442b      	add	r3, r5
 8000e56:	e72f      	b.n	8000cb8 <__udivmoddi4+0x124>
 8000e58:	4638      	mov	r0, r7
 8000e5a:	e708      	b.n	8000c6e <__udivmoddi4+0xda>
 8000e5c:	4637      	mov	r7, r6
 8000e5e:	e6e9      	b.n	8000c34 <__udivmoddi4+0xa0>

08000e60 <__aeabi_idiv0>:
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop

08000e64 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b084      	sub	sp, #16
 8000e68:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e6a:	463b      	mov	r3, r7
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	601a      	str	r2, [r3, #0]
 8000e70:	605a      	str	r2, [r3, #4]
 8000e72:	609a      	str	r2, [r3, #8]
 8000e74:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000e76:	4b28      	ldr	r3, [pc, #160]	; (8000f18 <MX_ADC1_Init+0xb4>)
 8000e78:	4a28      	ldr	r2, [pc, #160]	; (8000f1c <MX_ADC1_Init+0xb8>)
 8000e7a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 8000e7c:	4b26      	ldr	r3, [pc, #152]	; (8000f18 <MX_ADC1_Init+0xb4>)
 8000e7e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000e82:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e84:	4b24      	ldr	r3, [pc, #144]	; (8000f18 <MX_ADC1_Init+0xb4>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000e8a:	4b23      	ldr	r3, [pc, #140]	; (8000f18 <MX_ADC1_Init+0xb4>)
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000e90:	4b21      	ldr	r3, [pc, #132]	; (8000f18 <MX_ADC1_Init+0xb4>)
 8000e92:	2201      	movs	r2, #1
 8000e94:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e96:	4b20      	ldr	r3, [pc, #128]	; (8000f18 <MX_ADC1_Init+0xb4>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e9e:	4b1e      	ldr	r3, [pc, #120]	; (8000f18 <MX_ADC1_Init+0xb4>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ea4:	4b1c      	ldr	r3, [pc, #112]	; (8000f18 <MX_ADC1_Init+0xb4>)
 8000ea6:	4a1e      	ldr	r2, [pc, #120]	; (8000f20 <MX_ADC1_Init+0xbc>)
 8000ea8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000eaa:	4b1b      	ldr	r3, [pc, #108]	; (8000f18 <MX_ADC1_Init+0xb4>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000eb0:	4b19      	ldr	r3, [pc, #100]	; (8000f18 <MX_ADC1_Init+0xb4>)
 8000eb2:	2202      	movs	r2, #2
 8000eb4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000eb6:	4b18      	ldr	r3, [pc, #96]	; (8000f18 <MX_ADC1_Init+0xb4>)
 8000eb8:	2201      	movs	r2, #1
 8000eba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ebe:	4b16      	ldr	r3, [pc, #88]	; (8000f18 <MX_ADC1_Init+0xb4>)
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ec4:	4814      	ldr	r0, [pc, #80]	; (8000f18 <MX_ADC1_Init+0xb4>)
 8000ec6:	f003 f827 	bl	8003f18 <HAL_ADC_Init>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000ed0:	f002 fe2e 	bl	8003b30 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000ed4:	2306      	movs	r3, #6
 8000ed6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ed8:	2301      	movs	r3, #1
 8000eda:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8000edc:	2306      	movs	r3, #6
 8000ede:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ee0:	463b      	mov	r3, r7
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	480c      	ldr	r0, [pc, #48]	; (8000f18 <MX_ADC1_Init+0xb4>)
 8000ee6:	f003 f973 	bl	80041d0 <HAL_ADC_ConfigChannel>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000ef0:	f002 fe1e 	bl	8003b30 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000ef4:	2305      	movs	r3, #5
 8000ef6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000ef8:	2302      	movs	r3, #2
 8000efa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000efc:	463b      	mov	r3, r7
 8000efe:	4619      	mov	r1, r3
 8000f00:	4805      	ldr	r0, [pc, #20]	; (8000f18 <MX_ADC1_Init+0xb4>)
 8000f02:	f003 f965 	bl	80041d0 <HAL_ADC_ConfigChannel>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000f0c:	f002 fe10 	bl	8003b30 <Error_Handler>
  }

}
 8000f10:	bf00      	nop
 8000f12:	3710      	adds	r7, #16
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	200001e0 	.word	0x200001e0
 8000f1c:	40012000 	.word	0x40012000
 8000f20:	0f000001 	.word	0x0f000001

08000f24 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b08a      	sub	sp, #40	; 0x28
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f2c:	f107 0314 	add.w	r3, r7, #20
 8000f30:	2200      	movs	r2, #0
 8000f32:	601a      	str	r2, [r3, #0]
 8000f34:	605a      	str	r2, [r3, #4]
 8000f36:	609a      	str	r2, [r3, #8]
 8000f38:	60da      	str	r2, [r3, #12]
 8000f3a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a2d      	ldr	r2, [pc, #180]	; (8000ff8 <HAL_ADC_MspInit+0xd4>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d153      	bne.n	8000fee <HAL_ADC_MspInit+0xca>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f46:	4b2d      	ldr	r3, [pc, #180]	; (8000ffc <HAL_ADC_MspInit+0xd8>)
 8000f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f4a:	4a2c      	ldr	r2, [pc, #176]	; (8000ffc <HAL_ADC_MspInit+0xd8>)
 8000f4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f50:	6453      	str	r3, [r2, #68]	; 0x44
 8000f52:	4b2a      	ldr	r3, [pc, #168]	; (8000ffc <HAL_ADC_MspInit+0xd8>)
 8000f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f5a:	613b      	str	r3, [r7, #16]
 8000f5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f5e:	4b27      	ldr	r3, [pc, #156]	; (8000ffc <HAL_ADC_MspInit+0xd8>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f62:	4a26      	ldr	r2, [pc, #152]	; (8000ffc <HAL_ADC_MspInit+0xd8>)
 8000f64:	f043 0301 	orr.w	r3, r3, #1
 8000f68:	6313      	str	r3, [r2, #48]	; 0x30
 8000f6a:	4b24      	ldr	r3, [pc, #144]	; (8000ffc <HAL_ADC_MspInit+0xd8>)
 8000f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6e:	f003 0301 	and.w	r3, r3, #1
 8000f72:	60fb      	str	r3, [r7, #12]
 8000f74:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000f76:	2360      	movs	r3, #96	; 0x60
 8000f78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f7a:	2303      	movs	r3, #3
 8000f7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f82:	f107 0314 	add.w	r3, r7, #20
 8000f86:	4619      	mov	r1, r3
 8000f88:	481d      	ldr	r0, [pc, #116]	; (8001000 <HAL_ADC_MspInit+0xdc>)
 8000f8a:	f004 f8eb 	bl	8005164 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000f8e:	4b1d      	ldr	r3, [pc, #116]	; (8001004 <HAL_ADC_MspInit+0xe0>)
 8000f90:	4a1d      	ldr	r2, [pc, #116]	; (8001008 <HAL_ADC_MspInit+0xe4>)
 8000f92:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000f94:	4b1b      	ldr	r3, [pc, #108]	; (8001004 <HAL_ADC_MspInit+0xe0>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f9a:	4b1a      	ldr	r3, [pc, #104]	; (8001004 <HAL_ADC_MspInit+0xe0>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fa0:	4b18      	ldr	r3, [pc, #96]	; (8001004 <HAL_ADC_MspInit+0xe0>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000fa6:	4b17      	ldr	r3, [pc, #92]	; (8001004 <HAL_ADC_MspInit+0xe0>)
 8000fa8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fac:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000fae:	4b15      	ldr	r3, [pc, #84]	; (8001004 <HAL_ADC_MspInit+0xe0>)
 8000fb0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000fb4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000fb6:	4b13      	ldr	r3, [pc, #76]	; (8001004 <HAL_ADC_MspInit+0xe0>)
 8000fb8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000fbc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000fbe:	4b11      	ldr	r3, [pc, #68]	; (8001004 <HAL_ADC_MspInit+0xe0>)
 8000fc0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fc4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000fc6:	4b0f      	ldr	r3, [pc, #60]	; (8001004 <HAL_ADC_MspInit+0xe0>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000fcc:	4b0d      	ldr	r3, [pc, #52]	; (8001004 <HAL_ADC_MspInit+0xe0>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000fd2:	480c      	ldr	r0, [pc, #48]	; (8001004 <HAL_ADC_MspInit+0xe0>)
 8000fd4:	f003 fd50 	bl	8004a78 <HAL_DMA_Init>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 8000fde:	f002 fda7 	bl	8003b30 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4a07      	ldr	r2, [pc, #28]	; (8001004 <HAL_ADC_MspInit+0xe0>)
 8000fe6:	639a      	str	r2, [r3, #56]	; 0x38
 8000fe8:	4a06      	ldr	r2, [pc, #24]	; (8001004 <HAL_ADC_MspInit+0xe0>)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000fee:	bf00      	nop
 8000ff0:	3728      	adds	r7, #40	; 0x28
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	40012000 	.word	0x40012000
 8000ffc:	40023800 	.word	0x40023800
 8001000:	40020000 	.word	0x40020000
 8001004:	20000228 	.word	0x20000228
 8001008:	40026410 	.word	0x40026410

0800100c <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
 8001014:	6039      	str	r1, [r7, #0]
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	4618      	mov	r0, r3
 800101a:	370c      	adds	r7, #12
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr

08001024 <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 8001024:	b480      	push	{r7}
 8001026:	b083      	sub	sp, #12
 8001028:	af00      	add	r7, sp, #0
 800102a:	ed87 0a01 	vstr	s0, [r7, #4]
 800102e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001032:	eef0 7ae7 	vabs.f32	s15, s15
 8001036:	eeb0 0a67 	vmov.f32	s0, s15
 800103a:	370c      	adds	r7, #12
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr

08001044 <_ZSt16__deque_buf_sizej>:
#define _GLIBCXX_DEQUE_BUF_SIZE 512
#endif

  _GLIBCXX_CONSTEXPR inline size_t
  __deque_buf_size(size_t __size)
  { return (__size < _GLIBCXX_DEQUE_BUF_SIZE
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
	    ? size_t(_GLIBCXX_DEQUE_BUF_SIZE / __size) : size_t(1)); }
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001052:	d205      	bcs.n	8001060 <_ZSt16__deque_buf_sizej+0x1c>
 8001054:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	fbb2 f3f3 	udiv	r3, r2, r3
 800105e:	e000      	b.n	8001062 <_ZSt16__deque_buf_sizej+0x1e>
 8001060:	2301      	movs	r3, #1
 8001062:	4618      	mov	r0, r3
 8001064:	370c      	adds	r7, #12
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
	...

08001070 <alt_main>:
int df_size = 10;
// Queue deri_filter(df_size);

//====================================================================================//

int alt_main(){
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0

	HAL_ADC_Start_DMA(&hadc1, (uint32_t *)PD, 2);
 8001074:	2202      	movs	r2, #2
 8001076:	492f      	ldr	r1, [pc, #188]	; (8001134 <alt_main+0xc4>)
 8001078:	482f      	ldr	r0, [pc, #188]	; (8001138 <alt_main+0xc8>)
 800107a:	f002 ff91 	bl	8003fa0 <HAL_ADC_Start_DMA>
		//---------------- Scanning Mode -------------------
		if(lock_state == 0){
			// generate ramp
		}
		//---------------- Locking Mode --------------------
		if(lock_state == 1){
 800107e:	4b2f      	ldr	r3, [pc, #188]	; (800113c <alt_main+0xcc>)
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d0fb      	beq.n	800107e <alt_main+0xe>

			// initialization

			// PID parameters
			accumulator = 0;
 8001086:	4b2e      	ldr	r3, [pc, #184]	; (8001140 <alt_main+0xd0>)
 8001088:	f04f 0200 	mov.w	r2, #0
 800108c:	601a      	str	r2, [r3, #0]
			accumulator_squared = 0;
 800108e:	4b2d      	ldr	r3, [pc, #180]	; (8001144 <alt_main+0xd4>)
 8001090:	f04f 0200 	mov.w	r2, #0
 8001094:	601a      	str	r2, [r3, #0]
			error_previous = 0;
 8001096:	4b2c      	ldr	r3, [pc, #176]	; (8001148 <alt_main+0xd8>)
 8001098:	f04f 0200 	mov.w	r2, #0
 800109c:	601a      	str	r2, [r3, #0]
			d_error_previous = 0;
 800109e:	4b2b      	ldr	r3, [pc, #172]	; (800114c <alt_main+0xdc>)
 80010a0:	f04f 0200 	mov.w	r2, #0
 80010a4:	601a      	str	r2, [r3, #0]

			// obtain set point
			set_point_time = getSetPoint();
 80010a6:	f000 f85b 	bl	8001160 <_Z11getSetPointv>
 80010aa:	4603      	mov	r3, r0
 80010ac:	ee07 3a90 	vmov	s15, r3
 80010b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010b4:	4b26      	ldr	r3, [pc, #152]	; (8001150 <alt_main+0xe0>)
 80010b6:	edc3 7a00 	vstr	s15, [r3]
			// start PID
			startPID();
 80010ba:	f000 fb7d 	bl	80017b8 <_Z8startPIDv>
			analogWrite(RampOut1(PIID_out+set_point_offset));
 80010be:	4b25      	ldr	r3, [pc, #148]	; (8001154 <alt_main+0xe4>)
 80010c0:	ed93 7a00 	vldr	s14, [r3]
 80010c4:	4b24      	ldr	r3, [pc, #144]	; (8001158 <alt_main+0xe8>)
 80010c6:	edd3 7a00 	vldr	s15, [r3]
 80010ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010d2:	ee17 0a90 	vmov	r0, s15
 80010d6:	f000 faed 	bl	80016b4 <_Z8RampOut1l>
 80010da:	4603      	mov	r3, r0
 80010dc:	4618      	mov	r0, r3
 80010de:	f000 fb19 	bl	8001714 <_Z11analogWritet>
			// auto re-locking
			if(abs(accumulator)>50) {
 80010e2:	4b17      	ldr	r3, [pc, #92]	; (8001140 <alt_main+0xd0>)
 80010e4:	edd3 7a00 	vldr	s15, [r3]
 80010e8:	eeb0 0a67 	vmov.f32	s0, s15
 80010ec:	f7ff ff9a 	bl	8001024 <_ZSt3absf>
 80010f0:	eeb0 7a40 	vmov.f32	s14, s0
 80010f4:	eddf 7a19 	vldr	s15, [pc, #100]	; 800115c <alt_main+0xec>
 80010f8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80010fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001100:	bfcc      	ite	gt
 8001102:	2301      	movgt	r3, #1
 8001104:	2300      	movle	r3, #0
 8001106:	b2db      	uxtb	r3, r3
 8001108:	2b00      	cmp	r3, #0
 800110a:	d0b8      	beq.n	800107e <alt_main+0xe>
//				Serial.println("Out of lock!");
				// loop_counter = 0;
				accumulator = 0;
 800110c:	4b0c      	ldr	r3, [pc, #48]	; (8001140 <alt_main+0xd0>)
 800110e:	f04f 0200 	mov.w	r2, #0
 8001112:	601a      	str	r2, [r3, #0]
				accumulator_squared = 0;
 8001114:	4b0b      	ldr	r3, [pc, #44]	; (8001144 <alt_main+0xd4>)
 8001116:	f04f 0200 	mov.w	r2, #0
 800111a:	601a      	str	r2, [r3, #0]
				set_point_time = getSetPoint();
 800111c:	f000 f820 	bl	8001160 <_Z11getSetPointv>
 8001120:	4603      	mov	r3, r0
 8001122:	ee07 3a90 	vmov	s15, r3
 8001126:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800112a:	4b09      	ldr	r3, [pc, #36]	; (8001150 <alt_main+0xe0>)
 800112c:	edc3 7a00 	vstr	s15, [r3]
		if(lock_state == 0){
 8001130:	e7a5      	b.n	800107e <alt_main+0xe>
 8001132:	bf00      	nop
 8001134:	20000194 	.word	0x20000194
 8001138:	200001e0 	.word	0x200001e0
 800113c:	2000019c 	.word	0x2000019c
 8001140:	200001c4 	.word	0x200001c4
 8001144:	200001c8 	.word	0x200001c8
 8001148:	200001b8 	.word	0x200001b8
 800114c:	200001c0 	.word	0x200001c0
 8001150:	200001a4 	.word	0x200001a4
 8001154:	200001ac 	.word	0x200001ac
 8001158:	200001a8 	.word	0x200001a8
 800115c:	42480000 	.word	0x42480000

08001160 <_Z11getSetPointv>:
		}
	}
	  return 0;
}

uint16_t getSetPoint(){
 8001160:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001162:	b0bf      	sub	sp, #252	; 0xfc
 8001164:	af00      	add	r7, sp, #0
	// ----------------- Filter Initialization -----------------
	// signal filter
	deque<float> signal_filter(sf_size, 0);
 8001166:	4bdb      	ldr	r3, [pc, #876]	; (80014d4 <_Z11getSetPointv+0x374>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	461c      	mov	r4, r3
 800116c:	f04f 0300 	mov.w	r3, #0
 8001170:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8001174:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001178:	4618      	mov	r0, r3
 800117a:	f000 fc5d 	bl	8001a38 <_ZNSaIfEC1Ev>
 800117e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001182:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001186:	f107 0084 	add.w	r0, r7, #132	; 0x84
 800118a:	4621      	mov	r1, r4
 800118c:	f000 fc6c 	bl	8001a68 <_ZNSt5dequeIfSaIfEEC1EjRKfRKS0_>
 8001190:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001194:	4618      	mov	r0, r3
 8001196:	f000 fc5b 	bl	8001a50 <_ZNSaIfED1Ev>

	// derivative filter
	deque<float> deri_filter(df_size, 0);
 800119a:	4bcf      	ldr	r3, [pc, #828]	; (80014d8 <_Z11getSetPointv+0x378>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	461c      	mov	r4, r3
 80011a0:	f04f 0300 	mov.w	r3, #0
 80011a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80011a8:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80011ac:	4618      	mov	r0, r3
 80011ae:	f000 fc43 	bl	8001a38 <_ZNSaIfEC1Ev>
 80011b2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80011b6:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 80011ba:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 80011be:	4621      	mov	r1, r4
 80011c0:	f000 fc52 	bl	8001a68 <_ZNSt5dequeIfSaIfEEC1EjRKfRKS0_>
 80011c4:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80011c8:	4618      	mov	r0, r3
 80011ca:	f000 fc41 	bl	8001a50 <_ZNSaIfED1Ev>

	// --------------------- Peak Finding ----------------------
	float max_val = -5;
 80011ce:	4bc3      	ldr	r3, [pc, #780]	; (80014dc <_Z11getSetPointv+0x37c>)
 80011d0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
	float min_val = 5;
 80011d4:	4bc2      	ldr	r3, [pc, #776]	; (80014e0 <_Z11getSetPointv+0x380>)
 80011d6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
	uint16_t max_val_time = 0;
 80011da:	2300      	movs	r3, #0
 80011dc:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint16_t min_val_time = 0;
 80011e0:	2300      	movs	r3, #0
 80011e2:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58

	deque<uint16_t> minima_time;
 80011e6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80011ea:	4618      	mov	r0, r3
 80011ec:	f000 fc77 	bl	8001ade <_ZNSt5dequeItSaItEEC1Ev>
	deque<uint16_t> maxima_time;
 80011f0:	f107 0308 	add.w	r3, r7, #8
 80011f4:	4618      	mov	r0, r3
 80011f6:	f000 fc72 	bl	8001ade <_ZNSt5dequeItSaItEEC1Ev>

	float err_sig = 0;
 80011fa:	f04f 0300 	mov.w	r3, #0
 80011fe:	607b      	str	r3, [r7, #4]
	float err_sig_prev = 0;
 8001200:	f04f 0300 	mov.w	r3, #0
 8001204:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	float err_sig_avg = 0;
 8001208:	f04f 0300 	mov.w	r3, #0
 800120c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
	float err_sig_avg_prev = 0;
 8001210:	f04f 0300 	mov.w	r3, #0
 8001214:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0

	float deri_avg = 0;
 8001218:	f04f 0300 	mov.w	r3, #0
 800121c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
	float deri_avg_prev = 0;
 8001220:	f04f 0300 	mov.w	r3, #0
 8001224:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc

	bool find_max = false;
 8001228:	2300      	movs	r3, #0
 800122a:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
	bool find_min = true;
 800122e:	2301      	movs	r3, #1
 8001230:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6
	bool lockpoint_found = false;
 8001234:	2300      	movs	r3, #0
 8001236:	f887 30e5 	strb.w	r3, [r7, #229]	; 0xe5

	float ramp_time = 0;
 800123a:	f04f 0300 	mov.w	r3, #0
 800123e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
	float ramp_end_time = 8190;
 8001242:	4ba8      	ldr	r3, [pc, #672]	; (80014e4 <_Z11getSetPointv+0x384>)
 8001244:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

	while(ramp_time < ramp_end_time){
 8001248:	ed97 7a38 	vldr	s14, [r7, #224]	; 0xe0
 800124c:	edd7 7a32 	vldr	s15, [r7, #200]	; 0xc8
 8001250:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001254:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001258:	f140 8150 	bpl.w	80014fc <_Z11getSetPointv+0x39c>
		err_sig_prev = err_sig;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
		//-------------- Generate Ramp ---------------
		analogWrite(RampOut1(ramp_time++));
 8001262:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 8001266:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800126a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800126e:	ed87 7a38 	vstr	s14, [r7, #224]	; 0xe0
 8001272:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001276:	ee17 0a90 	vmov	r0, s15
 800127a:	f000 fa1b 	bl	80016b4 <_Z8RampOut1l>
 800127e:	4603      	mov	r3, r0
 8001280:	4618      	mov	r0, r3
 8001282:	f000 fa47 	bl	8001714 <_Z11analogWritet>

		//-------------- Read Signal -----------------
		pd1 = toVoltage(PD[0]);
 8001286:	4b98      	ldr	r3, [pc, #608]	; (80014e8 <_Z11getSetPointv+0x388>)
 8001288:	881b      	ldrh	r3, [r3, #0]
 800128a:	4618      	mov	r0, r3
 800128c:	f000 fa60 	bl	8001750 <_Z9toVoltaget>
 8001290:	eef0 7a40 	vmov.f32	s15, s0
 8001294:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001298:	ee17 3a90 	vmov	r3, s15
 800129c:	b29a      	uxth	r2, r3
 800129e:	4b93      	ldr	r3, [pc, #588]	; (80014ec <_Z11getSetPointv+0x38c>)
 80012a0:	801a      	strh	r2, [r3, #0]
		pd2 = toVoltage(PD[1]);
 80012a2:	4b91      	ldr	r3, [pc, #580]	; (80014e8 <_Z11getSetPointv+0x388>)
 80012a4:	885b      	ldrh	r3, [r3, #2]
 80012a6:	4618      	mov	r0, r3
 80012a8:	f000 fa52 	bl	8001750 <_Z9toVoltaget>
 80012ac:	eef0 7a40 	vmov.f32	s15, s0
 80012b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012b4:	ee17 3a90 	vmov	r3, s15
 80012b8:	b29a      	uxth	r2, r3
 80012ba:	4b8d      	ldr	r3, [pc, #564]	; (80014f0 <_Z11getSetPointv+0x390>)
 80012bc:	801a      	strh	r2, [r3, #0]
		err_sig = pd1-pd2;
 80012be:	4b8b      	ldr	r3, [pc, #556]	; (80014ec <_Z11getSetPointv+0x38c>)
 80012c0:	881b      	ldrh	r3, [r3, #0]
 80012c2:	461a      	mov	r2, r3
 80012c4:	4b8a      	ldr	r3, [pc, #552]	; (80014f0 <_Z11getSetPointv+0x390>)
 80012c6:	881b      	ldrh	r3, [r3, #0]
 80012c8:	1ad3      	subs	r3, r2, r3
 80012ca:	ee07 3a90 	vmov	s15, r3
 80012ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012d2:	edc7 7a01 	vstr	s15, [r7, #4]

		//-------------- update signal ---------------
		float temp_sig = signal_filter[0];
 80012d6:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80012da:	2100      	movs	r1, #0
 80012dc:	4618      	mov	r0, r3
 80012de:	f000 fc30 	bl	8001b42 <_ZNSt5dequeIfSaIfEEixEj>
 80012e2:	4603      	mov	r3, r0
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
		signal_filter.pop_front();
 80012ea:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80012ee:	4618      	mov	r0, r3
 80012f0:	f000 fc38 	bl	8001b64 <_ZNSt5dequeIfSaIfEE9pop_frontEv>
		signal_filter.push_back(err_sig);
 80012f4:	1d3a      	adds	r2, r7, #4
 80012f6:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80012fa:	4611      	mov	r1, r2
 80012fc:	4618      	mov	r0, r3
 80012fe:	f000 fc50 	bl	8001ba2 <_ZNSt5dequeIfSaIfEE9push_backERKf>

		err_sig_avg_prev = err_sig_avg;
 8001302:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001306:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
		err_sig_avg = (err_sig_avg_prev*sf_size - temp_sig + err_sig)/sf_size;
 800130a:	4b72      	ldr	r3, [pc, #456]	; (80014d4 <_Z11getSetPointv+0x374>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	ee07 3a90 	vmov	s15, r3
 8001312:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001316:	edd7 7a34 	vldr	s15, [r7, #208]	; 0xd0
 800131a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800131e:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8001322:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001326:	edd7 7a01 	vldr	s15, [r7, #4]
 800132a:	ee77 6a27 	vadd.f32	s13, s14, s15
 800132e:	4b69      	ldr	r3, [pc, #420]	; (80014d4 <_Z11getSetPointv+0x374>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	ee07 3a90 	vmov	s15, r3
 8001336:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800133a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800133e:	edc7 7a3b 	vstr	s15, [r7, #236]	; 0xec

		//----------- update derivative --------------
		temp_sig = deri_filter[0];
 8001342:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001346:	2100      	movs	r1, #0
 8001348:	4618      	mov	r0, r3
 800134a:	f000 fbfa 	bl	8001b42 <_ZNSt5dequeIfSaIfEEixEj>
 800134e:	4603      	mov	r3, r0
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
		deri_filter.pop_front();
 8001356:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800135a:	4618      	mov	r0, r3
 800135c:	f000 fc02 	bl	8001b64 <_ZNSt5dequeIfSaIfEE9pop_frontEv>
		deri_filter.push_back(err_sig - err_sig_prev);
 8001360:	ed97 7a01 	vldr	s14, [r7, #4]
 8001364:	edd7 7a35 	vldr	s15, [r7, #212]	; 0xd4
 8001368:	ee77 7a67 	vsub.f32	s15, s14, s15
 800136c:	edc7 7a2f 	vstr	s15, [r7, #188]	; 0xbc
 8001370:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 8001374:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001378:	4611      	mov	r1, r2
 800137a:	4618      	mov	r0, r3
 800137c:	f000 fc3d 	bl	8001bfa <_ZNSt5dequeIfSaIfEE9push_backEOf>

		deri_avg_prev = deri_avg;
 8001380:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001384:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
		deri_avg = (deri_avg_prev*df_size - temp_sig + (err_sig - err_sig_prev))/df_size;
 8001388:	4b53      	ldr	r3, [pc, #332]	; (80014d8 <_Z11getSetPointv+0x378>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	ee07 3a90 	vmov	s15, r3
 8001390:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001394:	edd7 7a33 	vldr	s15, [r7, #204]	; 0xcc
 8001398:	ee27 7a27 	vmul.f32	s14, s14, s15
 800139c:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 80013a0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80013a4:	edd7 6a01 	vldr	s13, [r7, #4]
 80013a8:	edd7 7a35 	vldr	s15, [r7, #212]	; 0xd4
 80013ac:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80013b0:	ee77 6a27 	vadd.f32	s13, s14, s15
 80013b4:	4b48      	ldr	r3, [pc, #288]	; (80014d8 <_Z11getSetPointv+0x378>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	ee07 3a90 	vmov	s15, r3
 80013bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013c4:	edc7 7a3a 	vstr	s15, [r7, #232]	; 0xe8

		if(ramp_time > 1023 && ramp_time < 2730){
 80013c8:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 80013cc:	ed9f 7a49 	vldr	s14, [pc, #292]	; 80014f4 <_Z11getSetPointv+0x394>
 80013d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013d8:	dd7b      	ble.n	80014d2 <_Z11getSetPointv+0x372>
 80013da:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 80013de:	ed9f 7a46 	vldr	s14, [pc, #280]	; 80014f8 <_Z11getSetPointv+0x398>
 80013e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013ea:	d572      	bpl.n	80014d2 <_Z11getSetPointv+0x372>
			//find maximum if find_max = true
			if(err_sig_avg > max_val && find_max){
 80013ec:	ed97 7a3b 	vldr	s14, [r7, #236]	; 0xec
 80013f0:	edd7 7a3d 	vldr	s15, [r7, #244]	; 0xf4
 80013f4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013fc:	dd10      	ble.n	8001420 <_Z11getSetPointv+0x2c0>
 80013fe:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 8001402:	2b00      	cmp	r3, #0
 8001404:	d00c      	beq.n	8001420 <_Z11getSetPointv+0x2c0>
				max_val = err_sig_avg;
 8001406:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800140a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
				max_val_time = ramp_time;
 800140e:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 8001412:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001416:	ee17 3a90 	vmov	r3, s15
 800141a:	b29b      	uxth	r3, r3
 800141c:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			}
			//find minimum if find_min = true
			if(err_sig_avg < min_val && find_min){
 8001420:	ed97 7a3b 	vldr	s14, [r7, #236]	; 0xec
 8001424:	edd7 7a3c 	vldr	s15, [r7, #240]	; 0xf0
 8001428:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800142c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001430:	d510      	bpl.n	8001454 <_Z11getSetPointv+0x2f4>
 8001432:	f897 30e6 	ldrb.w	r3, [r7, #230]	; 0xe6
 8001436:	2b00      	cmp	r3, #0
 8001438:	d00c      	beq.n	8001454 <_Z11getSetPointv+0x2f4>
				min_val = err_sig_avg;
 800143a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800143e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
				min_val_time = ramp_time;
 8001442:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 8001446:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800144a:	ee17 3a90 	vmov	r3, s15
 800144e:	b29b      	uxth	r3, r3
 8001450:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
			}

			if(deri_avg_prev * deri_avg < 0){
 8001454:	ed97 7a33 	vldr	s14, [r7, #204]	; 0xcc
 8001458:	edd7 7a3a 	vldr	s15, [r7, #232]	; 0xe8
 800145c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001460:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001464:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001468:	d533      	bpl.n	80014d2 <_Z11getSetPointv+0x372>
				// find local minima
				if(min_val < err_sig_avg){
 800146a:	ed97 7a3c 	vldr	s14, [r7, #240]	; 0xf0
 800146e:	edd7 7a3b 	vldr	s15, [r7, #236]	; 0xec
 8001472:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001476:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800147a:	d510      	bpl.n	800149e <_Z11getSetPointv+0x33e>
					minima_time.push_back(min_val_time);
 800147c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8001480:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001484:	4611      	mov	r1, r2
 8001486:	4618      	mov	r0, r3
 8001488:	f000 fbc8 	bl	8001c1c <_ZNSt5dequeItSaItEE9push_backERKt>
					min_val = 5;
 800148c:	4b14      	ldr	r3, [pc, #80]	; (80014e0 <_Z11getSetPointv+0x380>)
 800148e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
					find_min = false;
 8001492:	2300      	movs	r3, #0
 8001494:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6
					find_max = true;
 8001498:	2301      	movs	r3, #1
 800149a:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
				}
				// find local maxima
				if(max_val >err_sig_avg){
 800149e:	ed97 7a3d 	vldr	s14, [r7, #244]	; 0xf4
 80014a2:	edd7 7a3b 	vldr	s15, [r7, #236]	; 0xec
 80014a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014ae:	dd10      	ble.n	80014d2 <_Z11getSetPointv+0x372>
					maxima_time.push_back(max_val_time);
 80014b0:	f107 025a 	add.w	r2, r7, #90	; 0x5a
 80014b4:	f107 0308 	add.w	r3, r7, #8
 80014b8:	4611      	mov	r1, r2
 80014ba:	4618      	mov	r0, r3
 80014bc:	f000 fbae 	bl	8001c1c <_ZNSt5dequeItSaItEE9push_backERKt>
					max_val = -5;
 80014c0:	4b06      	ldr	r3, [pc, #24]	; (80014dc <_Z11getSetPointv+0x37c>)
 80014c2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
					find_max = false;
 80014c6:	2300      	movs	r3, #0
 80014c8:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
					find_min = true;
 80014cc:	2301      	movs	r3, #1
 80014ce:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6
	while(ramp_time < ramp_end_time){
 80014d2:	e6b9      	b.n	8001248 <_Z11getSetPointv+0xe8>
 80014d4:	20000100 	.word	0x20000100
 80014d8:	20000104 	.word	0x20000104
 80014dc:	c0a00000 	.word	0xc0a00000
 80014e0:	40a00000 	.word	0x40a00000
 80014e4:	45fff000 	.word	0x45fff000
 80014e8:	20000194 	.word	0x20000194
 80014ec:	20000198 	.word	0x20000198
 80014f0:	2000019a 	.word	0x2000019a
 80014f4:	447fc000 	.word	0x447fc000
 80014f8:	452aa000 	.word	0x452aa000
			}
		}
	}

	//finding lockpoint
	int len = maxima_time.size();
 80014fc:	f107 0308 	add.w	r3, r7, #8
 8001500:	4618      	mov	r0, r3
 8001502:	f000 fbac 	bl	8001c5e <_ZNKSt5dequeItSaItEE4sizeEv>
 8001506:	4603      	mov	r3, r0
 8001508:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	float sig_amp = 0;
 800150c:	f04f 0300 	mov.w	r3, #0
 8001510:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

	for (uint8_t i=0; i<len; i++){
 8001514:	2300      	movs	r3, #0
 8001516:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
 800151a:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 800151e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8001522:	429a      	cmp	r2, r3
 8001524:	f340 8086 	ble.w	8001634 <_Z11getSetPointv+0x4d4>
	    if(i == maxima_time.size()-1) break;
 8001528:	f897 40db 	ldrb.w	r4, [r7, #219]	; 0xdb
 800152c:	f107 0308 	add.w	r3, r7, #8
 8001530:	4618      	mov	r0, r3
 8001532:	f000 fb94 	bl	8001c5e <_ZNKSt5dequeItSaItEE4sizeEv>
 8001536:	4603      	mov	r3, r0
 8001538:	3b01      	subs	r3, #1
 800153a:	429c      	cmp	r4, r3
 800153c:	bf0c      	ite	eq
 800153e:	2301      	moveq	r3, #1
 8001540:	2300      	movne	r3, #0
 8001542:	b2db      	uxtb	r3, r3
 8001544:	2b00      	cmp	r3, #0
 8001546:	d174      	bne.n	8001632 <_Z11getSetPointv+0x4d2>
	    sig_amp = maxima_time[i] - minima_time[i];
 8001548:	f897 20db 	ldrb.w	r2, [r7, #219]	; 0xdb
 800154c:	f107 0308 	add.w	r3, r7, #8
 8001550:	4611      	mov	r1, r2
 8001552:	4618      	mov	r0, r3
 8001554:	f000 fb95 	bl	8001c82 <_ZNSt5dequeItSaItEEixEj>
 8001558:	4603      	mov	r3, r0
 800155a:	881b      	ldrh	r3, [r3, #0]
 800155c:	461c      	mov	r4, r3
 800155e:	f897 20db 	ldrb.w	r2, [r7, #219]	; 0xdb
 8001562:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001566:	4611      	mov	r1, r2
 8001568:	4618      	mov	r0, r3
 800156a:	f000 fb8a 	bl	8001c82 <_ZNSt5dequeItSaItEEixEj>
 800156e:	4603      	mov	r3, r0
 8001570:	881b      	ldrh	r3, [r3, #0]
 8001572:	1ae3      	subs	r3, r4, r3
 8001574:	ee07 3a90 	vmov	s15, r3
 8001578:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800157c:	edc7 7a37 	vstr	s15, [r7, #220]	; 0xdc
//	    sig_amp = *(max_ptr+(i+max_front)%len) - *(min_ptr+(i+min_front)%len);
	    if(abs(threshold-sig_amp)<0.25*sig_amp){
 8001580:	4b46      	ldr	r3, [pc, #280]	; (800169c <_Z11getSetPointv+0x53c>)
 8001582:	ed93 7a00 	vldr	s14, [r3]
 8001586:	edd7 7a37 	vldr	s15, [r7, #220]	; 0xdc
 800158a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800158e:	eeb0 0a67 	vmov.f32	s0, s15
 8001592:	f7ff fd47 	bl	8001024 <_ZSt3absf>
 8001596:	ee10 3a10 	vmov	r3, s0
 800159a:	4618      	mov	r0, r3
 800159c:	f7fe ffa0 	bl	80004e0 <__aeabi_f2d>
 80015a0:	4604      	mov	r4, r0
 80015a2:	460d      	mov	r5, r1
 80015a4:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 80015a8:	f7fe ff9a 	bl	80004e0 <__aeabi_f2d>
 80015ac:	f04f 0200 	mov.w	r2, #0
 80015b0:	4b3b      	ldr	r3, [pc, #236]	; (80016a0 <_Z11getSetPointv+0x540>)
 80015b2:	f7fe ffed 	bl	8000590 <__aeabi_dmul>
 80015b6:	4602      	mov	r2, r0
 80015b8:	460b      	mov	r3, r1
 80015ba:	4611      	mov	r1, r2
 80015bc:	461a      	mov	r2, r3
 80015be:	2301      	movs	r3, #1
 80015c0:	461e      	mov	r6, r3
 80015c2:	4613      	mov	r3, r2
 80015c4:	460a      	mov	r2, r1
 80015c6:	4620      	mov	r0, r4
 80015c8:	4629      	mov	r1, r5
 80015ca:	f7ff fa53 	bl	8000a74 <__aeabi_dcmplt>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d101      	bne.n	80015d8 <_Z11getSetPointv+0x478>
 80015d4:	2300      	movs	r3, #0
 80015d6:	461e      	mov	r6, r3
 80015d8:	b2f3      	uxtb	r3, r6
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d023      	beq.n	8001626 <_Z11getSetPointv+0x4c6>
	      lockpoint_found = true;
 80015de:	2301      	movs	r3, #1
 80015e0:	f887 30e5 	strb.w	r3, [r7, #229]	; 0xe5
	      set_point_time = (maxima_time[i] + minima_time[i])/2;
 80015e4:	f897 20db 	ldrb.w	r2, [r7, #219]	; 0xdb
 80015e8:	f107 0308 	add.w	r3, r7, #8
 80015ec:	4611      	mov	r1, r2
 80015ee:	4618      	mov	r0, r3
 80015f0:	f000 fb47 	bl	8001c82 <_ZNSt5dequeItSaItEEixEj>
 80015f4:	4603      	mov	r3, r0
 80015f6:	881b      	ldrh	r3, [r3, #0]
 80015f8:	461c      	mov	r4, r3
 80015fa:	f897 20db 	ldrb.w	r2, [r7, #219]	; 0xdb
 80015fe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001602:	4611      	mov	r1, r2
 8001604:	4618      	mov	r0, r3
 8001606:	f000 fb3c 	bl	8001c82 <_ZNSt5dequeItSaItEEixEj>
 800160a:	4603      	mov	r3, r0
 800160c:	881b      	ldrh	r3, [r3, #0]
 800160e:	4423      	add	r3, r4
 8001610:	2b00      	cmp	r3, #0
 8001612:	da00      	bge.n	8001616 <_Z11getSetPointv+0x4b6>
 8001614:	3301      	adds	r3, #1
 8001616:	105b      	asrs	r3, r3, #1
 8001618:	ee07 3a90 	vmov	s15, r3
 800161c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001620:	4b20      	ldr	r3, [pc, #128]	; (80016a4 <_Z11getSetPointv+0x544>)
 8001622:	edc3 7a00 	vstr	s15, [r3]
	for (uint8_t i=0; i<len; i++){
 8001626:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 800162a:	3301      	adds	r3, #1
 800162c:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
 8001630:	e773      	b.n	800151a <_Z11getSetPointv+0x3ba>
	    if(i == maxima_time.size()-1) break;
 8001632:	bf00      	nop
	    }
	  }
	if(lockpoint_found){
 8001634:	f897 30e5 	ldrb.w	r3, [r7, #229]	; 0xe5
 8001638:	2b00      	cmp	r3, #0
 800163a:	d003      	beq.n	8001644 <_Z11getSetPointv+0x4e4>
	    set_point = sig_amp;
 800163c:	4a1a      	ldr	r2, [pc, #104]	; (80016a8 <_Z11getSetPointv+0x548>)
 800163e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001642:	6013      	str	r3, [r2, #0]
//	    Serial.print(" mV; Lock-point time (from start of scan): ");
//	    Serial.print((max_front+min_front)/2/1000.);
//	    Serial.println(" ms");
	  }

	  if(lockpoint_found==false) {
 8001644:	f897 30e5 	ldrb.w	r3, [r7, #229]	; 0xe5
 8001648:	f083 0301 	eor.w	r3, r3, #1
 800164c:	b2db      	uxtb	r3, r3
 800164e:	2b00      	cmp	r3, #0
 8001650:	d002      	beq.n	8001658 <_Z11getSetPointv+0x4f8>
	      accumulator = 100; //triggers relocking
 8001652:	4b16      	ldr	r3, [pc, #88]	; (80016ac <_Z11getSetPointv+0x54c>)
 8001654:	4a16      	ldr	r2, [pc, #88]	; (80016b0 <_Z11getSetPointv+0x550>)
 8001656:	601a      	str	r2, [r3, #0]
//	      Serial.println("Lock-point not found");
	    }

	  return set_point_time;
 8001658:	4b12      	ldr	r3, [pc, #72]	; (80016a4 <_Z11getSetPointv+0x544>)
 800165a:	edd3 7a00 	vldr	s15, [r3]
 800165e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001662:	ee17 3a90 	vmov	r3, s15
 8001666:	b29c      	uxth	r4, r3
	deque<uint16_t> maxima_time;
 8001668:	f107 0308 	add.w	r3, r7, #8
 800166c:	4618      	mov	r0, r3
 800166e:	f000 fa43 	bl	8001af8 <_ZNSt5dequeItSaItEED1Ev>
	deque<uint16_t> minima_time;
 8001672:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001676:	4618      	mov	r0, r3
 8001678:	f000 fa3e 	bl	8001af8 <_ZNSt5dequeItSaItEED1Ev>
	deque<float> deri_filter(df_size, 0);
 800167c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001680:	4618      	mov	r0, r3
 8001682:	f000 fa07 	bl	8001a94 <_ZNSt5dequeIfSaIfEED1Ev>
	deque<float> signal_filter(sf_size, 0);
 8001686:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800168a:	4618      	mov	r0, r3
 800168c:	f000 fa02 	bl	8001a94 <_ZNSt5dequeIfSaIfEED1Ev>
	  return set_point_time;
 8001690:	4623      	mov	r3, r4
}
 8001692:	4618      	mov	r0, r3
 8001694:	37fc      	adds	r7, #252	; 0xfc
 8001696:	46bd      	mov	sp, r7
 8001698:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800169a:	bf00      	nop
 800169c:	200000fc 	.word	0x200000fc
 80016a0:	3fd00000 	.word	0x3fd00000
 80016a4:	200001a4 	.word	0x200001a4
 80016a8:	200001a0 	.word	0x200001a0
 80016ac:	200001c4 	.word	0x200001c4
 80016b0:	42c80000 	.word	0x42c80000

080016b4 <_Z8RampOut1l>:

uint16_t RampOut1(long ramp_time) {
 80016b4:	b480      	push	{r7}
 80016b6:	b085      	sub	sp, #20
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
	uint16_t ramp;
	uint16_t amp = 4095;
 80016bc:	f640 73ff 	movw	r3, #4095	; 0xfff
 80016c0:	81bb      	strh	r3, [r7, #12]
	uint16_t half_period = 4095;
 80016c2:	f640 73ff 	movw	r3, #4095	; 0xfff
 80016c6:	817b      	strh	r3, [r7, #10]
	if(ramp_time <= half_period)
 80016c8:	897b      	ldrh	r3, [r7, #10]
 80016ca:	461a      	mov	r2, r3
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	4293      	cmp	r3, r2
 80016d0:	dc0a      	bgt.n	80016e8 <_Z8RampOut1l+0x34>
		ramp = (amp/(half_period))*ramp_time;
 80016d2:	897b      	ldrh	r3, [r7, #10]
 80016d4:	89ba      	ldrh	r2, [r7, #12]
 80016d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80016da:	b29a      	uxth	r2, r3
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	b29b      	uxth	r3, r3
 80016e0:	fb12 f303 	smulbb	r3, r2, r3
 80016e4:	81fb      	strh	r3, [r7, #14]
 80016e6:	e00e      	b.n	8001706 <_Z8RampOut1l+0x52>
    else
    	ramp = 2*amp-(amp/(half_period))*ramp_time;
 80016e8:	89bb      	ldrh	r3, [r7, #12]
 80016ea:	005b      	lsls	r3, r3, #1
 80016ec:	b29a      	uxth	r2, r3
 80016ee:	897b      	ldrh	r3, [r7, #10]
 80016f0:	89b9      	ldrh	r1, [r7, #12]
 80016f2:	fbb1 f3f3 	udiv	r3, r1, r3
 80016f6:	b299      	uxth	r1, r3
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	b29b      	uxth	r3, r3
 80016fc:	fb11 f303 	smulbb	r3, r1, r3
 8001700:	b29b      	uxth	r3, r3
 8001702:	1ad3      	subs	r3, r2, r3
 8001704:	81fb      	strh	r3, [r7, #14]
    return ramp;
 8001706:	89fb      	ldrh	r3, [r7, #14]
}
 8001708:	4618      	mov	r0, r3
 800170a:	3714      	adds	r7, #20
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr

08001714 <_Z11analogWritet>:

void analogWrite(uint16_t val){
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
 800171a:	4603      	mov	r3, r0
 800171c:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin (GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 800171e:	2200      	movs	r2, #0
 8001720:	2108      	movs	r1, #8
 8001722:	4809      	ldr	r0, [pc, #36]	; (8001748 <_Z11analogWritet+0x34>)
 8001724:	f003 fec8 	bl	80054b8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit (&hspi1, (uint8_t *)&val, sizeof(val)/sizeof(uint16_t), 1);
 8001728:	1db9      	adds	r1, r7, #6
 800172a:	2301      	movs	r3, #1
 800172c:	2201      	movs	r2, #1
 800172e:	4807      	ldr	r0, [pc, #28]	; (800174c <_Z11analogWritet+0x38>)
 8001730:	f004 fbc9 	bl	8005ec6 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin (GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 8001734:	2201      	movs	r2, #1
 8001736:	2108      	movs	r1, #8
 8001738:	4803      	ldr	r0, [pc, #12]	; (8001748 <_Z11analogWritet+0x34>)
 800173a:	f003 febd 	bl	80054b8 <HAL_GPIO_WritePin>
}
 800173e:	bf00      	nop
 8001740:	3708      	adds	r7, #8
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	40020000 	.word	0x40020000
 800174c:	2000029c 	.word	0x2000029c

08001750 <_Z9toVoltaget>:

float toVoltage(uint16_t value){
 8001750:	b590      	push	{r4, r7, lr}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	4603      	mov	r3, r0
 8001758:	80fb      	strh	r3, [r7, #6]
	return float(value)*3300.0/4095.0;
 800175a:	88fb      	ldrh	r3, [r7, #6]
 800175c:	ee07 3a90 	vmov	s15, r3
 8001760:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001764:	ee17 0a90 	vmov	r0, s15
 8001768:	f7fe feba 	bl	80004e0 <__aeabi_f2d>
 800176c:	a30e      	add	r3, pc, #56	; (adr r3, 80017a8 <_Z9toVoltaget+0x58>)
 800176e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001772:	f7fe ff0d 	bl	8000590 <__aeabi_dmul>
 8001776:	4603      	mov	r3, r0
 8001778:	460c      	mov	r4, r1
 800177a:	4618      	mov	r0, r3
 800177c:	4621      	mov	r1, r4
 800177e:	a30c      	add	r3, pc, #48	; (adr r3, 80017b0 <_Z9toVoltaget+0x60>)
 8001780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001784:	f7ff f82e 	bl	80007e4 <__aeabi_ddiv>
 8001788:	4603      	mov	r3, r0
 800178a:	460c      	mov	r4, r1
 800178c:	4618      	mov	r0, r3
 800178e:	4621      	mov	r1, r4
 8001790:	f7ff f998 	bl	8000ac4 <__aeabi_d2f>
 8001794:	4603      	mov	r3, r0
 8001796:	ee07 3a90 	vmov	s15, r3
}
 800179a:	eeb0 0a67 	vmov.f32	s0, s15
 800179e:	370c      	adds	r7, #12
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd90      	pop	{r4, r7, pc}
 80017a4:	f3af 8000 	nop.w
 80017a8:	00000000 	.word	0x00000000
 80017ac:	40a9c800 	.word	0x40a9c800
 80017b0:	00000000 	.word	0x00000000
 80017b4:	40affe00 	.word	0x40affe00

080017b8 <_Z8startPIDv>:

void startPID(){
 80017b8:	b5b0      	push	{r4, r5, r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
//	Serial.println("In PID loop");
	// float err_sig = (analogRead(0) - analogRead(1))/1024*5;
	pd1 = toVoltage(PD[0]);
 80017be:	4b8a      	ldr	r3, [pc, #552]	; (80019e8 <_Z8startPIDv+0x230>)
 80017c0:	881b      	ldrh	r3, [r3, #0]
 80017c2:	4618      	mov	r0, r3
 80017c4:	f7ff ffc4 	bl	8001750 <_Z9toVoltaget>
 80017c8:	eef0 7a40 	vmov.f32	s15, s0
 80017cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017d0:	ee17 3a90 	vmov	r3, s15
 80017d4:	b29a      	uxth	r2, r3
 80017d6:	4b85      	ldr	r3, [pc, #532]	; (80019ec <_Z8startPIDv+0x234>)
 80017d8:	801a      	strh	r2, [r3, #0]
	pd2 = toVoltage(PD[1]);
 80017da:	4b83      	ldr	r3, [pc, #524]	; (80019e8 <_Z8startPIDv+0x230>)
 80017dc:	885b      	ldrh	r3, [r3, #2]
 80017de:	4618      	mov	r0, r3
 80017e0:	f7ff ffb6 	bl	8001750 <_Z9toVoltaget>
 80017e4:	eef0 7a40 	vmov.f32	s15, s0
 80017e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017ec:	ee17 3a90 	vmov	r3, s15
 80017f0:	b29a      	uxth	r2, r3
 80017f2:	4b7f      	ldr	r3, [pc, #508]	; (80019f0 <_Z8startPIDv+0x238>)
 80017f4:	801a      	strh	r2, [r3, #0]
	float error_sig = pd1-pd2;
 80017f6:	4b7d      	ldr	r3, [pc, #500]	; (80019ec <_Z8startPIDv+0x234>)
 80017f8:	881b      	ldrh	r3, [r3, #0]
 80017fa:	461a      	mov	r2, r3
 80017fc:	4b7c      	ldr	r3, [pc, #496]	; (80019f0 <_Z8startPIDv+0x238>)
 80017fe:	881b      	ldrh	r3, [r3, #0]
 8001800:	1ad3      	subs	r3, r2, r3
 8001802:	ee07 3a90 	vmov	s15, r3
 8001806:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800180a:	edc7 7a01 	vstr	s15, [r7, #4]
	// float error_sig = 0;
//	Serial.println("Hello");
	float dt = 1000/loop_speed.param_value;
 800180e:	4b79      	ldr	r3, [pc, #484]	; (80019f4 <_Z8startPIDv+0x23c>)
 8001810:	ed93 7a06 	vldr	s14, [r3, #24]
 8001814:	eddf 6a78 	vldr	s13, [pc, #480]	; 80019f8 <_Z8startPIDv+0x240>
 8001818:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800181c:	edc7 7a00 	vstr	s15, [r7]
	error = set_point - error_sig;
 8001820:	4b76      	ldr	r3, [pc, #472]	; (80019fc <_Z8startPIDv+0x244>)
 8001822:	ed93 7a00 	vldr	s14, [r3]
 8001826:	edd7 7a01 	vldr	s15, [r7, #4]
 800182a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800182e:	4b74      	ldr	r3, [pc, #464]	; (8001a00 <_Z8startPIDv+0x248>)
 8001830:	edc3 7a00 	vstr	s15, [r3]
	error = (alpha.param_value*error_previous) + (1-alpha.param_value)*error;
 8001834:	4b73      	ldr	r3, [pc, #460]	; (8001a04 <_Z8startPIDv+0x24c>)
 8001836:	ed93 7a06 	vldr	s14, [r3, #24]
 800183a:	4b73      	ldr	r3, [pc, #460]	; (8001a08 <_Z8startPIDv+0x250>)
 800183c:	edd3 7a00 	vldr	s15, [r3]
 8001840:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001844:	4b6f      	ldr	r3, [pc, #444]	; (8001a04 <_Z8startPIDv+0x24c>)
 8001846:	edd3 7a06 	vldr	s15, [r3, #24]
 800184a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800184e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001852:	4b6b      	ldr	r3, [pc, #428]	; (8001a00 <_Z8startPIDv+0x248>)
 8001854:	edd3 7a00 	vldr	s15, [r3]
 8001858:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800185c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001860:	4b67      	ldr	r3, [pc, #412]	; (8001a00 <_Z8startPIDv+0x248>)
 8001862:	edc3 7a00 	vstr	s15, [r3]
	P_out = pterm_piezo.param_value*(error);
 8001866:	4b69      	ldr	r3, [pc, #420]	; (8001a0c <_Z8startPIDv+0x254>)
 8001868:	ed93 7a06 	vldr	s14, [r3, #24]
 800186c:	4b64      	ldr	r3, [pc, #400]	; (8001a00 <_Z8startPIDv+0x248>)
 800186e:	edd3 7a00 	vldr	s15, [r3]
 8001872:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001876:	4b66      	ldr	r3, [pc, #408]	; (8001a10 <_Z8startPIDv+0x258>)
 8001878:	edc3 7a00 	vstr	s15, [r3]

	if(P_out>=4)
 800187c:	4b64      	ldr	r3, [pc, #400]	; (8001a10 <_Z8startPIDv+0x258>)
 800187e:	edd3 7a00 	vldr	s15, [r3]
 8001882:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8001886:	eef4 7ac7 	vcmpe.f32	s15, s14
 800188a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800188e:	db03      	blt.n	8001898 <_Z8startPIDv+0xe0>
	P_out = 4;
 8001890:	4b5f      	ldr	r3, [pc, #380]	; (8001a10 <_Z8startPIDv+0x258>)
 8001892:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 8001896:	601a      	str	r2, [r3, #0]
	if(P_out<=-4)
 8001898:	4b5d      	ldr	r3, [pc, #372]	; (8001a10 <_Z8startPIDv+0x258>)
 800189a:	edd3 7a00 	vldr	s15, [r3]
 800189e:	eeb9 7a00 	vmov.f32	s14, #144	; 0xc0800000 -4.0
 80018a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018aa:	d802      	bhi.n	80018b2 <_Z8startPIDv+0xfa>
	P_out = -4;
 80018ac:	4b58      	ldr	r3, [pc, #352]	; (8001a10 <_Z8startPIDv+0x258>)
 80018ae:	4a59      	ldr	r2, [pc, #356]	; (8001a14 <_Z8startPIDv+0x25c>)
 80018b0:	601a      	str	r2, [r3, #0]

	accumulator += error;  // accumulator is sum of errors (for integral gain term)
 80018b2:	4b59      	ldr	r3, [pc, #356]	; (8001a18 <_Z8startPIDv+0x260>)
 80018b4:	ed93 7a00 	vldr	s14, [r3]
 80018b8:	4b51      	ldr	r3, [pc, #324]	; (8001a00 <_Z8startPIDv+0x248>)
 80018ba:	edd3 7a00 	vldr	s15, [r3]
 80018be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018c2:	4b55      	ldr	r3, [pc, #340]	; (8001a18 <_Z8startPIDv+0x260>)
 80018c4:	edc3 7a00 	vstr	s15, [r3]
	accumulator_squared += error + (1/stime.param_value)*accumulator*dt;
 80018c8:	4b54      	ldr	r3, [pc, #336]	; (8001a1c <_Z8startPIDv+0x264>)
 80018ca:	edd3 7a06 	vldr	s15, [r3, #24]
 80018ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80018d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80018d6:	4b50      	ldr	r3, [pc, #320]	; (8001a18 <_Z8startPIDv+0x260>)
 80018d8:	edd3 7a00 	vldr	s15, [r3]
 80018dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80018e0:	edd7 7a00 	vldr	s15, [r7]
 80018e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80018e8:	4b45      	ldr	r3, [pc, #276]	; (8001a00 <_Z8startPIDv+0x248>)
 80018ea:	edd3 7a00 	vldr	s15, [r3]
 80018ee:	ee37 7a27 	vadd.f32	s14, s14, s15
 80018f2:	4b4b      	ldr	r3, [pc, #300]	; (8001a20 <_Z8startPIDv+0x268>)
 80018f4:	edd3 7a00 	vldr	s15, [r3]
 80018f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018fc:	4b48      	ldr	r3, [pc, #288]	; (8001a20 <_Z8startPIDv+0x268>)
 80018fe:	edc3 7a00 	vstr	s15, [r3]

	d_error = error-error_previous;
 8001902:	4b3f      	ldr	r3, [pc, #252]	; (8001a00 <_Z8startPIDv+0x248>)
 8001904:	ed93 7a00 	vldr	s14, [r3]
 8001908:	4b3f      	ldr	r3, [pc, #252]	; (8001a08 <_Z8startPIDv+0x250>)
 800190a:	edd3 7a00 	vldr	s15, [r3]
 800190e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001912:	4b44      	ldr	r3, [pc, #272]	; (8001a24 <_Z8startPIDv+0x26c>)
 8001914:	edc3 7a00 	vstr	s15, [r3]
	d_error = 0.9*d_error_previous + 0.1*d_error;
 8001918:	4b43      	ldr	r3, [pc, #268]	; (8001a28 <_Z8startPIDv+0x270>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4618      	mov	r0, r3
 800191e:	f7fe fddf 	bl	80004e0 <__aeabi_f2d>
 8001922:	a32d      	add	r3, pc, #180	; (adr r3, 80019d8 <_Z8startPIDv+0x220>)
 8001924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001928:	f7fe fe32 	bl	8000590 <__aeabi_dmul>
 800192c:	4603      	mov	r3, r0
 800192e:	460c      	mov	r4, r1
 8001930:	4625      	mov	r5, r4
 8001932:	461c      	mov	r4, r3
 8001934:	4b3b      	ldr	r3, [pc, #236]	; (8001a24 <_Z8startPIDv+0x26c>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4618      	mov	r0, r3
 800193a:	f7fe fdd1 	bl	80004e0 <__aeabi_f2d>
 800193e:	a328      	add	r3, pc, #160	; (adr r3, 80019e0 <_Z8startPIDv+0x228>)
 8001940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001944:	f7fe fe24 	bl	8000590 <__aeabi_dmul>
 8001948:	4602      	mov	r2, r0
 800194a:	460b      	mov	r3, r1
 800194c:	4620      	mov	r0, r4
 800194e:	4629      	mov	r1, r5
 8001950:	f7fe fc68 	bl	8000224 <__adddf3>
 8001954:	4603      	mov	r3, r0
 8001956:	460c      	mov	r4, r1
 8001958:	4618      	mov	r0, r3
 800195a:	4621      	mov	r1, r4
 800195c:	f7ff f8b2 	bl	8000ac4 <__aeabi_d2f>
 8001960:	4602      	mov	r2, r0
 8001962:	4b30      	ldr	r3, [pc, #192]	; (8001a24 <_Z8startPIDv+0x26c>)
 8001964:	601a      	str	r2, [r3, #0]

	PIID_out = P_out+((pterm_piezo.param_value*(1/itime.param_value)*accumulator_squared*dt)+(dtime.param_value/dt)*(d_error));
 8001966:	4b29      	ldr	r3, [pc, #164]	; (8001a0c <_Z8startPIDv+0x254>)
 8001968:	ed93 7a06 	vldr	s14, [r3, #24]
 800196c:	4b2f      	ldr	r3, [pc, #188]	; (8001a2c <_Z8startPIDv+0x274>)
 800196e:	edd3 6a06 	vldr	s13, [r3, #24]
 8001972:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8001976:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800197a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800197e:	4b28      	ldr	r3, [pc, #160]	; (8001a20 <_Z8startPIDv+0x268>)
 8001980:	edd3 7a00 	vldr	s15, [r3]
 8001984:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001988:	edd7 7a00 	vldr	s15, [r7]
 800198c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001990:	4b27      	ldr	r3, [pc, #156]	; (8001a30 <_Z8startPIDv+0x278>)
 8001992:	ed93 6a06 	vldr	s12, [r3, #24]
 8001996:	edd7 7a00 	vldr	s15, [r7]
 800199a:	eec6 6a27 	vdiv.f32	s13, s12, s15
 800199e:	4b21      	ldr	r3, [pc, #132]	; (8001a24 <_Z8startPIDv+0x26c>)
 80019a0:	edd3 7a00 	vldr	s15, [r3]
 80019a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019a8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80019ac:	4b18      	ldr	r3, [pc, #96]	; (8001a10 <_Z8startPIDv+0x258>)
 80019ae:	edd3 7a00 	vldr	s15, [r3]
 80019b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019b6:	4b1f      	ldr	r3, [pc, #124]	; (8001a34 <_Z8startPIDv+0x27c>)
 80019b8:	edc3 7a00 	vstr	s15, [r3]

	error_previous = error;
 80019bc:	4b10      	ldr	r3, [pc, #64]	; (8001a00 <_Z8startPIDv+0x248>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a11      	ldr	r2, [pc, #68]	; (8001a08 <_Z8startPIDv+0x250>)
 80019c2:	6013      	str	r3, [r2, #0]
	d_error_previous = d_error;
 80019c4:	4b17      	ldr	r3, [pc, #92]	; (8001a24 <_Z8startPIDv+0x26c>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a17      	ldr	r2, [pc, #92]	; (8001a28 <_Z8startPIDv+0x270>)
 80019ca:	6013      	str	r3, [r2, #0]
}
 80019cc:	bf00      	nop
 80019ce:	3708      	adds	r7, #8
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bdb0      	pop	{r4, r5, r7, pc}
 80019d4:	f3af 8000 	nop.w
 80019d8:	cccccccd 	.word	0xcccccccd
 80019dc:	3feccccc 	.word	0x3feccccc
 80019e0:	9999999a 	.word	0x9999999a
 80019e4:	3fb99999 	.word	0x3fb99999
 80019e8:	20000194 	.word	0x20000194
 80019ec:	20000198 	.word	0x20000198
 80019f0:	2000019a 	.word	0x2000019a
 80019f4:	2000001c 	.word	0x2000001c
 80019f8:	447a0000 	.word	0x447a0000
 80019fc:	200001a0 	.word	0x200001a0
 8001a00:	200001b4 	.word	0x200001b4
 8001a04:	200000a8 	.word	0x200000a8
 8001a08:	200001b8 	.word	0x200001b8
 8001a0c:	20000038 	.word	0x20000038
 8001a10:	200001b0 	.word	0x200001b0
 8001a14:	c0800000 	.word	0xc0800000
 8001a18:	200001c4 	.word	0x200001c4
 8001a1c:	20000070 	.word	0x20000070
 8001a20:	200001c8 	.word	0x200001c8
 8001a24:	200001bc 	.word	0x200001bc
 8001a28:	200001c0 	.word	0x200001c0
 8001a2c:	20000054 	.word	0x20000054
 8001a30:	2000008c 	.word	0x2000008c
 8001a34:	200001ac 	.word	0x200001ac

08001a38 <_ZNSaIfEC1Ev>:
      typedef true_type propagate_on_container_move_assignment;

      typedef true_type is_always_equal;
#endif

      allocator() throw() { }
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	6878      	ldr	r0, [r7, #4]
 8001a42:	f000 f92f 	bl	8001ca4 <_ZN9__gnu_cxx13new_allocatorIfEC1Ev>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	4618      	mov	r0, r3
 8001a4a:	3708      	adds	r7, #8
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}

08001a50 <_ZNSaIfED1Ev>:
      : __allocator_base<_Tp>(__a) { }

      template<typename _Tp1>
	allocator(const allocator<_Tp1>&) throw() { }

      ~allocator() throw() { }
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
 8001a58:	6878      	ldr	r0, [r7, #4]
 8001a5a:	f000 f92e 	bl	8001cba <_ZN9__gnu_cxx13new_allocatorIfED1Ev>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	4618      	mov	r0, r3
 8001a62:	3708      	adds	r7, #8
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}

08001a68 <_ZNSt5dequeIfSaIfEEC1EjRKfRKS0_>:
       *  @param  __value  An element to copy.
       *  @param  __a  An allocator.
       *
       *  This constructor fills the %deque with @a __n copies of @a __value.
       */
      deque(size_type __n, const value_type& __value,
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b084      	sub	sp, #16
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	60f8      	str	r0, [r7, #12]
 8001a70:	60b9      	str	r1, [r7, #8]
 8001a72:	607a      	str	r2, [r7, #4]
 8001a74:	603b      	str	r3, [r7, #0]
	    const allocator_type& __a = allocator_type())
      : _Base(__a, __n)
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	68ba      	ldr	r2, [r7, #8]
 8001a7a:	6839      	ldr	r1, [r7, #0]
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f000 f933 	bl	8001ce8 <_ZNSt11_Deque_baseIfSaIfEEC1ERKS0_j>
      { _M_fill_initialize(__value); }
 8001a82:	6879      	ldr	r1, [r7, #4]
 8001a84:	68f8      	ldr	r0, [r7, #12]
 8001a86:	f000 f965 	bl	8001d54 <_ZNSt5dequeIfSaIfEE18_M_fill_initializeERKf>
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	3710      	adds	r7, #16
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}

08001a94 <_ZNSt5dequeIfSaIfEED1Ev>:
      /**
       *  The dtor only erases the elements, and note that if the elements
       *  themselves are pointers, the pointed-to memory is not touched in any
       *  way.  Managing the pointer is the user's responsibility.
       */
      ~deque()
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b08a      	sub	sp, #40	; 0x28
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
 8001a9c:	f107 0308 	add.w	r3, r7, #8
 8001aa0:	6879      	ldr	r1, [r7, #4]
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f000 f98c 	bl	8001dc0 <_ZNSt5dequeIfSaIfEE5beginEv>
 8001aa8:	f107 0318 	add.w	r3, r7, #24
 8001aac:	6879      	ldr	r1, [r7, #4]
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f000 f995 	bl	8001dde <_ZNSt5dequeIfSaIfEE3endEv>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f000 f9a0 	bl	8001dfc <_ZNSt11_Deque_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8001abc:	4603      	mov	r3, r0
 8001abe:	f107 0218 	add.w	r2, r7, #24
 8001ac2:	f107 0108 	add.w	r1, r7, #8
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	f000 f9bf 	bl	8001e4a <_ZNSt5dequeIfSaIfEE15_M_destroy_dataESt15_Deque_iteratorIfRfPfES5_RKS0_>
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f000 f91e 	bl	8001d10 <_ZNSt11_Deque_baseIfSaIfEED1Ev>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3728      	adds	r7, #40	; 0x28
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}

08001ade <_ZNSt5dequeItSaItEEC1Ev>:
      deque() : _Base() { }
 8001ade:	b580      	push	{r7, lr}
 8001ae0:	b082      	sub	sp, #8
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	6078      	str	r0, [r7, #4]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f000 f9c7 	bl	8001e7c <_ZNSt11_Deque_baseItSaItEEC1Ev>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	4618      	mov	r0, r3
 8001af2:	3708      	adds	r7, #8
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}

08001af8 <_ZNSt5dequeItSaItEED1Ev>:
      ~deque()
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b08a      	sub	sp, #40	; 0x28
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
 8001b00:	f107 0308 	add.w	r3, r7, #8
 8001b04:	6879      	ldr	r1, [r7, #4]
 8001b06:	4618      	mov	r0, r3
 8001b08:	f000 f9eb 	bl	8001ee2 <_ZNSt5dequeItSaItEE5beginEv>
 8001b0c:	f107 0318 	add.w	r3, r7, #24
 8001b10:	6879      	ldr	r1, [r7, #4]
 8001b12:	4618      	mov	r0, r3
 8001b14:	f000 f9f4 	bl	8001f00 <_ZNSt5dequeItSaItEE3endEv>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f000 f9ff 	bl	8001f1e <_ZNSt11_Deque_baseItSaItEE19_M_get_Tp_allocatorEv>
 8001b20:	4603      	mov	r3, r0
 8001b22:	f107 0218 	add.w	r2, r7, #24
 8001b26:	f107 0108 	add.w	r1, r7, #8
 8001b2a:	6878      	ldr	r0, [r7, #4]
 8001b2c:	f000 fa1e 	bl	8001f6c <_ZNSt5dequeItSaItEE15_M_destroy_dataESt15_Deque_iteratorItRtPtES5_RKS0_>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	4618      	mov	r0, r3
 8001b34:	f000 f9b3 	bl	8001e9e <_ZNSt11_Deque_baseItSaItEED1Ev>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	3728      	adds	r7, #40	; 0x28
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}

08001b42 <_ZNSt5dequeIfSaIfEEixEj>:
       *  Note that data access with this operator is unchecked and
       *  out_of_range lookups are not defined. (For checked lookups
       *  see at().)
       */
      reference
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 8001b42:	b580      	push	{r7, lr}
 8001b44:	b082      	sub	sp, #8
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	6078      	str	r0, [r7, #4]
 8001b4a:	6039      	str	r1, [r7, #0]
      {
	__glibcxx_requires_subscript(__n);
	return this->_M_impl._M_start[difference_type(__n)];
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	3308      	adds	r3, #8
 8001b50:	683a      	ldr	r2, [r7, #0]
 8001b52:	4611      	mov	r1, r2
 8001b54:	4618      	mov	r0, r3
 8001b56:	f000 fa16 	bl	8001f86 <_ZNKSt15_Deque_iteratorIfRfPfEixEi>
 8001b5a:	4603      	mov	r3, r0
      }
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3708      	adds	r7, #8
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}

08001b64 <_ZNSt5dequeIfSaIfEE9pop_frontEv>:
       *
       *  Note that no data is returned, and if the first element's data is
       *  needed, it should be retrieved before pop_front() is called.
       */
      void
      pop_front() _GLIBCXX_NOEXCEPT
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
      {
	__glibcxx_requires_nonempty();
	if (this->_M_impl._M_start._M_cur
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	689a      	ldr	r2, [r3, #8]
	    != this->_M_impl._M_start._M_last - 1)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	691b      	ldr	r3, [r3, #16]
 8001b74:	3b04      	subs	r3, #4
	if (this->_M_impl._M_start._M_cur
 8001b76:	429a      	cmp	r2, r3
 8001b78:	d00c      	beq.n	8001b94 <_ZNSt5dequeIfSaIfEE9pop_frontEv+0x30>
	  {
	    _Alloc_traits::destroy(this->_M_impl,
 8001b7a:	687a      	ldr	r2, [r7, #4]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	4619      	mov	r1, r3
 8001b82:	4610      	mov	r0, r2
 8001b84:	f000 fa15 	bl	8001fb2 <_ZNSt16allocator_traitsISaIfEE7destroyIfEEvRS0_PT_>
				   this->_M_impl._M_start._M_cur);
	    ++this->_M_impl._M_start._M_cur;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	1d1a      	adds	r2, r3, #4
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	609a      	str	r2, [r3, #8]
	  }
	else
	  _M_pop_front_aux();
      }
 8001b92:	e002      	b.n	8001b9a <_ZNSt5dequeIfSaIfEE9pop_frontEv+0x36>
	  _M_pop_front_aux();
 8001b94:	6878      	ldr	r0, [r7, #4]
 8001b96:	f000 fa19 	bl	8001fcc <_ZNSt5dequeIfSaIfEE16_M_pop_front_auxEv>
      }
 8001b9a:	bf00      	nop
 8001b9c:	3708      	adds	r7, #8
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}

08001ba2 <_ZNSt5dequeIfSaIfEE9push_backERKf>:
      push_back(const value_type& __x)
 8001ba2:	b580      	push	{r7, lr}
 8001ba4:	b082      	sub	sp, #8
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	6078      	str	r0, [r7, #4]
 8001baa:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish._M_cur
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	699a      	ldr	r2, [r3, #24]
	    != this->_M_impl._M_finish._M_last - 1)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6a1b      	ldr	r3, [r3, #32]
 8001bb4:	3b04      	subs	r3, #4
	if (this->_M_impl._M_finish._M_cur
 8001bb6:	429a      	cmp	r2, r3
 8001bb8:	d00c      	beq.n	8001bd4 <_ZNSt5dequeIfSaIfEE9push_backERKf+0x32>
	    _Alloc_traits::construct(this->_M_impl,
 8001bba:	6878      	ldr	r0, [r7, #4]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	699b      	ldr	r3, [r3, #24]
 8001bc0:	683a      	ldr	r2, [r7, #0]
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	f000 fa35 	bl	8002032 <_ZNSt16allocator_traitsISaIfEE9constructIfJRKfEEEvRS0_PT_DpOT0_>
	    ++this->_M_impl._M_finish._M_cur;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	699b      	ldr	r3, [r3, #24]
 8001bcc:	1d1a      	adds	r2, r3, #4
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	619a      	str	r2, [r3, #24]
      }
 8001bd2:	e003      	b.n	8001bdc <_ZNSt5dequeIfSaIfEE9push_backERKf+0x3a>
	  _M_push_back_aux(__x);
 8001bd4:	6839      	ldr	r1, [r7, #0]
 8001bd6:	6878      	ldr	r0, [r7, #4]
 8001bd8:	f000 fa3e 	bl	8002058 <_ZNSt5dequeIfSaIfEE16_M_push_back_auxIJRKfEEEvDpOT_>
      }
 8001bdc:	bf00      	nop
 8001bde:	3708      	adds	r7, #8
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}

08001be4 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8001be4:	b480      	push	{r7}
 8001be6:	b083      	sub	sp, #12
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	4618      	mov	r0, r3
 8001bf0:	370c      	adds	r7, #12
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr

08001bfa <_ZNSt5dequeIfSaIfEE9push_backEOf>:
      push_back(value_type&& __x)
 8001bfa:	b580      	push	{r7, lr}
 8001bfc:	b082      	sub	sp, #8
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	6078      	str	r0, [r7, #4]
 8001c02:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 8001c04:	6838      	ldr	r0, [r7, #0]
 8001c06:	f7ff ffed 	bl	8001be4 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	f000 fa5d 	bl	80020ce <_ZNSt5dequeIfSaIfEE12emplace_backIJfEEEvDpOT_>
 8001c14:	bf00      	nop
 8001c16:	3708      	adds	r7, #8
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}

08001c1c <_ZNSt5dequeItSaItEE9push_backERKt>:
      push_back(const value_type& __x)
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b082      	sub	sp, #8
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
 8001c24:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish._M_cur
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	699a      	ldr	r2, [r3, #24]
	    != this->_M_impl._M_finish._M_last - 1)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6a1b      	ldr	r3, [r3, #32]
 8001c2e:	3b02      	subs	r3, #2
	if (this->_M_impl._M_finish._M_cur
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d00c      	beq.n	8001c4e <_ZNSt5dequeItSaItEE9push_backERKt+0x32>
	    _Alloc_traits::construct(this->_M_impl,
 8001c34:	6878      	ldr	r0, [r7, #4]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	699b      	ldr	r3, [r3, #24]
 8001c3a:	683a      	ldr	r2, [r7, #0]
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	f000 fa7b 	bl	8002138 <_ZNSt16allocator_traitsISaItEE9constructItJRKtEEEvRS0_PT_DpOT0_>
	    ++this->_M_impl._M_finish._M_cur;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	699b      	ldr	r3, [r3, #24]
 8001c46:	1c9a      	adds	r2, r3, #2
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	619a      	str	r2, [r3, #24]
      }
 8001c4c:	e003      	b.n	8001c56 <_ZNSt5dequeItSaItEE9push_backERKt+0x3a>
	  _M_push_back_aux(__x);
 8001c4e:	6839      	ldr	r1, [r7, #0]
 8001c50:	6878      	ldr	r0, [r7, #4]
 8001c52:	f000 fa84 	bl	800215e <_ZNSt5dequeItSaItEE16_M_push_back_auxIJRKtEEEvDpOT_>
      }
 8001c56:	bf00      	nop
 8001c58:	3708      	adds	r7, #8
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}

08001c5e <_ZNKSt5dequeItSaItEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8001c5e:	b580      	push	{r7, lr}
 8001c60:	b082      	sub	sp, #8
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	f103 0218 	add.w	r2, r3, #24
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	3308      	adds	r3, #8
 8001c70:	4619      	mov	r1, r3
 8001c72:	4610      	mov	r0, r2
 8001c74:	f000 faa3 	bl	80021be <_ZStmiItRtPtENSt15_Deque_iteratorIT_T0_T1_E15difference_typeERKS6_S9_>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3708      	adds	r7, #8
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}

08001c82 <_ZNSt5dequeItSaItEEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 8001c82:	b580      	push	{r7, lr}
 8001c84:	b082      	sub	sp, #8
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	6078      	str	r0, [r7, #4]
 8001c8a:	6039      	str	r1, [r7, #0]
	return this->_M_impl._M_start[difference_type(__n)];
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	3308      	adds	r3, #8
 8001c90:	683a      	ldr	r2, [r7, #0]
 8001c92:	4611      	mov	r1, r2
 8001c94:	4618      	mov	r0, r3
 8001c96:	f000 fab9 	bl	800220c <_ZNKSt15_Deque_iteratorItRtPtEixEi>
 8001c9a:	4603      	mov	r3, r0
      }
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	3708      	adds	r7, #8
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}

08001ca4 <_ZN9__gnu_cxx13new_allocatorIfEC1Ev>:
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001ca4:	b480      	push	{r7}
 8001ca6:	b083      	sub	sp, #12
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	4618      	mov	r0, r3
 8001cb0:	370c      	adds	r7, #12
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr

08001cba <_ZN9__gnu_cxx13new_allocatorIfED1Ev>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }

      template<typename _Tp1>
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001cba:	b480      	push	{r7}
 8001cbc:	b083      	sub	sp, #12
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	6078      	str	r0, [r7, #4]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	370c      	adds	r7, #12
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr

08001cd0 <_ZNSt11_Deque_baseIfSaIfEE11_Deque_implD1Ev>:
      struct _Deque_impl
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
 8001cd8:	6878      	ldr	r0, [r7, #4]
 8001cda:	f7ff feb9 	bl	8001a50 <_ZNSaIfED1Ev>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3708      	adds	r7, #8
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}

08001ce8 <_ZNSt11_Deque_baseIfSaIfEEC1ERKS0_j>:
      _Deque_base(const allocator_type& __a, size_t __num_elements)
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b084      	sub	sp, #16
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	60f8      	str	r0, [r7, #12]
 8001cf0:	60b9      	str	r1, [r7, #8]
 8001cf2:	607a      	str	r2, [r7, #4]
      : _M_impl(__a)
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	68b9      	ldr	r1, [r7, #8]
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f000 fa9d 	bl	8002238 <_ZNSt11_Deque_baseIfSaIfEE11_Deque_implC1ERKS0_>
      { _M_initialize_map(__num_elements); }
 8001cfe:	6879      	ldr	r1, [r7, #4]
 8001d00:	68f8      	ldr	r0, [r7, #12]
 8001d02:	f000 fab7 	bl	8002274 <_ZNSt11_Deque_baseIfSaIfEE17_M_initialize_mapEj>
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	4618      	mov	r0, r3
 8001d0a:	3710      	adds	r7, #16
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}

08001d10 <_ZNSt11_Deque_baseIfSaIfEED1Ev>:
    _Deque_base<_Tp, _Alloc>::
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
      if (this->_M_impl._M_map)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d010      	beq.n	8001d42 <_ZNSt11_Deque_baseIfSaIfEED1Ev+0x32>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6959      	ldr	r1, [r3, #20]
			   this->_M_impl._M_finish._M_node + 1);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 8001d28:	3304      	adds	r3, #4
 8001d2a:	461a      	mov	r2, r3
 8001d2c:	6878      	ldr	r0, [r7, #4]
 8001d2e:	f000 fb04 	bl	800233a <_ZNSt11_Deque_baseIfSaIfEE16_M_destroy_nodesEPPfS3_>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6819      	ldr	r1, [r3, #0]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	461a      	mov	r2, r3
 8001d3c:	6878      	ldr	r0, [r7, #4]
 8001d3e:	f000 fb16 	bl	800236e <_ZNSt11_Deque_baseIfSaIfEE17_M_deallocate_mapEPPfj>
    }
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	4618      	mov	r0, r3
 8001d46:	f7ff ffc3 	bl	8001cd0 <_ZNSt11_Deque_baseIfSaIfEE11_Deque_implD1Ev>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3708      	adds	r7, #8
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}

08001d54 <_ZNSt5dequeIfSaIfEE18_M_fill_initializeERKf>:
    }
#endif

  template <typename _Tp, typename _Alloc>
    void
    deque<_Tp, _Alloc>::
 8001d54:	b5b0      	push	{r4, r5, r7, lr}
 8001d56:	b08c      	sub	sp, #48	; 0x30
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
 8001d5c:	6039      	str	r1, [r7, #0]
    _M_fill_initialize(const value_type& __value)
    {
      _Map_pointer __cur;
      __try
        {
          for (__cur = this->_M_impl._M_start._M_node;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	695b      	ldr	r3, [r3, #20]
 8001d62:	62fb      	str	r3, [r7, #44]	; 0x2c
	       __cur < this->_M_impl._M_finish._M_node;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d6a:	429a      	cmp	r2, r3
 8001d6c:	d216      	bcs.n	8001d9c <_ZNSt5dequeIfSaIfEE18_M_fill_initializeERKf+0x48>
	       ++__cur)
            std::__uninitialized_fill_a(*__cur, *__cur + _S_buffer_size(),
 8001d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d70:	681d      	ldr	r5, [r3, #0]
 8001d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d74:	681c      	ldr	r4, [r3, #0]
 8001d76:	f000 fb16 	bl	80023a6 <_ZNSt5dequeIfSaIfEE14_S_buffer_sizeEv>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	009b      	lsls	r3, r3, #2
 8001d7e:	441c      	add	r4, r3
					__value, _M_get_Tp_allocator());
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	4618      	mov	r0, r3
 8001d84:	f000 f83a 	bl	8001dfc <_ZNSt11_Deque_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8001d88:	4603      	mov	r3, r0
            std::__uninitialized_fill_a(*__cur, *__cur + _S_buffer_size(),
 8001d8a:	683a      	ldr	r2, [r7, #0]
 8001d8c:	4621      	mov	r1, r4
 8001d8e:	4628      	mov	r0, r5
 8001d90:	f000 fb11 	bl	80023b6 <_ZSt22__uninitialized_fill_aIPfffEvT_S1_RKT0_RSaIT1_E>
          for (__cur = this->_M_impl._M_start._M_node;
 8001d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d96:	3304      	adds	r3, #4
 8001d98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d9a:	e7e3      	b.n	8001d64 <_ZNSt5dequeIfSaIfEE18_M_fill_initializeERKf+0x10>
          std::__uninitialized_fill_a(this->_M_impl._M_finish._M_first,
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	69dc      	ldr	r4, [r3, #28]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	699d      	ldr	r5, [r3, #24]
				      this->_M_impl._M_finish._M_cur,
				      __value, _M_get_Tp_allocator());
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	4618      	mov	r0, r3
 8001da8:	f000 f828 	bl	8001dfc <_ZNSt11_Deque_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8001dac:	4603      	mov	r3, r0
          std::__uninitialized_fill_a(this->_M_impl._M_finish._M_first,
 8001dae:	683a      	ldr	r2, [r7, #0]
 8001db0:	4629      	mov	r1, r5
 8001db2:	4620      	mov	r0, r4
 8001db4:	f000 faff 	bl	80023b6 <_ZSt22__uninitialized_fill_aIPfffEvT_S1_RKT0_RSaIT1_E>
        {
          std::_Destroy(this->_M_impl._M_start, iterator(*__cur, __cur),
			_M_get_Tp_allocator());
          __throw_exception_again;
        }
    }
 8001db8:	bf00      	nop
 8001dba:	3730      	adds	r7, #48	; 0x30
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bdb0      	pop	{r4, r5, r7, pc}

08001dc0 <_ZNSt5dequeIfSaIfEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
 8001dc8:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_start; }
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	3308      	adds	r3, #8
 8001dce:	4619      	mov	r1, r3
 8001dd0:	6878      	ldr	r0, [r7, #4]
 8001dd2:	f000 f81e 	bl	8001e12 <_ZNSt15_Deque_iteratorIfRfPfEC1ERKS2_>
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	3708      	adds	r7, #8
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}

08001dde <_ZNSt5dequeIfSaIfEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8001dde:	b580      	push	{r7, lr}
 8001de0:	b082      	sub	sp, #8
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	6078      	str	r0, [r7, #4]
 8001de6:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_finish; }
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	3318      	adds	r3, #24
 8001dec:	4619      	mov	r1, r3
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f000 f80f 	bl	8001e12 <_ZNSt15_Deque_iteratorIfRfPfEC1ERKS2_>
 8001df4:	6878      	ldr	r0, [r7, #4]
 8001df6:	3708      	adds	r7, #8
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}

08001dfc <_ZNSt11_Deque_baseIfSaIfEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8001dfc:	b480      	push	{r7}
 8001dfe:	b083      	sub	sp, #12
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	4618      	mov	r0, r3
 8001e08:	370c      	adds	r7, #12
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr

08001e12 <_ZNSt15_Deque_iteratorIfRfPfEC1ERKS2_>:
      _Deque_iterator(const iterator& __x) _GLIBCXX_NOEXCEPT
 8001e12:	b480      	push	{r7}
 8001e14:	b083      	sub	sp, #12
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	6078      	str	r0, [r7, #4]
 8001e1a:	6039      	str	r1, [r7, #0]
      : _M_cur(__x._M_cur), _M_first(__x._M_first),
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	681a      	ldr	r2, [r3, #0]
	_M_last(__x._M_last), _M_node(__x._M_node) { }
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	601a      	str	r2, [r3, #0]
      : _M_cur(__x._M_cur), _M_first(__x._M_first),
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	685a      	ldr	r2, [r3, #4]
	_M_last(__x._M_last), _M_node(__x._M_node) { }
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	605a      	str	r2, [r3, #4]
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	689a      	ldr	r2, [r3, #8]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	609a      	str	r2, [r3, #8]
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	68da      	ldr	r2, [r3, #12]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	60da      	str	r2, [r3, #12]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	4618      	mov	r0, r3
 8001e40:	370c      	adds	r7, #12
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr

08001e4a <_ZNSt5dequeIfSaIfEE15_M_destroy_dataESt15_Deque_iteratorIfRfPfES5_RKS0_>:
	void
	_M_destroy_data(iterator __first, iterator __last, const _Alloc1&)
	{ _M_destroy_data_aux(__first, __last); }

      void
      _M_destroy_data(iterator __first, iterator __last,
 8001e4a:	b480      	push	{r7}
 8001e4c:	b08d      	sub	sp, #52	; 0x34
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	60f8      	str	r0, [r7, #12]
 8001e52:	60b9      	str	r1, [r7, #8]
 8001e54:	607a      	str	r2, [r7, #4]
 8001e56:	603b      	str	r3, [r7, #0]
		      const std::allocator<_Tp>&)
      {
	if (!__has_trivial_destructor(value_type))
	  _M_destroy_data_aux(__first, __last);
      }
 8001e58:	bf00      	nop
 8001e5a:	3734      	adds	r7, #52	; 0x34
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr

08001e64 <_ZNSt11_Deque_baseItSaItEE11_Deque_implD1Ev>:
      struct _Deque_impl
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b082      	sub	sp, #8
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
 8001e6c:	6878      	ldr	r0, [r7, #4]
 8001e6e:	f000 face 	bl	800240e <_ZNSaItED1Ev>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4618      	mov	r0, r3
 8001e76:	3708      	adds	r7, #8
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}

08001e7c <_ZNSt11_Deque_baseItSaItEEC1Ev>:
      _Deque_base()
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b082      	sub	sp, #8
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
      : _M_impl()
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	4618      	mov	r0, r3
 8001e88:	f000 faa5 	bl	80023d6 <_ZNSt11_Deque_baseItSaItEE11_Deque_implC1Ev>
      { _M_initialize_map(0); }
 8001e8c:	2100      	movs	r1, #0
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f000 fac9 	bl	8002426 <_ZNSt11_Deque_baseItSaItEE17_M_initialize_mapEj>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	4618      	mov	r0, r3
 8001e98:	3708      	adds	r7, #8
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}

08001e9e <_ZNSt11_Deque_baseItSaItEED1Ev>:
    _Deque_base<_Tp, _Alloc>::
 8001e9e:	b580      	push	{r7, lr}
 8001ea0:	b082      	sub	sp, #8
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	6078      	str	r0, [r7, #4]
      if (this->_M_impl._M_map)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d010      	beq.n	8001ed0 <_ZNSt11_Deque_baseItSaItEED1Ev+0x32>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6959      	ldr	r1, [r3, #20]
			   this->_M_impl._M_finish._M_node + 1);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 8001eb6:	3304      	adds	r3, #4
 8001eb8:	461a      	mov	r2, r3
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f000 fb16 	bl	80024ec <_ZNSt11_Deque_baseItSaItEE16_M_destroy_nodesEPPtS3_>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6819      	ldr	r1, [r3, #0]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	461a      	mov	r2, r3
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f000 fb28 	bl	8002520 <_ZNSt11_Deque_baseItSaItEE17_M_deallocate_mapEPPtj>
    }
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f7ff ffc6 	bl	8001e64 <_ZNSt11_Deque_baseItSaItEE11_Deque_implD1Ev>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	4618      	mov	r0, r3
 8001edc:	3708      	adds	r7, #8
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}

08001ee2 <_ZNSt5dequeItSaItEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8001ee2:	b580      	push	{r7, lr}
 8001ee4:	b082      	sub	sp, #8
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	6078      	str	r0, [r7, #4]
 8001eea:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_start; }
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	3308      	adds	r3, #8
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f000 f81e 	bl	8001f34 <_ZNSt15_Deque_iteratorItRtPtEC1ERKS2_>
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	3708      	adds	r7, #8
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}

08001f00 <_ZNSt5dequeItSaItEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b082      	sub	sp, #8
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
 8001f08:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_finish; }
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	3318      	adds	r3, #24
 8001f0e:	4619      	mov	r1, r3
 8001f10:	6878      	ldr	r0, [r7, #4]
 8001f12:	f000 f80f 	bl	8001f34 <_ZNSt15_Deque_iteratorItRtPtEC1ERKS2_>
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	3708      	adds	r7, #8
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}

08001f1e <_ZNSt11_Deque_baseItSaItEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8001f1e:	b480      	push	{r7}
 8001f20:	b083      	sub	sp, #12
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4618      	mov	r0, r3
 8001f2a:	370c      	adds	r7, #12
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr

08001f34 <_ZNSt15_Deque_iteratorItRtPtEC1ERKS2_>:
      _Deque_iterator(const iterator& __x) _GLIBCXX_NOEXCEPT
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
 8001f3c:	6039      	str	r1, [r7, #0]
      : _M_cur(__x._M_cur), _M_first(__x._M_first),
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	681a      	ldr	r2, [r3, #0]
	_M_last(__x._M_last), _M_node(__x._M_node) { }
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	601a      	str	r2, [r3, #0]
      : _M_cur(__x._M_cur), _M_first(__x._M_first),
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	685a      	ldr	r2, [r3, #4]
	_M_last(__x._M_last), _M_node(__x._M_node) { }
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	605a      	str	r2, [r3, #4]
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	689a      	ldr	r2, [r3, #8]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	609a      	str	r2, [r3, #8]
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	68da      	ldr	r2, [r3, #12]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	60da      	str	r2, [r3, #12]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4618      	mov	r0, r3
 8001f62:	370c      	adds	r7, #12
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr

08001f6c <_ZNSt5dequeItSaItEE15_M_destroy_dataESt15_Deque_iteratorItRtPtES5_RKS0_>:
      _M_destroy_data(iterator __first, iterator __last,
 8001f6c:	b480      	push	{r7}
 8001f6e:	b08d      	sub	sp, #52	; 0x34
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	60f8      	str	r0, [r7, #12]
 8001f74:	60b9      	str	r1, [r7, #8]
 8001f76:	607a      	str	r2, [r7, #4]
 8001f78:	603b      	str	r3, [r7, #0]
      }
 8001f7a:	bf00      	nop
 8001f7c:	3734      	adds	r7, #52	; 0x34
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr

08001f86 <_ZNKSt15_Deque_iteratorIfRfPfEixEi>:
      operator[](difference_type __n) const _GLIBCXX_NOEXCEPT
 8001f86:	b580      	push	{r7, lr}
 8001f88:	b086      	sub	sp, #24
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	6078      	str	r0, [r7, #4]
 8001f8e:	6039      	str	r1, [r7, #0]
      { return *(*this + __n); }
 8001f90:	f107 0308 	add.w	r3, r7, #8
 8001f94:	683a      	ldr	r2, [r7, #0]
 8001f96:	6879      	ldr	r1, [r7, #4]
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f000 fadd 	bl	8002558 <_ZNKSt15_Deque_iteratorIfRfPfEplEi>
 8001f9e:	f107 0308 	add.w	r3, r7, #8
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f000 faf3 	bl	800258e <_ZNKSt15_Deque_iteratorIfRfPfEdeEv>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	4618      	mov	r0, r3
 8001fac:	3718      	adds	r7, #24
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}

08001fb2 <_ZNSt16allocator_traitsISaIfEE7destroyIfEEvRS0_PT_>:
       *
       *  Calls @c __a.destroy(__p).
      */
      template<typename _Up>
	static void
	destroy(allocator_type& __a, _Up* __p)
 8001fb2:	b580      	push	{r7, lr}
 8001fb4:	b082      	sub	sp, #8
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	6078      	str	r0, [r7, #4]
 8001fba:	6039      	str	r1, [r7, #0]
	{ __a.destroy(__p); }
 8001fbc:	6839      	ldr	r1, [r7, #0]
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f000 faf1 	bl	80025a6 <_ZN9__gnu_cxx13new_allocatorIfE7destroyIfEEvPT_>
 8001fc4:	bf00      	nop
 8001fc6:	3708      	adds	r7, #8
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}

08001fcc <_ZNSt5dequeIfSaIfEE16_M_pop_front_auxEv>:
  // Note that if the deque has at least one element (a precondition for this
  // member function), and if
  //   _M_impl._M_start._M_cur == _M_impl._M_start._M_last,
  // then the deque must have at least two nodes.
  template <typename _Tp, typename _Alloc>
    void deque<_Tp, _Alloc>::
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b082      	sub	sp, #8
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
    _M_pop_front_aux()
    {
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f7ff ff10 	bl	8001dfc <_ZNSt11_Deque_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	4610      	mov	r0, r2
 8001fe6:	f7ff ffe4 	bl	8001fb2 <_ZNSt16allocator_traitsISaIfEE7destroyIfEEvRS0_PT_>
			     this->_M_impl._M_start._M_cur);
      _M_deallocate_node(this->_M_impl._M_start._M_first);
 8001fea:	687a      	ldr	r2, [r7, #4]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	4610      	mov	r0, r2
 8001ff4:	f000 fae2 	bl	80025bc <_ZNSt11_Deque_baseIfSaIfEE18_M_deallocate_nodeEPf>
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	f103 0208 	add.w	r2, r3, #8
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	695b      	ldr	r3, [r3, #20]
 8002002:	3304      	adds	r3, #4
 8002004:	4619      	mov	r1, r3
 8002006:	4610      	mov	r0, r2
 8002008:	f000 faeb 	bl	80025e2 <_ZNSt15_Deque_iteratorIfRfPfE11_M_set_nodeEPS1_>
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	68da      	ldr	r2, [r3, #12]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	609a      	str	r2, [r3, #8]
    }
 8002014:	bf00      	nop
 8002016:	3708      	adds	r7, #8
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}

0800201c <_ZSt7forwardIRKfEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	4618      	mov	r0, r3
 8002028:	370c      	adds	r7, #12
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr

08002032 <_ZNSt16allocator_traitsISaIfEE9constructIfJRKfEEEvRS0_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8002032:	b580      	push	{r7, lr}
 8002034:	b084      	sub	sp, #16
 8002036:	af00      	add	r7, sp, #0
 8002038:	60f8      	str	r0, [r7, #12]
 800203a:	60b9      	str	r1, [r7, #8]
 800203c:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f7ff ffec 	bl	800201c <_ZSt7forwardIRKfEOT_RNSt16remove_referenceIS2_E4typeE>
 8002044:	4603      	mov	r3, r0
 8002046:	461a      	mov	r2, r3
 8002048:	68b9      	ldr	r1, [r7, #8]
 800204a:	68f8      	ldr	r0, [r7, #12]
 800204c:	f000 fae2 	bl	8002614 <_ZN9__gnu_cxx13new_allocatorIfE9constructIfJRKfEEEvPT_DpOT0_>
 8002050:	bf00      	nop
 8002052:	3710      	adds	r7, #16
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}

08002058 <_ZNSt5dequeIfSaIfEE16_M_push_back_auxIJRKfEEEvDpOT_>:
      deque<_Tp, _Alloc>::
 8002058:	b5b0      	push	{r4, r5, r7, lr}
 800205a:	b082      	sub	sp, #8
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
 8002060:	6039      	str	r1, [r7, #0]
	_M_reserve_map_at_back();
 8002062:	2101      	movs	r1, #1
 8002064:	6878      	ldr	r0, [r7, #4]
 8002066:	f000 faed 	bl	8002644 <_ZNSt5dequeIfSaIfEE22_M_reserve_map_at_backEj>
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
 800206a:	687a      	ldr	r2, [r7, #4]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002070:	1d1c      	adds	r4, r3, #4
 8002072:	4610      	mov	r0, r2
 8002074:	f000 fb02 	bl	800267c <_ZNSt11_Deque_baseIfSaIfEE16_M_allocate_nodeEv>
 8002078:	4603      	mov	r3, r0
 800207a:	6023      	str	r3, [r4, #0]
	    _Alloc_traits::construct(this->_M_impl,
 800207c:	687c      	ldr	r4, [r7, #4]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	699d      	ldr	r5, [r3, #24]
 8002082:	6838      	ldr	r0, [r7, #0]
 8002084:	f7ff ffca 	bl	800201c <_ZSt7forwardIRKfEOT_RNSt16remove_referenceIS2_E4typeE>
 8002088:	4603      	mov	r3, r0
 800208a:	461a      	mov	r2, r3
 800208c:	4629      	mov	r1, r5
 800208e:	4620      	mov	r0, r4
 8002090:	f7ff ffcf 	bl	8002032 <_ZNSt16allocator_traitsISaIfEE9constructIfJRKfEEEvRS0_PT_DpOT0_>
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	f103 0218 	add.w	r2, r3, #24
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800209e:	3304      	adds	r3, #4
 80020a0:	4619      	mov	r1, r3
 80020a2:	4610      	mov	r0, r2
 80020a4:	f000 fa9d 	bl	80025e2 <_ZNSt15_Deque_iteratorIfRfPfE11_M_set_nodeEPS1_>
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	69da      	ldr	r2, [r3, #28]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	619a      	str	r2, [r3, #24]
      }
 80020b0:	bf00      	nop
 80020b2:	3708      	adds	r7, #8
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bdb0      	pop	{r4, r5, r7, pc}

080020b8 <_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	4618      	mov	r0, r3
 80020c4:	370c      	adds	r7, #12
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr

080020ce <_ZNSt5dequeIfSaIfEE12emplace_backIJfEEEvDpOT_>:
      deque<_Tp, _Alloc>::
 80020ce:	b5b0      	push	{r4, r5, r7, lr}
 80020d0:	b082      	sub	sp, #8
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	6078      	str	r0, [r7, #4]
 80020d6:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish._M_cur
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	699a      	ldr	r2, [r3, #24]
	    != this->_M_impl._M_finish._M_last - 1)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6a1b      	ldr	r3, [r3, #32]
 80020e0:	3b04      	subs	r3, #4
	if (this->_M_impl._M_finish._M_cur
 80020e2:	429a      	cmp	r2, r3
 80020e4:	d011      	beq.n	800210a <_ZNSt5dequeIfSaIfEE12emplace_backIJfEEEvDpOT_+0x3c>
	    _Alloc_traits::construct(this->_M_impl,
 80020e6:	687c      	ldr	r4, [r7, #4]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	699d      	ldr	r5, [r3, #24]
 80020ec:	6838      	ldr	r0, [r7, #0]
 80020ee:	f7ff ffe3 	bl	80020b8 <_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE>
 80020f2:	4603      	mov	r3, r0
 80020f4:	461a      	mov	r2, r3
 80020f6:	4629      	mov	r1, r5
 80020f8:	4620      	mov	r0, r4
 80020fa:	f000 fad1 	bl	80026a0 <_ZNSt16allocator_traitsISaIfEE9constructIfJfEEEvRS0_PT_DpOT0_>
	    ++this->_M_impl._M_finish._M_cur;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	699b      	ldr	r3, [r3, #24]
 8002102:	1d1a      	adds	r2, r3, #4
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	619a      	str	r2, [r3, #24]
      }
 8002108:	e007      	b.n	800211a <_ZNSt5dequeIfSaIfEE12emplace_backIJfEEEvDpOT_+0x4c>
	  _M_push_back_aux(std::forward<_Args>(__args)...);
 800210a:	6838      	ldr	r0, [r7, #0]
 800210c:	f7ff ffd4 	bl	80020b8 <_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE>
 8002110:	4603      	mov	r3, r0
 8002112:	4619      	mov	r1, r3
 8002114:	6878      	ldr	r0, [r7, #4]
 8002116:	f000 fad6 	bl	80026c6 <_ZNSt5dequeIfSaIfEE16_M_push_back_auxIJfEEEvDpOT_>
      }
 800211a:	bf00      	nop
 800211c:	3708      	adds	r7, #8
 800211e:	46bd      	mov	sp, r7
 8002120:	bdb0      	pop	{r4, r5, r7, pc}

08002122 <_ZSt7forwardIRKtEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002122:	b480      	push	{r7}
 8002124:	b083      	sub	sp, #12
 8002126:	af00      	add	r7, sp, #0
 8002128:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4618      	mov	r0, r3
 800212e:	370c      	adds	r7, #12
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr

08002138 <_ZNSt16allocator_traitsISaItEE9constructItJRKtEEEvRS0_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8002138:	b580      	push	{r7, lr}
 800213a:	b084      	sub	sp, #16
 800213c:	af00      	add	r7, sp, #0
 800213e:	60f8      	str	r0, [r7, #12]
 8002140:	60b9      	str	r1, [r7, #8]
 8002142:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8002144:	6878      	ldr	r0, [r7, #4]
 8002146:	f7ff ffec 	bl	8002122 <_ZSt7forwardIRKtEOT_RNSt16remove_referenceIS2_E4typeE>
 800214a:	4603      	mov	r3, r0
 800214c:	461a      	mov	r2, r3
 800214e:	68b9      	ldr	r1, [r7, #8]
 8002150:	68f8      	ldr	r0, [r7, #12]
 8002152:	f000 fae8 	bl	8002726 <_ZN9__gnu_cxx13new_allocatorItE9constructItJRKtEEEvPT_DpOT0_>
 8002156:	bf00      	nop
 8002158:	3710      	adds	r7, #16
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}

0800215e <_ZNSt5dequeItSaItEE16_M_push_back_auxIJRKtEEEvDpOT_>:
      deque<_Tp, _Alloc>::
 800215e:	b5b0      	push	{r4, r5, r7, lr}
 8002160:	b082      	sub	sp, #8
 8002162:	af00      	add	r7, sp, #0
 8002164:	6078      	str	r0, [r7, #4]
 8002166:	6039      	str	r1, [r7, #0]
	_M_reserve_map_at_back();
 8002168:	2101      	movs	r1, #1
 800216a:	6878      	ldr	r0, [r7, #4]
 800216c:	f000 faf4 	bl	8002758 <_ZNSt5dequeItSaItEE22_M_reserve_map_at_backEj>
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
 8002170:	687a      	ldr	r2, [r7, #4]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002176:	1d1c      	adds	r4, r3, #4
 8002178:	4610      	mov	r0, r2
 800217a:	f000 fb09 	bl	8002790 <_ZNSt11_Deque_baseItSaItEE16_M_allocate_nodeEv>
 800217e:	4603      	mov	r3, r0
 8002180:	6023      	str	r3, [r4, #0]
	    _Alloc_traits::construct(this->_M_impl,
 8002182:	687c      	ldr	r4, [r7, #4]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	699d      	ldr	r5, [r3, #24]
 8002188:	6838      	ldr	r0, [r7, #0]
 800218a:	f7ff ffca 	bl	8002122 <_ZSt7forwardIRKtEOT_RNSt16remove_referenceIS2_E4typeE>
 800218e:	4603      	mov	r3, r0
 8002190:	461a      	mov	r2, r3
 8002192:	4629      	mov	r1, r5
 8002194:	4620      	mov	r0, r4
 8002196:	f7ff ffcf 	bl	8002138 <_ZNSt16allocator_traitsISaItEE9constructItJRKtEEEvRS0_PT_DpOT0_>
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	f103 0218 	add.w	r2, r3, #24
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a4:	3304      	adds	r3, #4
 80021a6:	4619      	mov	r1, r3
 80021a8:	4610      	mov	r0, r2
 80021aa:	f000 fb03 	bl	80027b4 <_ZNSt15_Deque_iteratorItRtPtE11_M_set_nodeEPS1_>
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	69da      	ldr	r2, [r3, #28]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	619a      	str	r2, [r3, #24]
      }
 80021b6:	bf00      	nop
 80021b8:	3708      	adds	r7, #8
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bdb0      	pop	{r4, r5, r7, pc}

080021be <_ZStmiItRtPtENSt15_Deque_iteratorIT_T0_T1_E15difference_typeERKS6_S9_>:
    operator-(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,
 80021be:	b580      	push	{r7, lr}
 80021c0:	b082      	sub	sp, #8
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	6078      	str	r0, [r7, #4]
 80021c6:	6039      	str	r1, [r7, #0]
	(_Deque_iterator<_Tp, _Ref, _Ptr>::_S_buffer_size())
 80021c8:	f000 fb20 	bl	800280c <_ZNSt15_Deque_iteratorItRtPtE14_S_buffer_sizeEv>
 80021cc:	4603      	mov	r3, r0
 80021ce:	461a      	mov	r2, r3
	* (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	68db      	ldr	r3, [r3, #12]
 80021d4:	4619      	mov	r1, r3
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	68db      	ldr	r3, [r3, #12]
 80021da:	1acb      	subs	r3, r1, r3
 80021dc:	109b      	asrs	r3, r3, #2
 80021de:	3b01      	subs	r3, #1
 80021e0:	fb03 f302 	mul.w	r3, r3, r2
 80021e4:	687a      	ldr	r2, [r7, #4]
 80021e6:	6812      	ldr	r2, [r2, #0]
 80021e8:	4611      	mov	r1, r2
 80021ea:	687a      	ldr	r2, [r7, #4]
 80021ec:	6852      	ldr	r2, [r2, #4]
 80021ee:	1a8a      	subs	r2, r1, r2
 80021f0:	1052      	asrs	r2, r2, #1
 80021f2:	4413      	add	r3, r2
	+ (__y._M_last - __y._M_cur);
 80021f4:	683a      	ldr	r2, [r7, #0]
 80021f6:	6892      	ldr	r2, [r2, #8]
 80021f8:	4611      	mov	r1, r2
 80021fa:	683a      	ldr	r2, [r7, #0]
 80021fc:	6812      	ldr	r2, [r2, #0]
 80021fe:	1a8a      	subs	r2, r1, r2
 8002200:	1052      	asrs	r2, r2, #1
 8002202:	4413      	add	r3, r2
    }
 8002204:	4618      	mov	r0, r3
 8002206:	3708      	adds	r7, #8
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}

0800220c <_ZNKSt15_Deque_iteratorItRtPtEixEi>:
      operator[](difference_type __n) const _GLIBCXX_NOEXCEPT
 800220c:	b580      	push	{r7, lr}
 800220e:	b086      	sub	sp, #24
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
 8002214:	6039      	str	r1, [r7, #0]
      { return *(*this + __n); }
 8002216:	f107 0308 	add.w	r3, r7, #8
 800221a:	683a      	ldr	r2, [r7, #0]
 800221c:	6879      	ldr	r1, [r7, #4]
 800221e:	4618      	mov	r0, r3
 8002220:	f000 fafc 	bl	800281c <_ZNKSt15_Deque_iteratorItRtPtEplEi>
 8002224:	f107 0308 	add.w	r3, r7, #8
 8002228:	4618      	mov	r0, r3
 800222a:	f000 fb12 	bl	8002852 <_ZNKSt15_Deque_iteratorItRtPtEdeEv>
 800222e:	4603      	mov	r3, r0
 8002230:	4618      	mov	r0, r3
 8002232:	3718      	adds	r7, #24
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}

08002238 <_ZNSt11_Deque_baseIfSaIfEE11_Deque_implC1ERKS0_>:
	_Deque_impl(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8002238:	b580      	push	{r7, lr}
 800223a:	b082      	sub	sp, #8
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
 8002240:	6039      	str	r1, [r7, #0]
	  _M_start(), _M_finish()
 8002242:	6839      	ldr	r1, [r7, #0]
 8002244:	6878      	ldr	r0, [r7, #4]
 8002246:	f000 fb10 	bl	800286a <_ZNSaIfEC1ERKS_>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2200      	movs	r2, #0
 800224e:	601a      	str	r2, [r3, #0]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2200      	movs	r2, #0
 8002254:	605a      	str	r2, [r3, #4]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	3308      	adds	r3, #8
 800225a:	4618      	mov	r0, r3
 800225c:	f000 fb13 	bl	8002886 <_ZNSt15_Deque_iteratorIfRfPfEC1Ev>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	3318      	adds	r3, #24
 8002264:	4618      	mov	r0, r3
 8002266:	f000 fb0e 	bl	8002886 <_ZNSt15_Deque_iteratorIfRfPfEC1Ev>
	{ }
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4618      	mov	r0, r3
 800226e:	3708      	adds	r7, #8
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}

08002274 <_ZNSt11_Deque_baseIfSaIfEE17_M_initialize_mapEj>:
    _Deque_base<_Tp, _Alloc>::
 8002274:	b590      	push	{r4, r7, lr}
 8002276:	b089      	sub	sp, #36	; 0x24
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
 800227c:	6039      	str	r1, [r7, #0]
      const size_t __num_nodes = (__num_elements/ __deque_buf_size(sizeof(_Tp))
 800227e:	2004      	movs	r0, #4
 8002280:	f7fe fee0 	bl	8001044 <_ZSt16__deque_buf_sizej>
 8002284:	4602      	mov	r2, r0
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	fbb3 f3f2 	udiv	r3, r3, r2
 800228c:	3301      	adds	r3, #1
 800228e:	61fb      	str	r3, [r7, #28]
					   size_t(__num_nodes + 2));
 8002290:	2308      	movs	r3, #8
 8002292:	60fb      	str	r3, [r7, #12]
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	3302      	adds	r3, #2
 8002298:	613b      	str	r3, [r7, #16]
 800229a:	f107 0210 	add.w	r2, r7, #16
 800229e:	f107 030c 	add.w	r3, r7, #12
 80022a2:	4611      	mov	r1, r2
 80022a4:	4618      	mov	r0, r3
 80022a6:	f000 fb05 	bl	80028b4 <_ZSt3maxIjERKT_S2_S2_>
 80022aa:	4603      	mov	r3, r0
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	4619      	mov	r1, r3
 80022b8:	6878      	ldr	r0, [r7, #4]
 80022ba:	f000 fb0f 	bl	80028dc <_ZNSt11_Deque_baseIfSaIfEE15_M_allocate_mapEj>
 80022be:	4602      	mov	r2, r0
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	601a      	str	r2, [r3, #0]
      _Map_pointer __nstart = (this->_M_impl._M_map
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681a      	ldr	r2, [r3, #0]
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6859      	ldr	r1, [r3, #4]
 80022cc:	69fb      	ldr	r3, [r7, #28]
 80022ce:	1acb      	subs	r3, r1, r3
 80022d0:	085b      	lsrs	r3, r3, #1
 80022d2:	009b      	lsls	r3, r3, #2
      _Map_pointer __nstart = (this->_M_impl._M_map
 80022d4:	4413      	add	r3, r2
 80022d6:	61bb      	str	r3, [r7, #24]
      _Map_pointer __nfinish = __nstart + __num_nodes;
 80022d8:	69fb      	ldr	r3, [r7, #28]
 80022da:	009b      	lsls	r3, r3, #2
 80022dc:	69ba      	ldr	r2, [r7, #24]
 80022de:	4413      	add	r3, r2
 80022e0:	617b      	str	r3, [r7, #20]
	{ _M_create_nodes(__nstart, __nfinish); }
 80022e2:	697a      	ldr	r2, [r7, #20]
 80022e4:	69b9      	ldr	r1, [r7, #24]
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f000 fb14 	bl	8002914 <_ZNSt11_Deque_baseIfSaIfEE15_M_create_nodesEPPfS3_>
      this->_M_impl._M_start._M_set_node(__nstart);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	3308      	adds	r3, #8
 80022f0:	69b9      	ldr	r1, [r7, #24]
 80022f2:	4618      	mov	r0, r3
 80022f4:	f000 f975 	bl	80025e2 <_ZNSt15_Deque_iteratorIfRfPfE11_M_set_nodeEPS1_>
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	f103 0218 	add.w	r2, r3, #24
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	3b04      	subs	r3, #4
 8002302:	4619      	mov	r1, r3
 8002304:	4610      	mov	r0, r2
 8002306:	f000 f96c 	bl	80025e2 <_ZNSt15_Deque_iteratorIfRfPfE11_M_set_nodeEPS1_>
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	68da      	ldr	r2, [r3, #12]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	609a      	str	r2, [r3, #8]
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	69dc      	ldr	r4, [r3, #28]
					% __deque_buf_size(sizeof(_Tp)));
 8002316:	2004      	movs	r0, #4
 8002318:	f7fe fe94 	bl	8001044 <_ZSt16__deque_buf_sizej>
 800231c:	4602      	mov	r2, r0
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	fbb3 f1f2 	udiv	r1, r3, r2
 8002324:	fb02 f201 	mul.w	r2, r2, r1
 8002328:	1a9b      	subs	r3, r3, r2
					+ __num_elements
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	18e2      	adds	r2, r4, r3
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	619a      	str	r2, [r3, #24]
    }
 8002332:	bf00      	nop
 8002334:	3724      	adds	r7, #36	; 0x24
 8002336:	46bd      	mov	sp, r7
 8002338:	bd90      	pop	{r4, r7, pc}

0800233a <_ZNSt11_Deque_baseIfSaIfEE16_M_destroy_nodesEPPfS3_>:
    _Deque_base<_Tp, _Alloc>::
 800233a:	b580      	push	{r7, lr}
 800233c:	b086      	sub	sp, #24
 800233e:	af00      	add	r7, sp, #0
 8002340:	60f8      	str	r0, [r7, #12]
 8002342:	60b9      	str	r1, [r7, #8]
 8002344:	607a      	str	r2, [r7, #4]
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	617b      	str	r3, [r7, #20]
 800234a:	697a      	ldr	r2, [r7, #20]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	429a      	cmp	r2, r3
 8002350:	d209      	bcs.n	8002366 <_ZNSt11_Deque_baseIfSaIfEE16_M_destroy_nodesEPPfS3_+0x2c>
	_M_deallocate_node(*__n);
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4619      	mov	r1, r3
 8002358:	68f8      	ldr	r0, [r7, #12]
 800235a:	f000 f92f 	bl	80025bc <_ZNSt11_Deque_baseIfSaIfEE18_M_deallocate_nodeEPf>
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	3304      	adds	r3, #4
 8002362:	617b      	str	r3, [r7, #20]
 8002364:	e7f1      	b.n	800234a <_ZNSt11_Deque_baseIfSaIfEE16_M_destroy_nodesEPPfS3_+0x10>
    }
 8002366:	bf00      	nop
 8002368:	3718      	adds	r7, #24
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}

0800236e <_ZNSt11_Deque_baseIfSaIfEE17_M_deallocate_mapEPPfj>:
      _M_deallocate_map(_Map_pointer __p, size_t __n) _GLIBCXX_NOEXCEPT
 800236e:	b580      	push	{r7, lr}
 8002370:	b086      	sub	sp, #24
 8002372:	af00      	add	r7, sp, #0
 8002374:	60f8      	str	r0, [r7, #12]
 8002376:	60b9      	str	r1, [r7, #8]
 8002378:	607a      	str	r2, [r7, #4]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 800237a:	f107 0314 	add.w	r3, r7, #20
 800237e:	68f9      	ldr	r1, [r7, #12]
 8002380:	4618      	mov	r0, r3
 8002382:	f000 fae1 	bl	8002948 <_ZNKSt11_Deque_baseIfSaIfEE20_M_get_map_allocatorEv>
	_Map_alloc_traits::deallocate(__map_alloc, __p, __n);
 8002386:	f107 0314 	add.w	r3, r7, #20
 800238a:	687a      	ldr	r2, [r7, #4]
 800238c:	68b9      	ldr	r1, [r7, #8]
 800238e:	4618      	mov	r0, r3
 8002390:	f000 faf7 	bl	8002982 <_ZNSt16allocator_traitsISaIPfEE10deallocateERS1_PS0_j>
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8002394:	f107 0314 	add.w	r3, r7, #20
 8002398:	4618      	mov	r0, r3
 800239a:	f000 fae6 	bl	800296a <_ZNSaIPfED1Ev>
      }
 800239e:	bf00      	nop
 80023a0:	3718      	adds	r7, #24
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}

080023a6 <_ZNSt5dequeIfSaIfEE14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 80023a6:	b580      	push	{r7, lr}
 80023a8:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 80023aa:	2004      	movs	r0, #4
 80023ac:	f7fe fe4a 	bl	8001044 <_ZSt16__deque_buf_sizej>
 80023b0:	4603      	mov	r3, r0
 80023b2:	4618      	mov	r0, r3
 80023b4:	bd80      	pop	{r7, pc}

080023b6 <_ZSt22__uninitialized_fill_aIPfffEvT_S1_RKT0_RSaIT1_E>:
	}
    }

  template<typename _ForwardIterator, typename _Tp, typename _Tp2>
    inline void
    __uninitialized_fill_a(_ForwardIterator __first, _ForwardIterator __last,
 80023b6:	b580      	push	{r7, lr}
 80023b8:	b084      	sub	sp, #16
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	60f8      	str	r0, [r7, #12]
 80023be:	60b9      	str	r1, [r7, #8]
 80023c0:	607a      	str	r2, [r7, #4]
 80023c2:	603b      	str	r3, [r7, #0]
			   const _Tp& __x, allocator<_Tp2>&)
    { std::uninitialized_fill(__first, __last, __x); }
 80023c4:	687a      	ldr	r2, [r7, #4]
 80023c6:	68b9      	ldr	r1, [r7, #8]
 80023c8:	68f8      	ldr	r0, [r7, #12]
 80023ca:	f000 fae9 	bl	80029a0 <_ZSt18uninitialized_fillIPffEvT_S1_RKT0_>
 80023ce:	bf00      	nop
 80023d0:	3710      	adds	r7, #16
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}

080023d6 <_ZNSt11_Deque_baseItSaItEE11_Deque_implC1Ev>:
	_Deque_impl()
 80023d6:	b580      	push	{r7, lr}
 80023d8:	b082      	sub	sp, #8
 80023da:	af00      	add	r7, sp, #0
 80023dc:	6078      	str	r0, [r7, #4]
	  _M_start(), _M_finish()
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	f000 faf7 	bl	80029d2 <_ZNSaItEC1Ev>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2200      	movs	r2, #0
 80023e8:	601a      	str	r2, [r3, #0]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2200      	movs	r2, #0
 80023ee:	605a      	str	r2, [r3, #4]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	3308      	adds	r3, #8
 80023f4:	4618      	mov	r0, r3
 80023f6:	f000 faf8 	bl	80029ea <_ZNSt15_Deque_iteratorItRtPtEC1Ev>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	3318      	adds	r3, #24
 80023fe:	4618      	mov	r0, r3
 8002400:	f000 faf3 	bl	80029ea <_ZNSt15_Deque_iteratorItRtPtEC1Ev>
	{ }
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	4618      	mov	r0, r3
 8002408:	3708      	adds	r7, #8
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}

0800240e <_ZNSaItED1Ev>:
 800240e:	b580      	push	{r7, lr}
 8002410:	b082      	sub	sp, #8
 8002412:	af00      	add	r7, sp, #0
 8002414:	6078      	str	r0, [r7, #4]
 8002416:	6878      	ldr	r0, [r7, #4]
 8002418:	f000 fafe 	bl	8002a18 <_ZN9__gnu_cxx13new_allocatorItED1Ev>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	4618      	mov	r0, r3
 8002420:	3708      	adds	r7, #8
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}

08002426 <_ZNSt11_Deque_baseItSaItEE17_M_initialize_mapEj>:
    _Deque_base<_Tp, _Alloc>::
 8002426:	b590      	push	{r4, r7, lr}
 8002428:	b089      	sub	sp, #36	; 0x24
 800242a:	af00      	add	r7, sp, #0
 800242c:	6078      	str	r0, [r7, #4]
 800242e:	6039      	str	r1, [r7, #0]
      const size_t __num_nodes = (__num_elements/ __deque_buf_size(sizeof(_Tp))
 8002430:	2002      	movs	r0, #2
 8002432:	f7fe fe07 	bl	8001044 <_ZSt16__deque_buf_sizej>
 8002436:	4602      	mov	r2, r0
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	fbb3 f3f2 	udiv	r3, r3, r2
 800243e:	3301      	adds	r3, #1
 8002440:	61fb      	str	r3, [r7, #28]
					   size_t(__num_nodes + 2));
 8002442:	2308      	movs	r3, #8
 8002444:	60fb      	str	r3, [r7, #12]
 8002446:	69fb      	ldr	r3, [r7, #28]
 8002448:	3302      	adds	r3, #2
 800244a:	613b      	str	r3, [r7, #16]
 800244c:	f107 0210 	add.w	r2, r7, #16
 8002450:	f107 030c 	add.w	r3, r7, #12
 8002454:	4611      	mov	r1, r2
 8002456:	4618      	mov	r0, r3
 8002458:	f000 fa2c 	bl	80028b4 <_ZSt3maxIjERKT_S2_S2_>
 800245c:	4603      	mov	r3, r0
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	4619      	mov	r1, r3
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	f000 fadf 	bl	8002a2e <_ZNSt11_Deque_baseItSaItEE15_M_allocate_mapEj>
 8002470:	4602      	mov	r2, r0
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	601a      	str	r2, [r3, #0]
      _Map_pointer __nstart = (this->_M_impl._M_map
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681a      	ldr	r2, [r3, #0]
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6859      	ldr	r1, [r3, #4]
 800247e:	69fb      	ldr	r3, [r7, #28]
 8002480:	1acb      	subs	r3, r1, r3
 8002482:	085b      	lsrs	r3, r3, #1
 8002484:	009b      	lsls	r3, r3, #2
      _Map_pointer __nstart = (this->_M_impl._M_map
 8002486:	4413      	add	r3, r2
 8002488:	61bb      	str	r3, [r7, #24]
      _Map_pointer __nfinish = __nstart + __num_nodes;
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	69ba      	ldr	r2, [r7, #24]
 8002490:	4413      	add	r3, r2
 8002492:	617b      	str	r3, [r7, #20]
	{ _M_create_nodes(__nstart, __nfinish); }
 8002494:	697a      	ldr	r2, [r7, #20]
 8002496:	69b9      	ldr	r1, [r7, #24]
 8002498:	6878      	ldr	r0, [r7, #4]
 800249a:	f000 fae4 	bl	8002a66 <_ZNSt11_Deque_baseItSaItEE15_M_create_nodesEPPtS3_>
      this->_M_impl._M_start._M_set_node(__nstart);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	3308      	adds	r3, #8
 80024a2:	69b9      	ldr	r1, [r7, #24]
 80024a4:	4618      	mov	r0, r3
 80024a6:	f000 f985 	bl	80027b4 <_ZNSt15_Deque_iteratorItRtPtE11_M_set_nodeEPS1_>
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	f103 0218 	add.w	r2, r3, #24
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	3b04      	subs	r3, #4
 80024b4:	4619      	mov	r1, r3
 80024b6:	4610      	mov	r0, r2
 80024b8:	f000 f97c 	bl	80027b4 <_ZNSt15_Deque_iteratorItRtPtE11_M_set_nodeEPS1_>
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	68da      	ldr	r2, [r3, #12]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	609a      	str	r2, [r3, #8]
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	69dc      	ldr	r4, [r3, #28]
					% __deque_buf_size(sizeof(_Tp)));
 80024c8:	2002      	movs	r0, #2
 80024ca:	f7fe fdbb 	bl	8001044 <_ZSt16__deque_buf_sizej>
 80024ce:	4602      	mov	r2, r0
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	fbb3 f1f2 	udiv	r1, r3, r2
 80024d6:	fb02 f201 	mul.w	r2, r2, r1
 80024da:	1a9b      	subs	r3, r3, r2
					+ __num_elements
 80024dc:	005b      	lsls	r3, r3, #1
 80024de:	18e2      	adds	r2, r4, r3
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	619a      	str	r2, [r3, #24]
    }
 80024e4:	bf00      	nop
 80024e6:	3724      	adds	r7, #36	; 0x24
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd90      	pop	{r4, r7, pc}

080024ec <_ZNSt11_Deque_baseItSaItEE16_M_destroy_nodesEPPtS3_>:
    _Deque_base<_Tp, _Alloc>::
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b086      	sub	sp, #24
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	60f8      	str	r0, [r7, #12]
 80024f4:	60b9      	str	r1, [r7, #8]
 80024f6:	607a      	str	r2, [r7, #4]
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	617b      	str	r3, [r7, #20]
 80024fc:	697a      	ldr	r2, [r7, #20]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	429a      	cmp	r2, r3
 8002502:	d209      	bcs.n	8002518 <_ZNSt11_Deque_baseItSaItEE16_M_destroy_nodesEPPtS3_+0x2c>
	_M_deallocate_node(*__n);
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4619      	mov	r1, r3
 800250a:	68f8      	ldr	r0, [r7, #12]
 800250c:	f000 f96b 	bl	80027e6 <_ZNSt11_Deque_baseItSaItEE18_M_deallocate_nodeEPt>
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	3304      	adds	r3, #4
 8002514:	617b      	str	r3, [r7, #20]
 8002516:	e7f1      	b.n	80024fc <_ZNSt11_Deque_baseItSaItEE16_M_destroy_nodesEPPtS3_+0x10>
    }
 8002518:	bf00      	nop
 800251a:	3718      	adds	r7, #24
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}

08002520 <_ZNSt11_Deque_baseItSaItEE17_M_deallocate_mapEPPtj>:
      _M_deallocate_map(_Map_pointer __p, size_t __n) _GLIBCXX_NOEXCEPT
 8002520:	b580      	push	{r7, lr}
 8002522:	b086      	sub	sp, #24
 8002524:	af00      	add	r7, sp, #0
 8002526:	60f8      	str	r0, [r7, #12]
 8002528:	60b9      	str	r1, [r7, #8]
 800252a:	607a      	str	r2, [r7, #4]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 800252c:	f107 0314 	add.w	r3, r7, #20
 8002530:	68f9      	ldr	r1, [r7, #12]
 8002532:	4618      	mov	r0, r3
 8002534:	f000 fab1 	bl	8002a9a <_ZNKSt11_Deque_baseItSaItEE20_M_get_map_allocatorEv>
	_Map_alloc_traits::deallocate(__map_alloc, __p, __n);
 8002538:	f107 0314 	add.w	r3, r7, #20
 800253c:	687a      	ldr	r2, [r7, #4]
 800253e:	68b9      	ldr	r1, [r7, #8]
 8002540:	4618      	mov	r0, r3
 8002542:	f000 fac7 	bl	8002ad4 <_ZNSt16allocator_traitsISaIPtEE10deallocateERS1_PS0_j>
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8002546:	f107 0314 	add.w	r3, r7, #20
 800254a:	4618      	mov	r0, r3
 800254c:	f000 fab6 	bl	8002abc <_ZNSaIPtED1Ev>
      }
 8002550:	bf00      	nop
 8002552:	3718      	adds	r7, #24
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}

08002558 <_ZNKSt15_Deque_iteratorIfRfPfEplEi>:
      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
 8002558:	b580      	push	{r7, lr}
 800255a:	b088      	sub	sp, #32
 800255c:	af00      	add	r7, sp, #0
 800255e:	60f8      	str	r0, [r7, #12]
 8002560:	60b9      	str	r1, [r7, #8]
 8002562:	607a      	str	r2, [r7, #4]
	_Self __tmp = *this;
 8002564:	f107 0310 	add.w	r3, r7, #16
 8002568:	68b9      	ldr	r1, [r7, #8]
 800256a:	4618      	mov	r0, r3
 800256c:	f7ff fc51 	bl	8001e12 <_ZNSt15_Deque_iteratorIfRfPfEC1ERKS2_>
	return __tmp += __n;
 8002570:	f107 0310 	add.w	r3, r7, #16
 8002574:	6879      	ldr	r1, [r7, #4]
 8002576:	4618      	mov	r0, r3
 8002578:	f000 fabb 	bl	8002af2 <_ZNSt15_Deque_iteratorIfRfPfEpLEi>
 800257c:	4603      	mov	r3, r0
 800257e:	4619      	mov	r1, r3
 8002580:	68f8      	ldr	r0, [r7, #12]
 8002582:	f7ff fc46 	bl	8001e12 <_ZNSt15_Deque_iteratorIfRfPfEC1ERKS2_>
      }
 8002586:	68f8      	ldr	r0, [r7, #12]
 8002588:	3720      	adds	r7, #32
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}

0800258e <_ZNKSt15_Deque_iteratorIfRfPfEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800258e:	b480      	push	{r7}
 8002590:	b083      	sub	sp, #12
 8002592:	af00      	add	r7, sp, #0
 8002594:	6078      	str	r0, [r7, #4]
      { return *_M_cur; }
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4618      	mov	r0, r3
 800259c:	370c      	adds	r7, #12
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr

080025a6 <_ZN9__gnu_cxx13new_allocatorIfE7destroyIfEEvPT_>:
	construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
	void
	destroy(_Up* __p) { __p->~_Up(); }
 80025a6:	b480      	push	{r7}
 80025a8:	b083      	sub	sp, #12
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	6078      	str	r0, [r7, #4]
 80025ae:	6039      	str	r1, [r7, #0]
 80025b0:	bf00      	nop
 80025b2:	370c      	adds	r7, #12
 80025b4:	46bd      	mov	sp, r7
 80025b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ba:	4770      	bx	lr

080025bc <_ZNSt11_Deque_baseIfSaIfEE18_M_deallocate_nodeEPf>:
      _M_deallocate_node(_Ptr __p) _GLIBCXX_NOEXCEPT
 80025bc:	b590      	push	{r4, r7, lr}
 80025be:	b083      	sub	sp, #12
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
 80025c4:	6039      	str	r1, [r7, #0]
	_Traits::deallocate(_M_impl, __p, __deque_buf_size(sizeof(_Tp)));
 80025c6:	687c      	ldr	r4, [r7, #4]
 80025c8:	2004      	movs	r0, #4
 80025ca:	f7fe fd3b 	bl	8001044 <_ZSt16__deque_buf_sizej>
 80025ce:	4603      	mov	r3, r0
 80025d0:	461a      	mov	r2, r3
 80025d2:	6839      	ldr	r1, [r7, #0]
 80025d4:	4620      	mov	r0, r4
 80025d6:	f000 fae4 	bl	8002ba2 <_ZNSt16allocator_traitsISaIfEE10deallocateERS0_Pfj>
      }
 80025da:	bf00      	nop
 80025dc:	370c      	adds	r7, #12
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd90      	pop	{r4, r7, pc}

080025e2 <_ZNSt15_Deque_iteratorIfRfPfE11_M_set_nodeEPS1_>:
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
 80025e2:	b590      	push	{r4, r7, lr}
 80025e4:	b083      	sub	sp, #12
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	6078      	str	r0, [r7, #4]
 80025ea:	6039      	str	r1, [r7, #0]
	_M_node = __new_node;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	683a      	ldr	r2, [r7, #0]
 80025f0:	60da      	str	r2, [r3, #12]
	_M_first = *__new_node;
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	605a      	str	r2, [r3, #4]
	_M_last = _M_first + difference_type(_S_buffer_size());
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	685c      	ldr	r4, [r3, #4]
 80025fe:	f000 f9e0 	bl	80029c2 <_ZNSt15_Deque_iteratorIfRfPfE14_S_buffer_sizeEv>
 8002602:	4603      	mov	r3, r0
 8002604:	009b      	lsls	r3, r3, #2
 8002606:	18e2      	adds	r2, r4, r3
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	609a      	str	r2, [r3, #8]
      }
 800260c:	bf00      	nop
 800260e:	370c      	adds	r7, #12
 8002610:	46bd      	mov	sp, r7
 8002612:	bd90      	pop	{r4, r7, pc}

08002614 <_ZN9__gnu_cxx13new_allocatorIfE9constructIfJRKfEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8002614:	b590      	push	{r4, r7, lr}
 8002616:	b085      	sub	sp, #20
 8002618:	af00      	add	r7, sp, #0
 800261a:	60f8      	str	r0, [r7, #12]
 800261c:	60b9      	str	r1, [r7, #8]
 800261e:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8002620:	6878      	ldr	r0, [r7, #4]
 8002622:	f7ff fcfb 	bl	800201c <_ZSt7forwardIRKfEOT_RNSt16remove_referenceIS2_E4typeE>
 8002626:	4603      	mov	r3, r0
 8002628:	681c      	ldr	r4, [r3, #0]
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	4619      	mov	r1, r3
 800262e:	2004      	movs	r0, #4
 8002630:	f7fe fcec 	bl	800100c <_ZnwjPv>
 8002634:	4603      	mov	r3, r0
 8002636:	2b00      	cmp	r3, #0
 8002638:	d000      	beq.n	800263c <_ZN9__gnu_cxx13new_allocatorIfE9constructIfJRKfEEEvPT_DpOT0_+0x28>
 800263a:	601c      	str	r4, [r3, #0]
 800263c:	bf00      	nop
 800263e:	3714      	adds	r7, #20
 8002640:	46bd      	mov	sp, r7
 8002642:	bd90      	pop	{r4, r7, pc}

08002644 <_ZNSt5dequeIfSaIfEE22_M_reserve_map_at_backEj>:
       *  Makes sure the _M_map has space for new nodes.  Does not
       *  actually add the nodes.  Can invalidate _M_map pointers.
       *  (And consequently, %deque iterators.)
       */
      void
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
 8002644:	b580      	push	{r7, lr}
 8002646:	b082      	sub	sp, #8
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
 800264c:	6039      	str	r1, [r7, #0]
      {
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	1c5a      	adds	r2, r3, #1
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	685b      	ldr	r3, [r3, #4]
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
 8002656:	6879      	ldr	r1, [r7, #4]
 8002658:	6a49      	ldr	r1, [r1, #36]	; 0x24
 800265a:	4608      	mov	r0, r1
 800265c:	6879      	ldr	r1, [r7, #4]
 800265e:	6809      	ldr	r1, [r1, #0]
 8002660:	1a41      	subs	r1, r0, r1
 8002662:	1089      	asrs	r1, r1, #2
 8002664:	1a5b      	subs	r3, r3, r1
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 8002666:	429a      	cmp	r2, r3
 8002668:	d904      	bls.n	8002674 <_ZNSt5dequeIfSaIfEE22_M_reserve_map_at_backEj+0x30>
	  _M_reallocate_map(__nodes_to_add, false);
 800266a:	2200      	movs	r2, #0
 800266c:	6839      	ldr	r1, [r7, #0]
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f000 faa6 	bl	8002bc0 <_ZNSt5dequeIfSaIfEE17_M_reallocate_mapEjb>
      }
 8002674:	bf00      	nop
 8002676:	3708      	adds	r7, #8
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}

0800267c <_ZNSt11_Deque_baseIfSaIfEE16_M_allocate_nodeEv>:
      _M_allocate_node()
 800267c:	b590      	push	{r4, r7, lr}
 800267e:	b083      	sub	sp, #12
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
	return _Traits::allocate(_M_impl, __deque_buf_size(sizeof(_Tp)));
 8002684:	687c      	ldr	r4, [r7, #4]
 8002686:	2004      	movs	r0, #4
 8002688:	f7fe fcdc 	bl	8001044 <_ZSt16__deque_buf_sizej>
 800268c:	4603      	mov	r3, r0
 800268e:	4619      	mov	r1, r3
 8002690:	4620      	mov	r0, r4
 8002692:	f000 fb30 	bl	8002cf6 <_ZNSt16allocator_traitsISaIfEE8allocateERS0_j>
 8002696:	4603      	mov	r3, r0
      }
 8002698:	4618      	mov	r0, r3
 800269a:	370c      	adds	r7, #12
 800269c:	46bd      	mov	sp, r7
 800269e:	bd90      	pop	{r4, r7, pc}

080026a0 <_ZNSt16allocator_traitsISaIfEE9constructIfJfEEEvRS0_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b084      	sub	sp, #16
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	60f8      	str	r0, [r7, #12]
 80026a8:	60b9      	str	r1, [r7, #8]
 80026aa:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 80026ac:	6878      	ldr	r0, [r7, #4]
 80026ae:	f7ff fd03 	bl	80020b8 <_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE>
 80026b2:	4603      	mov	r3, r0
 80026b4:	461a      	mov	r2, r3
 80026b6:	68b9      	ldr	r1, [r7, #8]
 80026b8:	68f8      	ldr	r0, [r7, #12]
 80026ba:	f000 fb2b 	bl	8002d14 <_ZN9__gnu_cxx13new_allocatorIfE9constructIfJfEEEvPT_DpOT0_>
 80026be:	bf00      	nop
 80026c0:	3710      	adds	r7, #16
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}

080026c6 <_ZNSt5dequeIfSaIfEE16_M_push_back_auxIJfEEEvDpOT_>:
      deque<_Tp, _Alloc>::
 80026c6:	b5b0      	push	{r4, r5, r7, lr}
 80026c8:	b082      	sub	sp, #8
 80026ca:	af00      	add	r7, sp, #0
 80026cc:	6078      	str	r0, [r7, #4]
 80026ce:	6039      	str	r1, [r7, #0]
	_M_reserve_map_at_back();
 80026d0:	2101      	movs	r1, #1
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f7ff ffb6 	bl	8002644 <_ZNSt5dequeIfSaIfEE22_M_reserve_map_at_backEj>
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
 80026d8:	687a      	ldr	r2, [r7, #4]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026de:	1d1c      	adds	r4, r3, #4
 80026e0:	4610      	mov	r0, r2
 80026e2:	f7ff ffcb 	bl	800267c <_ZNSt11_Deque_baseIfSaIfEE16_M_allocate_nodeEv>
 80026e6:	4603      	mov	r3, r0
 80026e8:	6023      	str	r3, [r4, #0]
	    _Alloc_traits::construct(this->_M_impl,
 80026ea:	687c      	ldr	r4, [r7, #4]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	699d      	ldr	r5, [r3, #24]
 80026f0:	6838      	ldr	r0, [r7, #0]
 80026f2:	f7ff fce1 	bl	80020b8 <_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE>
 80026f6:	4603      	mov	r3, r0
 80026f8:	461a      	mov	r2, r3
 80026fa:	4629      	mov	r1, r5
 80026fc:	4620      	mov	r0, r4
 80026fe:	f7ff ffcf 	bl	80026a0 <_ZNSt16allocator_traitsISaIfEE9constructIfJfEEEvRS0_PT_DpOT0_>
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	f103 0218 	add.w	r2, r3, #24
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800270c:	3304      	adds	r3, #4
 800270e:	4619      	mov	r1, r3
 8002710:	4610      	mov	r0, r2
 8002712:	f7ff ff66 	bl	80025e2 <_ZNSt15_Deque_iteratorIfRfPfE11_M_set_nodeEPS1_>
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	69da      	ldr	r2, [r3, #28]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	619a      	str	r2, [r3, #24]
      }
 800271e:	bf00      	nop
 8002720:	3708      	adds	r7, #8
 8002722:	46bd      	mov	sp, r7
 8002724:	bdb0      	pop	{r4, r5, r7, pc}

08002726 <_ZN9__gnu_cxx13new_allocatorItE9constructItJRKtEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8002726:	b590      	push	{r4, r7, lr}
 8002728:	b085      	sub	sp, #20
 800272a:	af00      	add	r7, sp, #0
 800272c:	60f8      	str	r0, [r7, #12]
 800272e:	60b9      	str	r1, [r7, #8]
 8002730:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	f7ff fcf5 	bl	8002122 <_ZSt7forwardIRKtEOT_RNSt16remove_referenceIS2_E4typeE>
 8002738:	4603      	mov	r3, r0
 800273a:	881c      	ldrh	r4, [r3, #0]
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	4619      	mov	r1, r3
 8002740:	2002      	movs	r0, #2
 8002742:	f7fe fc63 	bl	800100c <_ZnwjPv>
 8002746:	4603      	mov	r3, r0
 8002748:	2b00      	cmp	r3, #0
 800274a:	d001      	beq.n	8002750 <_ZN9__gnu_cxx13new_allocatorItE9constructItJRKtEEEvPT_DpOT0_+0x2a>
 800274c:	4622      	mov	r2, r4
 800274e:	801a      	strh	r2, [r3, #0]
 8002750:	bf00      	nop
 8002752:	3714      	adds	r7, #20
 8002754:	46bd      	mov	sp, r7
 8002756:	bd90      	pop	{r4, r7, pc}

08002758 <_ZNSt5dequeItSaItEE22_M_reserve_map_at_backEj>:
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
 8002758:	b580      	push	{r7, lr}
 800275a:	b082      	sub	sp, #8
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
 8002760:	6039      	str	r1, [r7, #0]
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	1c5a      	adds	r2, r3, #1
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	685b      	ldr	r3, [r3, #4]
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
 800276a:	6879      	ldr	r1, [r7, #4]
 800276c:	6a49      	ldr	r1, [r1, #36]	; 0x24
 800276e:	4608      	mov	r0, r1
 8002770:	6879      	ldr	r1, [r7, #4]
 8002772:	6809      	ldr	r1, [r1, #0]
 8002774:	1a41      	subs	r1, r0, r1
 8002776:	1089      	asrs	r1, r1, #2
 8002778:	1a5b      	subs	r3, r3, r1
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 800277a:	429a      	cmp	r2, r3
 800277c:	d904      	bls.n	8002788 <_ZNSt5dequeItSaItEE22_M_reserve_map_at_backEj+0x30>
	  _M_reallocate_map(__nodes_to_add, false);
 800277e:	2200      	movs	r2, #0
 8002780:	6839      	ldr	r1, [r7, #0]
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	f000 fade 	bl	8002d44 <_ZNSt5dequeItSaItEE17_M_reallocate_mapEjb>
      }
 8002788:	bf00      	nop
 800278a:	3708      	adds	r7, #8
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}

08002790 <_ZNSt11_Deque_baseItSaItEE16_M_allocate_nodeEv>:
      _M_allocate_node()
 8002790:	b590      	push	{r4, r7, lr}
 8002792:	b083      	sub	sp, #12
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
	return _Traits::allocate(_M_impl, __deque_buf_size(sizeof(_Tp)));
 8002798:	687c      	ldr	r4, [r7, #4]
 800279a:	2002      	movs	r0, #2
 800279c:	f7fe fc52 	bl	8001044 <_ZSt16__deque_buf_sizej>
 80027a0:	4603      	mov	r3, r0
 80027a2:	4619      	mov	r1, r3
 80027a4:	4620      	mov	r0, r4
 80027a6:	f000 fb68 	bl	8002e7a <_ZNSt16allocator_traitsISaItEE8allocateERS0_j>
 80027aa:	4603      	mov	r3, r0
      }
 80027ac:	4618      	mov	r0, r3
 80027ae:	370c      	adds	r7, #12
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd90      	pop	{r4, r7, pc}

080027b4 <_ZNSt15_Deque_iteratorItRtPtE11_M_set_nodeEPS1_>:
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
 80027b4:	b590      	push	{r4, r7, lr}
 80027b6:	b083      	sub	sp, #12
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
 80027bc:	6039      	str	r1, [r7, #0]
	_M_node = __new_node;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	683a      	ldr	r2, [r7, #0]
 80027c2:	60da      	str	r2, [r3, #12]
	_M_first = *__new_node;
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	605a      	str	r2, [r3, #4]
	_M_last = _M_first + difference_type(_S_buffer_size());
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	685c      	ldr	r4, [r3, #4]
 80027d0:	f000 f81c 	bl	800280c <_ZNSt15_Deque_iteratorItRtPtE14_S_buffer_sizeEv>
 80027d4:	4603      	mov	r3, r0
 80027d6:	005b      	lsls	r3, r3, #1
 80027d8:	18e2      	adds	r2, r4, r3
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	609a      	str	r2, [r3, #8]
      }
 80027de:	bf00      	nop
 80027e0:	370c      	adds	r7, #12
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd90      	pop	{r4, r7, pc}

080027e6 <_ZNSt11_Deque_baseItSaItEE18_M_deallocate_nodeEPt>:
      _M_deallocate_node(_Ptr __p) _GLIBCXX_NOEXCEPT
 80027e6:	b590      	push	{r4, r7, lr}
 80027e8:	b083      	sub	sp, #12
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	6078      	str	r0, [r7, #4]
 80027ee:	6039      	str	r1, [r7, #0]
	_Traits::deallocate(_M_impl, __p, __deque_buf_size(sizeof(_Tp)));
 80027f0:	687c      	ldr	r4, [r7, #4]
 80027f2:	2002      	movs	r0, #2
 80027f4:	f7fe fc26 	bl	8001044 <_ZSt16__deque_buf_sizej>
 80027f8:	4603      	mov	r3, r0
 80027fa:	461a      	mov	r2, r3
 80027fc:	6839      	ldr	r1, [r7, #0]
 80027fe:	4620      	mov	r0, r4
 8002800:	f000 fb4a 	bl	8002e98 <_ZNSt16allocator_traitsISaItEE10deallocateERS0_Ptj>
      }
 8002804:	bf00      	nop
 8002806:	370c      	adds	r7, #12
 8002808:	46bd      	mov	sp, r7
 800280a:	bd90      	pop	{r4, r7, pc}

0800280c <_ZNSt15_Deque_iteratorItRtPtE14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 800280c:	b580      	push	{r7, lr}
 800280e:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 8002810:	2002      	movs	r0, #2
 8002812:	f7fe fc17 	bl	8001044 <_ZSt16__deque_buf_sizej>
 8002816:	4603      	mov	r3, r0
 8002818:	4618      	mov	r0, r3
 800281a:	bd80      	pop	{r7, pc}

0800281c <_ZNKSt15_Deque_iteratorItRtPtEplEi>:
      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
 800281c:	b580      	push	{r7, lr}
 800281e:	b088      	sub	sp, #32
 8002820:	af00      	add	r7, sp, #0
 8002822:	60f8      	str	r0, [r7, #12]
 8002824:	60b9      	str	r1, [r7, #8]
 8002826:	607a      	str	r2, [r7, #4]
	_Self __tmp = *this;
 8002828:	f107 0310 	add.w	r3, r7, #16
 800282c:	68b9      	ldr	r1, [r7, #8]
 800282e:	4618      	mov	r0, r3
 8002830:	f7ff fb80 	bl	8001f34 <_ZNSt15_Deque_iteratorItRtPtEC1ERKS2_>
	return __tmp += __n;
 8002834:	f107 0310 	add.w	r3, r7, #16
 8002838:	6879      	ldr	r1, [r7, #4]
 800283a:	4618      	mov	r0, r3
 800283c:	f000 fb3b 	bl	8002eb6 <_ZNSt15_Deque_iteratorItRtPtEpLEi>
 8002840:	4603      	mov	r3, r0
 8002842:	4619      	mov	r1, r3
 8002844:	68f8      	ldr	r0, [r7, #12]
 8002846:	f7ff fb75 	bl	8001f34 <_ZNSt15_Deque_iteratorItRtPtEC1ERKS2_>
      }
 800284a:	68f8      	ldr	r0, [r7, #12]
 800284c:	3720      	adds	r7, #32
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}

08002852 <_ZNKSt15_Deque_iteratorItRtPtEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8002852:	b480      	push	{r7}
 8002854:	b083      	sub	sp, #12
 8002856:	af00      	add	r7, sp, #0
 8002858:	6078      	str	r0, [r7, #4]
      { return *_M_cur; }
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4618      	mov	r0, r3
 8002860:	370c      	adds	r7, #12
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr

0800286a <_ZNSaIfEC1ERKS_>:
      allocator(const allocator& __a) throw()
 800286a:	b580      	push	{r7, lr}
 800286c:	b082      	sub	sp, #8
 800286e:	af00      	add	r7, sp, #0
 8002870:	6078      	str	r0, [r7, #4]
 8002872:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8002874:	6839      	ldr	r1, [r7, #0]
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	f000 fb75 	bl	8002f66 <_ZN9__gnu_cxx13new_allocatorIfEC1ERKS1_>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	4618      	mov	r0, r3
 8002880:	3708      	adds	r7, #8
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}

08002886 <_ZNSt15_Deque_iteratorIfRfPfEC1Ev>:
      _Deque_iterator() _GLIBCXX_NOEXCEPT
 8002886:	b480      	push	{r7}
 8002888:	b083      	sub	sp, #12
 800288a:	af00      	add	r7, sp, #0
 800288c:	6078      	str	r0, [r7, #4]
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2200      	movs	r2, #0
 8002892:	601a      	str	r2, [r3, #0]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2200      	movs	r2, #0
 8002898:	605a      	str	r2, [r3, #4]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2200      	movs	r2, #0
 800289e:	609a      	str	r2, [r3, #8]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2200      	movs	r2, #0
 80028a4:	60da      	str	r2, [r3, #12]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	4618      	mov	r0, r3
 80028aa:	370c      	adds	r7, #12
 80028ac:	46bd      	mov	sp, r7
 80028ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b2:	4770      	bx	lr

080028b4 <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 80028b4:	b480      	push	{r7}
 80028b6:	b083      	sub	sp, #12
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
 80028bc:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	429a      	cmp	r2, r3
 80028c8:	d201      	bcs.n	80028ce <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	e000      	b.n	80028d0 <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 80028ce:	687b      	ldr	r3, [r7, #4]
    }
 80028d0:	4618      	mov	r0, r3
 80028d2:	370c      	adds	r7, #12
 80028d4:	46bd      	mov	sp, r7
 80028d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028da:	4770      	bx	lr

080028dc <_ZNSt11_Deque_baseIfSaIfEE15_M_allocate_mapEj>:
      _M_allocate_map(size_t __n)
 80028dc:	b590      	push	{r4, r7, lr}
 80028de:	b085      	sub	sp, #20
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
 80028e4:	6039      	str	r1, [r7, #0]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 80028e6:	f107 030c 	add.w	r3, r7, #12
 80028ea:	6879      	ldr	r1, [r7, #4]
 80028ec:	4618      	mov	r0, r3
 80028ee:	f000 f82b 	bl	8002948 <_ZNKSt11_Deque_baseIfSaIfEE20_M_get_map_allocatorEv>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 80028f2:	f107 030c 	add.w	r3, r7, #12
 80028f6:	6839      	ldr	r1, [r7, #0]
 80028f8:	4618      	mov	r0, r3
 80028fa:	f000 fb40 	bl	8002f7e <_ZNSt16allocator_traitsISaIPfEE8allocateERS1_j>
 80028fe:	4604      	mov	r4, r0
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8002900:	f107 030c 	add.w	r3, r7, #12
 8002904:	4618      	mov	r0, r3
 8002906:	f000 f830 	bl	800296a <_ZNSaIPfED1Ev>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 800290a:	4623      	mov	r3, r4
      }
 800290c:	4618      	mov	r0, r3
 800290e:	3714      	adds	r7, #20
 8002910:	46bd      	mov	sp, r7
 8002912:	bd90      	pop	{r4, r7, pc}

08002914 <_ZNSt11_Deque_baseIfSaIfEE15_M_create_nodesEPPfS3_>:
    _Deque_base<_Tp, _Alloc>::
 8002914:	b580      	push	{r7, lr}
 8002916:	b086      	sub	sp, #24
 8002918:	af00      	add	r7, sp, #0
 800291a:	60f8      	str	r0, [r7, #12]
 800291c:	60b9      	str	r1, [r7, #8]
 800291e:	607a      	str	r2, [r7, #4]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	617b      	str	r3, [r7, #20]
 8002924:	697a      	ldr	r2, [r7, #20]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	429a      	cmp	r2, r3
 800292a:	d209      	bcs.n	8002940 <_ZNSt11_Deque_baseIfSaIfEE15_M_create_nodesEPPfS3_+0x2c>
	    *__cur = this->_M_allocate_node();
 800292c:	68f8      	ldr	r0, [r7, #12]
 800292e:	f7ff fea5 	bl	800267c <_ZNSt11_Deque_baseIfSaIfEE16_M_allocate_nodeEv>
 8002932:	4602      	mov	r2, r0
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	601a      	str	r2, [r3, #0]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	3304      	adds	r3, #4
 800293c:	617b      	str	r3, [r7, #20]
 800293e:	e7f1      	b.n	8002924 <_ZNSt11_Deque_baseIfSaIfEE15_M_create_nodesEPPfS3_+0x10>
    }
 8002940:	bf00      	nop
 8002942:	3718      	adds	r7, #24
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}

08002948 <_ZNKSt11_Deque_baseIfSaIfEE20_M_get_map_allocatorEv>:
      _M_get_map_allocator() const _GLIBCXX_NOEXCEPT
 8002948:	b580      	push	{r7, lr}
 800294a:	b082      	sub	sp, #8
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
 8002950:	6039      	str	r1, [r7, #0]
      { return _Map_alloc_type(_M_get_Tp_allocator()); }
 8002952:	6838      	ldr	r0, [r7, #0]
 8002954:	f000 fb22 	bl	8002f9c <_ZNKSt11_Deque_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8002958:	4603      	mov	r3, r0
 800295a:	4619      	mov	r1, r3
 800295c:	6878      	ldr	r0, [r7, #4]
 800295e:	f000 fb28 	bl	8002fb2 <_ZNSaIPfEC1IfEERKSaIT_E>
 8002962:	6878      	ldr	r0, [r7, #4]
 8002964:	3708      	adds	r7, #8
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}

0800296a <_ZNSaIPfED1Ev>:
      ~allocator() throw() { }
 800296a:	b580      	push	{r7, lr}
 800296c:	b082      	sub	sp, #8
 800296e:	af00      	add	r7, sp, #0
 8002970:	6078      	str	r0, [r7, #4]
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	f000 fb2a 	bl	8002fcc <_ZN9__gnu_cxx13new_allocatorIPfED1Ev>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	4618      	mov	r0, r3
 800297c:	3708      	adds	r7, #8
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}

08002982 <_ZNSt16allocator_traitsISaIPfEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8002982:	b580      	push	{r7, lr}
 8002984:	b084      	sub	sp, #16
 8002986:	af00      	add	r7, sp, #0
 8002988:	60f8      	str	r0, [r7, #12]
 800298a:	60b9      	str	r1, [r7, #8]
 800298c:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800298e:	687a      	ldr	r2, [r7, #4]
 8002990:	68b9      	ldr	r1, [r7, #8]
 8002992:	68f8      	ldr	r0, [r7, #12]
 8002994:	f000 fb25 	bl	8002fe2 <_ZN9__gnu_cxx13new_allocatorIPfE10deallocateEPS1_j>
 8002998:	bf00      	nop
 800299a:	3710      	adds	r7, #16
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}

080029a0 <_ZSt18uninitialized_fillIPffEvT_S1_RKT0_>:
    uninitialized_fill(_ForwardIterator __first, _ForwardIterator __last,
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b086      	sub	sp, #24
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	60f8      	str	r0, [r7, #12]
 80029a8:	60b9      	str	r1, [r7, #8]
 80029aa:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_copy_assignable<_ValueType>::value;
 80029ac:	2301      	movs	r3, #1
 80029ae:	75fb      	strb	r3, [r7, #23]
	__uninit_fill(__first, __last, __x);
 80029b0:	687a      	ldr	r2, [r7, #4]
 80029b2:	68b9      	ldr	r1, [r7, #8]
 80029b4:	68f8      	ldr	r0, [r7, #12]
 80029b6:	f000 fb21 	bl	8002ffc <_ZNSt20__uninitialized_fillILb1EE13__uninit_fillIPffEEvT_S3_RKT0_>
    }
 80029ba:	bf00      	nop
 80029bc:	3718      	adds	r7, #24
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}

080029c2 <_ZNSt15_Deque_iteratorIfRfPfE14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 80029c2:	b580      	push	{r7, lr}
 80029c4:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 80029c6:	2004      	movs	r0, #4
 80029c8:	f7fe fb3c 	bl	8001044 <_ZSt16__deque_buf_sizej>
 80029cc:	4603      	mov	r3, r0
 80029ce:	4618      	mov	r0, r3
 80029d0:	bd80      	pop	{r7, pc}

080029d2 <_ZNSaItEC1Ev>:
      allocator() throw() { }
 80029d2:	b580      	push	{r7, lr}
 80029d4:	b082      	sub	sp, #8
 80029d6:	af00      	add	r7, sp, #0
 80029d8:	6078      	str	r0, [r7, #4]
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	f000 fb1d 	bl	800301a <_ZN9__gnu_cxx13new_allocatorItEC1Ev>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	4618      	mov	r0, r3
 80029e4:	3708      	adds	r7, #8
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}

080029ea <_ZNSt15_Deque_iteratorItRtPtEC1Ev>:
      _Deque_iterator() _GLIBCXX_NOEXCEPT
 80029ea:	b480      	push	{r7}
 80029ec:	b083      	sub	sp, #12
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	6078      	str	r0, [r7, #4]
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2200      	movs	r2, #0
 80029f6:	601a      	str	r2, [r3, #0]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2200      	movs	r2, #0
 80029fc:	605a      	str	r2, [r3, #4]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2200      	movs	r2, #0
 8002a02:	609a      	str	r2, [r3, #8]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2200      	movs	r2, #0
 8002a08:	60da      	str	r2, [r3, #12]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	370c      	adds	r7, #12
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr

08002a18 <_ZN9__gnu_cxx13new_allocatorItED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8002a18:	b480      	push	{r7}
 8002a1a:	b083      	sub	sp, #12
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	4618      	mov	r0, r3
 8002a24:	370c      	adds	r7, #12
 8002a26:	46bd      	mov	sp, r7
 8002a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2c:	4770      	bx	lr

08002a2e <_ZNSt11_Deque_baseItSaItEE15_M_allocate_mapEj>:
      _M_allocate_map(size_t __n)
 8002a2e:	b590      	push	{r4, r7, lr}
 8002a30:	b085      	sub	sp, #20
 8002a32:	af00      	add	r7, sp, #0
 8002a34:	6078      	str	r0, [r7, #4]
 8002a36:	6039      	str	r1, [r7, #0]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8002a38:	f107 030c 	add.w	r3, r7, #12
 8002a3c:	6879      	ldr	r1, [r7, #4]
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f000 f82b 	bl	8002a9a <_ZNKSt11_Deque_baseItSaItEE20_M_get_map_allocatorEv>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 8002a44:	f107 030c 	add.w	r3, r7, #12
 8002a48:	6839      	ldr	r1, [r7, #0]
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f000 faf0 	bl	8003030 <_ZNSt16allocator_traitsISaIPtEE8allocateERS1_j>
 8002a50:	4604      	mov	r4, r0
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8002a52:	f107 030c 	add.w	r3, r7, #12
 8002a56:	4618      	mov	r0, r3
 8002a58:	f000 f830 	bl	8002abc <_ZNSaIPtED1Ev>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 8002a5c:	4623      	mov	r3, r4
      }
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3714      	adds	r7, #20
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd90      	pop	{r4, r7, pc}

08002a66 <_ZNSt11_Deque_baseItSaItEE15_M_create_nodesEPPtS3_>:
    _Deque_base<_Tp, _Alloc>::
 8002a66:	b580      	push	{r7, lr}
 8002a68:	b086      	sub	sp, #24
 8002a6a:	af00      	add	r7, sp, #0
 8002a6c:	60f8      	str	r0, [r7, #12]
 8002a6e:	60b9      	str	r1, [r7, #8]
 8002a70:	607a      	str	r2, [r7, #4]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	617b      	str	r3, [r7, #20]
 8002a76:	697a      	ldr	r2, [r7, #20]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	d209      	bcs.n	8002a92 <_ZNSt11_Deque_baseItSaItEE15_M_create_nodesEPPtS3_+0x2c>
	    *__cur = this->_M_allocate_node();
 8002a7e:	68f8      	ldr	r0, [r7, #12]
 8002a80:	f7ff fe86 	bl	8002790 <_ZNSt11_Deque_baseItSaItEE16_M_allocate_nodeEv>
 8002a84:	4602      	mov	r2, r0
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	601a      	str	r2, [r3, #0]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	3304      	adds	r3, #4
 8002a8e:	617b      	str	r3, [r7, #20]
 8002a90:	e7f1      	b.n	8002a76 <_ZNSt11_Deque_baseItSaItEE15_M_create_nodesEPPtS3_+0x10>
    }
 8002a92:	bf00      	nop
 8002a94:	3718      	adds	r7, #24
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}

08002a9a <_ZNKSt11_Deque_baseItSaItEE20_M_get_map_allocatorEv>:
      _M_get_map_allocator() const _GLIBCXX_NOEXCEPT
 8002a9a:	b580      	push	{r7, lr}
 8002a9c:	b082      	sub	sp, #8
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	6078      	str	r0, [r7, #4]
 8002aa2:	6039      	str	r1, [r7, #0]
      { return _Map_alloc_type(_M_get_Tp_allocator()); }
 8002aa4:	6838      	ldr	r0, [r7, #0]
 8002aa6:	f000 fad2 	bl	800304e <_ZNKSt11_Deque_baseItSaItEE19_M_get_Tp_allocatorEv>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	4619      	mov	r1, r3
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f000 fad8 	bl	8003064 <_ZNSaIPtEC1ItEERKSaIT_E>
 8002ab4:	6878      	ldr	r0, [r7, #4]
 8002ab6:	3708      	adds	r7, #8
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}

08002abc <_ZNSaIPtED1Ev>:
      ~allocator() throw() { }
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b082      	sub	sp, #8
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
 8002ac4:	6878      	ldr	r0, [r7, #4]
 8002ac6:	f000 fada 	bl	800307e <_ZN9__gnu_cxx13new_allocatorIPtED1Ev>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	4618      	mov	r0, r3
 8002ace:	3708      	adds	r7, #8
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}

08002ad4 <_ZNSt16allocator_traitsISaIPtEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b084      	sub	sp, #16
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	60f8      	str	r0, [r7, #12]
 8002adc:	60b9      	str	r1, [r7, #8]
 8002ade:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8002ae0:	687a      	ldr	r2, [r7, #4]
 8002ae2:	68b9      	ldr	r1, [r7, #8]
 8002ae4:	68f8      	ldr	r0, [r7, #12]
 8002ae6:	f000 fad5 	bl	8003094 <_ZN9__gnu_cxx13new_allocatorIPtE10deallocateEPS1_j>
 8002aea:	bf00      	nop
 8002aec:	3710      	adds	r7, #16
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}

08002af2 <_ZNSt15_Deque_iteratorIfRfPfEpLEi>:
      operator+=(difference_type __n) _GLIBCXX_NOEXCEPT
 8002af2:	b590      	push	{r4, r7, lr}
 8002af4:	b085      	sub	sp, #20
 8002af6:	af00      	add	r7, sp, #0
 8002af8:	6078      	str	r0, [r7, #4]
 8002afa:	6039      	str	r1, [r7, #0]
	const difference_type __offset = __n + (_M_cur - _M_first);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	461a      	mov	r2, r3
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	1ad3      	subs	r3, r2, r3
 8002b08:	109b      	asrs	r3, r3, #2
 8002b0a:	461a      	mov	r2, r3
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	4413      	add	r3, r2
 8002b10:	60fb      	str	r3, [r7, #12]
	if (__offset >= 0 && __offset < difference_type(_S_buffer_size()))
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	db08      	blt.n	8002b2a <_ZNSt15_Deque_iteratorIfRfPfEpLEi+0x38>
 8002b18:	f7ff ff53 	bl	80029c2 <_ZNSt15_Deque_iteratorIfRfPfE14_S_buffer_sizeEv>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	461a      	mov	r2, r3
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	4293      	cmp	r3, r2
 8002b24:	da01      	bge.n	8002b2a <_ZNSt15_Deque_iteratorIfRfPfEpLEi+0x38>
 8002b26:	2301      	movs	r3, #1
 8002b28:	e000      	b.n	8002b2c <_ZNSt15_Deque_iteratorIfRfPfEpLEi+0x3a>
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d007      	beq.n	8002b40 <_ZNSt15_Deque_iteratorIfRfPfEpLEi+0x4e>
	  _M_cur += __n;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	009b      	lsls	r3, r3, #2
 8002b38:	441a      	add	r2, r3
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	601a      	str	r2, [r3, #0]
 8002b3e:	e02b      	b.n	8002b98 <_ZNSt15_Deque_iteratorIfRfPfEpLEi+0xa6>
	    const difference_type __node_offset =
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	dd07      	ble.n	8002b56 <_ZNSt15_Deque_iteratorIfRfPfEpLEi+0x64>
	      __offset > 0 ? __offset / difference_type(_S_buffer_size())
 8002b46:	f7ff ff3c 	bl	80029c2 <_ZNSt15_Deque_iteratorIfRfPfE14_S_buffer_sizeEv>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	461a      	mov	r2, r3
	    const difference_type __node_offset =
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	fb93 f3f2 	sdiv	r3, r3, r2
 8002b54:	e007      	b.n	8002b66 <_ZNSt15_Deque_iteratorIfRfPfEpLEi+0x74>
			   : -difference_type((-__offset - 1)
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	43dc      	mvns	r4, r3
					      / _S_buffer_size()) - 1;
 8002b5a:	f7ff ff32 	bl	80029c2 <_ZNSt15_Deque_iteratorIfRfPfE14_S_buffer_sizeEv>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	fbb4 f3f3 	udiv	r3, r4, r3
	    const difference_type __node_offset =
 8002b64:	43db      	mvns	r3, r3
 8002b66:	60bb      	str	r3, [r7, #8]
	    _M_set_node(_M_node + __node_offset);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	68da      	ldr	r2, [r3, #12]
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	4413      	add	r3, r2
 8002b72:	4619      	mov	r1, r3
 8002b74:	6878      	ldr	r0, [r7, #4]
 8002b76:	f7ff fd34 	bl	80025e2 <_ZNSt15_Deque_iteratorIfRfPfE11_M_set_nodeEPS1_>
	    _M_cur = _M_first + (__offset - __node_offset
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	685c      	ldr	r4, [r3, #4]
				 * difference_type(_S_buffer_size()));
 8002b7e:	f7ff ff20 	bl	80029c2 <_ZNSt15_Deque_iteratorIfRfPfE14_S_buffer_sizeEv>
 8002b82:	4603      	mov	r3, r0
 8002b84:	461a      	mov	r2, r3
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	fb03 f302 	mul.w	r3, r3, r2
	    _M_cur = _M_first + (__offset - __node_offset
 8002b8c:	68fa      	ldr	r2, [r7, #12]
 8002b8e:	1ad3      	subs	r3, r2, r3
 8002b90:	009b      	lsls	r3, r3, #2
 8002b92:	18e2      	adds	r2, r4, r3
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	601a      	str	r2, [r3, #0]
	return *this;
 8002b98:	687b      	ldr	r3, [r7, #4]
      }
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	3714      	adds	r7, #20
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd90      	pop	{r4, r7, pc}

08002ba2 <_ZNSt16allocator_traitsISaIfEE10deallocateERS0_Pfj>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8002ba2:	b580      	push	{r7, lr}
 8002ba4:	b084      	sub	sp, #16
 8002ba6:	af00      	add	r7, sp, #0
 8002ba8:	60f8      	str	r0, [r7, #12]
 8002baa:	60b9      	str	r1, [r7, #8]
 8002bac:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8002bae:	687a      	ldr	r2, [r7, #4]
 8002bb0:	68b9      	ldr	r1, [r7, #8]
 8002bb2:	68f8      	ldr	r0, [r7, #12]
 8002bb4:	f000 fa7b 	bl	80030ae <_ZN9__gnu_cxx13new_allocatorIfE10deallocateEPfj>
 8002bb8:	bf00      	nop
 8002bba:	3710      	adds	r7, #16
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}

08002bc0 <_ZNSt5dequeIfSaIfEE17_M_reallocate_mapEjb>:
        }
    }

  template <typename _Tp, typename _Alloc>
    void
    deque<_Tp, _Alloc>::
 8002bc0:	b590      	push	{r4, r7, lr}
 8002bc2:	b08b      	sub	sp, #44	; 0x2c
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	60f8      	str	r0, [r7, #12]
 8002bc8:	60b9      	str	r1, [r7, #8]
 8002bca:	4613      	mov	r3, r2
 8002bcc:	71fb      	strb	r3, [r7, #7]
    _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front)
    {
      const size_type __old_num_nodes
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd2:	461a      	mov	r2, r3
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	695b      	ldr	r3, [r3, #20]
 8002bd8:	1ad3      	subs	r3, r2, r3
 8002bda:	109b      	asrs	r3, r3, #2
 8002bdc:	3301      	adds	r3, #1
      const size_type __old_num_nodes
 8002bde:	623b      	str	r3, [r7, #32]
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	6a3a      	ldr	r2, [r7, #32]
 8002be4:	4413      	add	r3, r2
 8002be6:	61fb      	str	r3, [r7, #28]

      _Map_pointer __new_nstart;
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	685a      	ldr	r2, [r3, #4]
 8002bec:	69fb      	ldr	r3, [r7, #28]
 8002bee:	005b      	lsls	r3, r3, #1
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d92d      	bls.n	8002c50 <_ZNSt5dequeIfSaIfEE17_M_reallocate_mapEjb+0x90>
	{
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	6859      	ldr	r1, [r3, #4]
					 - __new_num_nodes) / 2
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	1acb      	subs	r3, r1, r3
 8002c00:	085b      	lsrs	r3, r3, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8002c02:	0099      	lsls	r1, r3, #2
	                 + (__add_at_front ? __nodes_to_add : 0);
 8002c04:	79fb      	ldrb	r3, [r7, #7]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d002      	beq.n	8002c10 <_ZNSt5dequeIfSaIfEE17_M_reallocate_mapEjb+0x50>
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	009b      	lsls	r3, r3, #2
 8002c0e:	e000      	b.n	8002c12 <_ZNSt5dequeIfSaIfEE17_M_reallocate_mapEjb+0x52>
 8002c10:	2300      	movs	r3, #0
 8002c12:	440b      	add	r3, r1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8002c14:	4413      	add	r3, r2
 8002c16:	627b      	str	r3, [r7, #36]	; 0x24
	  if (__new_nstart < this->_M_impl._M_start._M_node)
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	695b      	ldr	r3, [r3, #20]
 8002c1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c1e:	429a      	cmp	r2, r3
 8002c20:	d209      	bcs.n	8002c36 <_ZNSt5dequeIfSaIfEE17_M_reallocate_mapEjb+0x76>
	    std::copy(this->_M_impl._M_start._M_node,
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	6958      	ldr	r0, [r3, #20]
		      this->_M_impl._M_finish._M_node + 1,
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy(this->_M_impl._M_start._M_node,
 8002c2a:	3304      	adds	r3, #4
 8002c2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c2e:	4619      	mov	r1, r3
 8002c30:	f000 fa4a 	bl	80030c8 <_ZSt4copyIPPfS1_ET0_T_S3_S2_>
 8002c34:	e048      	b.n	8002cc8 <_ZNSt5dequeIfSaIfEE17_M_reallocate_mapEjb+0x108>
		      __new_nstart);
	  else
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	6958      	ldr	r0, [r3, #20]
			       this->_M_impl._M_finish._M_node + 1,
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8002c3e:	1d19      	adds	r1, r3, #4
			       __new_nstart + __old_num_nodes);
 8002c40:	6a3b      	ldr	r3, [r7, #32]
 8002c42:	009b      	lsls	r3, r3, #2
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8002c44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c46:	4413      	add	r3, r2
 8002c48:	461a      	mov	r2, r3
 8002c4a:	f000 fa55 	bl	80030f8 <_ZSt13copy_backwardIPPfS1_ET0_T_S3_S2_>
 8002c4e:	e03b      	b.n	8002cc8 <_ZNSt5dequeIfSaIfEE17_M_reallocate_mapEjb+0x108>
	}
      else
	{
	  size_type __new_map_size = this->_M_impl._M_map_size
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	685c      	ldr	r4, [r3, #4]
	                             + std::max(this->_M_impl._M_map_size,
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	3304      	adds	r3, #4
 8002c58:	f107 0208 	add.w	r2, r7, #8
 8002c5c:	4611      	mov	r1, r2
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f7ff fe28 	bl	80028b4 <_ZSt3maxIjERKT_S2_S2_>
 8002c64:	4603      	mov	r3, r0
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4423      	add	r3, r4
	  size_type __new_map_size = this->_M_impl._M_map_size
 8002c6a:	3302      	adds	r3, #2
 8002c6c:	61bb      	str	r3, [r7, #24]
						__nodes_to_add) + 2;

	  _Map_pointer __new_map = this->_M_allocate_map(__new_map_size);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	69b9      	ldr	r1, [r7, #24]
 8002c72:	4618      	mov	r0, r3
 8002c74:	f7ff fe32 	bl	80028dc <_ZNSt11_Deque_baseIfSaIfEE15_M_allocate_mapEj>
 8002c78:	6178      	str	r0, [r7, #20]
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 8002c7a:	69ba      	ldr	r2, [r7, #24]
 8002c7c:	69fb      	ldr	r3, [r7, #28]
 8002c7e:	1ad3      	subs	r3, r2, r3
 8002c80:	085b      	lsrs	r3, r3, #1
 8002c82:	009a      	lsls	r2, r3, #2
	                 + (__add_at_front ? __nodes_to_add : 0);
 8002c84:	79fb      	ldrb	r3, [r7, #7]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d002      	beq.n	8002c90 <_ZNSt5dequeIfSaIfEE17_M_reallocate_mapEjb+0xd0>
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	009b      	lsls	r3, r3, #2
 8002c8e:	e000      	b.n	8002c92 <_ZNSt5dequeIfSaIfEE17_M_reallocate_mapEjb+0xd2>
 8002c90:	2300      	movs	r3, #0
 8002c92:	4413      	add	r3, r2
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 8002c94:	697a      	ldr	r2, [r7, #20]
 8002c96:	4413      	add	r3, r2
 8002c98:	627b      	str	r3, [r7, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	6958      	ldr	r0, [r3, #20]
		    this->_M_impl._M_finish._M_node + 1,
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 8002ca2:	3304      	adds	r3, #4
 8002ca4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ca6:	4619      	mov	r1, r3
 8002ca8:	f000 fa0e 	bl	80030c8 <_ZSt4copyIPPfS1_ET0_T_S3_S2_>
		    __new_nstart);
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 8002cac:	68f8      	ldr	r0, [r7, #12]
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	6819      	ldr	r1, [r3, #0]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	461a      	mov	r2, r3
 8002cb8:	f7ff fb59 	bl	800236e <_ZNSt11_Deque_baseIfSaIfEE17_M_deallocate_mapEPPfj>

	  this->_M_impl._M_map = __new_map;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	697a      	ldr	r2, [r7, #20]
 8002cc0:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_map_size = __new_map_size;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	69ba      	ldr	r2, [r7, #24]
 8002cc6:	605a      	str	r2, [r3, #4]
	}

      this->_M_impl._M_start._M_set_node(__new_nstart);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	3308      	adds	r3, #8
 8002ccc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f7ff fc87 	bl	80025e2 <_ZNSt15_Deque_iteratorIfRfPfE11_M_set_nodeEPS1_>
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	f103 0018 	add.w	r0, r3, #24
 8002cda:	6a3a      	ldr	r2, [r7, #32]
 8002cdc:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8002ce0:	4413      	add	r3, r2
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ce6:	4413      	add	r3, r2
 8002ce8:	4619      	mov	r1, r3
 8002cea:	f7ff fc7a 	bl	80025e2 <_ZNSt15_Deque_iteratorIfRfPfE11_M_set_nodeEPS1_>
    }
 8002cee:	bf00      	nop
 8002cf0:	372c      	adds	r7, #44	; 0x2c
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd90      	pop	{r4, r7, pc}

08002cf6 <_ZNSt16allocator_traitsISaIfEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 8002cf6:	b580      	push	{r7, lr}
 8002cf8:	b082      	sub	sp, #8
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	6078      	str	r0, [r7, #4]
 8002cfe:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8002d00:	2200      	movs	r2, #0
 8002d02:	6839      	ldr	r1, [r7, #0]
 8002d04:	6878      	ldr	r0, [r7, #4]
 8002d06:	f000 fa0f 	bl	8003128 <_ZN9__gnu_cxx13new_allocatorIfE8allocateEjPKv>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	3708      	adds	r7, #8
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}

08002d14 <_ZN9__gnu_cxx13new_allocatorIfE9constructIfJfEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8002d14:	b590      	push	{r4, r7, lr}
 8002d16:	b085      	sub	sp, #20
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	60f8      	str	r0, [r7, #12]
 8002d1c:	60b9      	str	r1, [r7, #8]
 8002d1e:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8002d20:	6878      	ldr	r0, [r7, #4]
 8002d22:	f7ff f9c9 	bl	80020b8 <_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE>
 8002d26:	4603      	mov	r3, r0
 8002d28:	681c      	ldr	r4, [r3, #0]
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	4619      	mov	r1, r3
 8002d2e:	2004      	movs	r0, #4
 8002d30:	f7fe f96c 	bl	800100c <_ZnwjPv>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d000      	beq.n	8002d3c <_ZN9__gnu_cxx13new_allocatorIfE9constructIfJfEEEvPT_DpOT0_+0x28>
 8002d3a:	601c      	str	r4, [r3, #0]
 8002d3c:	bf00      	nop
 8002d3e:	3714      	adds	r7, #20
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd90      	pop	{r4, r7, pc}

08002d44 <_ZNSt5dequeItSaItEE17_M_reallocate_mapEjb>:
    deque<_Tp, _Alloc>::
 8002d44:	b590      	push	{r4, r7, lr}
 8002d46:	b08b      	sub	sp, #44	; 0x2c
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	60f8      	str	r0, [r7, #12]
 8002d4c:	60b9      	str	r1, [r7, #8]
 8002d4e:	4613      	mov	r3, r2
 8002d50:	71fb      	strb	r3, [r7, #7]
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d56:	461a      	mov	r2, r3
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	695b      	ldr	r3, [r3, #20]
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	109b      	asrs	r3, r3, #2
 8002d60:	3301      	adds	r3, #1
      const size_type __old_num_nodes
 8002d62:	623b      	str	r3, [r7, #32]
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	6a3a      	ldr	r2, [r7, #32]
 8002d68:	4413      	add	r3, r2
 8002d6a:	61fb      	str	r3, [r7, #28]
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	685a      	ldr	r2, [r3, #4]
 8002d70:	69fb      	ldr	r3, [r7, #28]
 8002d72:	005b      	lsls	r3, r3, #1
 8002d74:	429a      	cmp	r2, r3
 8002d76:	d92d      	bls.n	8002dd4 <_ZNSt5dequeItSaItEE17_M_reallocate_mapEjb+0x90>
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	6859      	ldr	r1, [r3, #4]
					 - __new_num_nodes) / 2
 8002d80:	69fb      	ldr	r3, [r7, #28]
 8002d82:	1acb      	subs	r3, r1, r3
 8002d84:	085b      	lsrs	r3, r3, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8002d86:	0099      	lsls	r1, r3, #2
	                 + (__add_at_front ? __nodes_to_add : 0);
 8002d88:	79fb      	ldrb	r3, [r7, #7]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d002      	beq.n	8002d94 <_ZNSt5dequeItSaItEE17_M_reallocate_mapEjb+0x50>
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	009b      	lsls	r3, r3, #2
 8002d92:	e000      	b.n	8002d96 <_ZNSt5dequeItSaItEE17_M_reallocate_mapEjb+0x52>
 8002d94:	2300      	movs	r3, #0
 8002d96:	440b      	add	r3, r1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8002d98:	4413      	add	r3, r2
 8002d9a:	627b      	str	r3, [r7, #36]	; 0x24
	  if (__new_nstart < this->_M_impl._M_start._M_node)
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	695b      	ldr	r3, [r3, #20]
 8002da0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002da2:	429a      	cmp	r2, r3
 8002da4:	d209      	bcs.n	8002dba <_ZNSt5dequeItSaItEE17_M_reallocate_mapEjb+0x76>
	    std::copy(this->_M_impl._M_start._M_node,
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	6958      	ldr	r0, [r3, #20]
		      this->_M_impl._M_finish._M_node + 1,
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy(this->_M_impl._M_start._M_node,
 8002dae:	3304      	adds	r3, #4
 8002db0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002db2:	4619      	mov	r1, r3
 8002db4:	f000 f9d6 	bl	8003164 <_ZSt4copyIPPtS1_ET0_T_S3_S2_>
 8002db8:	e048      	b.n	8002e4c <_ZNSt5dequeItSaItEE17_M_reallocate_mapEjb+0x108>
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	6958      	ldr	r0, [r3, #20]
			       this->_M_impl._M_finish._M_node + 1,
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8002dc2:	1d19      	adds	r1, r3, #4
			       __new_nstart + __old_num_nodes);
 8002dc4:	6a3b      	ldr	r3, [r7, #32]
 8002dc6:	009b      	lsls	r3, r3, #2
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8002dc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dca:	4413      	add	r3, r2
 8002dcc:	461a      	mov	r2, r3
 8002dce:	f000 f9e1 	bl	8003194 <_ZSt13copy_backwardIPPtS1_ET0_T_S3_S2_>
 8002dd2:	e03b      	b.n	8002e4c <_ZNSt5dequeItSaItEE17_M_reallocate_mapEjb+0x108>
	  size_type __new_map_size = this->_M_impl._M_map_size
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	685c      	ldr	r4, [r3, #4]
	                             + std::max(this->_M_impl._M_map_size,
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	3304      	adds	r3, #4
 8002ddc:	f107 0208 	add.w	r2, r7, #8
 8002de0:	4611      	mov	r1, r2
 8002de2:	4618      	mov	r0, r3
 8002de4:	f7ff fd66 	bl	80028b4 <_ZSt3maxIjERKT_S2_S2_>
 8002de8:	4603      	mov	r3, r0
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4423      	add	r3, r4
	  size_type __new_map_size = this->_M_impl._M_map_size
 8002dee:	3302      	adds	r3, #2
 8002df0:	61bb      	str	r3, [r7, #24]
	  _Map_pointer __new_map = this->_M_allocate_map(__new_map_size);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	69b9      	ldr	r1, [r7, #24]
 8002df6:	4618      	mov	r0, r3
 8002df8:	f7ff fe19 	bl	8002a2e <_ZNSt11_Deque_baseItSaItEE15_M_allocate_mapEj>
 8002dfc:	6178      	str	r0, [r7, #20]
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 8002dfe:	69ba      	ldr	r2, [r7, #24]
 8002e00:	69fb      	ldr	r3, [r7, #28]
 8002e02:	1ad3      	subs	r3, r2, r3
 8002e04:	085b      	lsrs	r3, r3, #1
 8002e06:	009a      	lsls	r2, r3, #2
	                 + (__add_at_front ? __nodes_to_add : 0);
 8002e08:	79fb      	ldrb	r3, [r7, #7]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d002      	beq.n	8002e14 <_ZNSt5dequeItSaItEE17_M_reallocate_mapEjb+0xd0>
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	009b      	lsls	r3, r3, #2
 8002e12:	e000      	b.n	8002e16 <_ZNSt5dequeItSaItEE17_M_reallocate_mapEjb+0xd2>
 8002e14:	2300      	movs	r3, #0
 8002e16:	4413      	add	r3, r2
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 8002e18:	697a      	ldr	r2, [r7, #20]
 8002e1a:	4413      	add	r3, r2
 8002e1c:	627b      	str	r3, [r7, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	6958      	ldr	r0, [r3, #20]
		    this->_M_impl._M_finish._M_node + 1,
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 8002e26:	3304      	adds	r3, #4
 8002e28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e2a:	4619      	mov	r1, r3
 8002e2c:	f000 f99a 	bl	8003164 <_ZSt4copyIPPtS1_ET0_T_S3_S2_>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 8002e30:	68f8      	ldr	r0, [r7, #12]
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	6819      	ldr	r1, [r3, #0]
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	f7ff fb70 	bl	8002520 <_ZNSt11_Deque_baseItSaItEE17_M_deallocate_mapEPPtj>
	  this->_M_impl._M_map = __new_map;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	697a      	ldr	r2, [r7, #20]
 8002e44:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_map_size = __new_map_size;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	69ba      	ldr	r2, [r7, #24]
 8002e4a:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_start._M_set_node(__new_nstart);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	3308      	adds	r3, #8
 8002e50:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e52:	4618      	mov	r0, r3
 8002e54:	f7ff fcae 	bl	80027b4 <_ZNSt15_Deque_iteratorItRtPtE11_M_set_nodeEPS1_>
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	f103 0018 	add.w	r0, r3, #24
 8002e5e:	6a3a      	ldr	r2, [r7, #32]
 8002e60:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8002e64:	4413      	add	r3, r2
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e6a:	4413      	add	r3, r2
 8002e6c:	4619      	mov	r1, r3
 8002e6e:	f7ff fca1 	bl	80027b4 <_ZNSt15_Deque_iteratorItRtPtE11_M_set_nodeEPS1_>
    }
 8002e72:	bf00      	nop
 8002e74:	372c      	adds	r7, #44	; 0x2c
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd90      	pop	{r4, r7, pc}

08002e7a <_ZNSt16allocator_traitsISaItEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 8002e7a:	b580      	push	{r7, lr}
 8002e7c:	b082      	sub	sp, #8
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	6078      	str	r0, [r7, #4]
 8002e82:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8002e84:	2200      	movs	r2, #0
 8002e86:	6839      	ldr	r1, [r7, #0]
 8002e88:	6878      	ldr	r0, [r7, #4]
 8002e8a:	f000 f99b 	bl	80031c4 <_ZN9__gnu_cxx13new_allocatorItE8allocateEjPKv>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	4618      	mov	r0, r3
 8002e92:	3708      	adds	r7, #8
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}

08002e98 <_ZNSt16allocator_traitsISaItEE10deallocateERS0_Ptj>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b084      	sub	sp, #16
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	60f8      	str	r0, [r7, #12]
 8002ea0:	60b9      	str	r1, [r7, #8]
 8002ea2:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8002ea4:	687a      	ldr	r2, [r7, #4]
 8002ea6:	68b9      	ldr	r1, [r7, #8]
 8002ea8:	68f8      	ldr	r0, [r7, #12]
 8002eaa:	f000 f9a9 	bl	8003200 <_ZN9__gnu_cxx13new_allocatorItE10deallocateEPtj>
 8002eae:	bf00      	nop
 8002eb0:	3710      	adds	r7, #16
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}

08002eb6 <_ZNSt15_Deque_iteratorItRtPtEpLEi>:
      operator+=(difference_type __n) _GLIBCXX_NOEXCEPT
 8002eb6:	b590      	push	{r4, r7, lr}
 8002eb8:	b085      	sub	sp, #20
 8002eba:	af00      	add	r7, sp, #0
 8002ebc:	6078      	str	r0, [r7, #4]
 8002ebe:	6039      	str	r1, [r7, #0]
	const difference_type __offset = __n + (_M_cur - _M_first);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	461a      	mov	r2, r3
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	1ad3      	subs	r3, r2, r3
 8002ecc:	105b      	asrs	r3, r3, #1
 8002ece:	461a      	mov	r2, r3
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	4413      	add	r3, r2
 8002ed4:	60fb      	str	r3, [r7, #12]
	if (__offset >= 0 && __offset < difference_type(_S_buffer_size()))
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	db08      	blt.n	8002eee <_ZNSt15_Deque_iteratorItRtPtEpLEi+0x38>
 8002edc:	f7ff fc96 	bl	800280c <_ZNSt15_Deque_iteratorItRtPtE14_S_buffer_sizeEv>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	461a      	mov	r2, r3
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	da01      	bge.n	8002eee <_ZNSt15_Deque_iteratorItRtPtEpLEi+0x38>
 8002eea:	2301      	movs	r3, #1
 8002eec:	e000      	b.n	8002ef0 <_ZNSt15_Deque_iteratorItRtPtEpLEi+0x3a>
 8002eee:	2300      	movs	r3, #0
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d007      	beq.n	8002f04 <_ZNSt15_Deque_iteratorItRtPtEpLEi+0x4e>
	  _M_cur += __n;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	005b      	lsls	r3, r3, #1
 8002efc:	441a      	add	r2, r3
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	601a      	str	r2, [r3, #0]
 8002f02:	e02b      	b.n	8002f5c <_ZNSt15_Deque_iteratorItRtPtEpLEi+0xa6>
	    const difference_type __node_offset =
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	dd07      	ble.n	8002f1a <_ZNSt15_Deque_iteratorItRtPtEpLEi+0x64>
	      __offset > 0 ? __offset / difference_type(_S_buffer_size())
 8002f0a:	f7ff fc7f 	bl	800280c <_ZNSt15_Deque_iteratorItRtPtE14_S_buffer_sizeEv>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	461a      	mov	r2, r3
	    const difference_type __node_offset =
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	fb93 f3f2 	sdiv	r3, r3, r2
 8002f18:	e007      	b.n	8002f2a <_ZNSt15_Deque_iteratorItRtPtEpLEi+0x74>
			   : -difference_type((-__offset - 1)
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	43dc      	mvns	r4, r3
					      / _S_buffer_size()) - 1;
 8002f1e:	f7ff fc75 	bl	800280c <_ZNSt15_Deque_iteratorItRtPtE14_S_buffer_sizeEv>
 8002f22:	4603      	mov	r3, r0
 8002f24:	fbb4 f3f3 	udiv	r3, r4, r3
	    const difference_type __node_offset =
 8002f28:	43db      	mvns	r3, r3
 8002f2a:	60bb      	str	r3, [r7, #8]
	    _M_set_node(_M_node + __node_offset);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	68da      	ldr	r2, [r3, #12]
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	009b      	lsls	r3, r3, #2
 8002f34:	4413      	add	r3, r2
 8002f36:	4619      	mov	r1, r3
 8002f38:	6878      	ldr	r0, [r7, #4]
 8002f3a:	f7ff fc3b 	bl	80027b4 <_ZNSt15_Deque_iteratorItRtPtE11_M_set_nodeEPS1_>
	    _M_cur = _M_first + (__offset - __node_offset
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	685c      	ldr	r4, [r3, #4]
				 * difference_type(_S_buffer_size()));
 8002f42:	f7ff fc63 	bl	800280c <_ZNSt15_Deque_iteratorItRtPtE14_S_buffer_sizeEv>
 8002f46:	4603      	mov	r3, r0
 8002f48:	461a      	mov	r2, r3
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	fb03 f302 	mul.w	r3, r3, r2
	    _M_cur = _M_first + (__offset - __node_offset
 8002f50:	68fa      	ldr	r2, [r7, #12]
 8002f52:	1ad3      	subs	r3, r2, r3
 8002f54:	005b      	lsls	r3, r3, #1
 8002f56:	18e2      	adds	r2, r4, r3
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	601a      	str	r2, [r3, #0]
	return *this;
 8002f5c:	687b      	ldr	r3, [r7, #4]
      }
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3714      	adds	r7, #20
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd90      	pop	{r4, r7, pc}

08002f66 <_ZN9__gnu_cxx13new_allocatorIfEC1ERKS1_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 8002f66:	b480      	push	{r7}
 8002f68:	b083      	sub	sp, #12
 8002f6a:	af00      	add	r7, sp, #0
 8002f6c:	6078      	str	r0, [r7, #4]
 8002f6e:	6039      	str	r1, [r7, #0]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	4618      	mov	r0, r3
 8002f74:	370c      	adds	r7, #12
 8002f76:	46bd      	mov	sp, r7
 8002f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7c:	4770      	bx	lr

08002f7e <_ZNSt16allocator_traitsISaIPfEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 8002f7e:	b580      	push	{r7, lr}
 8002f80:	b082      	sub	sp, #8
 8002f82:	af00      	add	r7, sp, #0
 8002f84:	6078      	str	r0, [r7, #4]
 8002f86:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8002f88:	2200      	movs	r2, #0
 8002f8a:	6839      	ldr	r1, [r7, #0]
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	f000 f944 	bl	800321a <_ZN9__gnu_cxx13new_allocatorIPfE8allocateEjPKv>
 8002f92:	4603      	mov	r3, r0
 8002f94:	4618      	mov	r0, r3
 8002f96:	3708      	adds	r7, #8
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}

08002f9c <_ZNKSt11_Deque_baseIfSaIfEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8002f9c:	b480      	push	{r7}
 8002f9e:	b083      	sub	sp, #12
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	370c      	adds	r7, #12
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr

08002fb2 <_ZNSaIPfEC1IfEERKSaIT_E>:
	allocator(const allocator<_Tp1>&) throw() { }
 8002fb2:	b580      	push	{r7, lr}
 8002fb4:	b082      	sub	sp, #8
 8002fb6:	af00      	add	r7, sp, #0
 8002fb8:	6078      	str	r0, [r7, #4]
 8002fba:	6039      	str	r1, [r7, #0]
 8002fbc:	6878      	ldr	r0, [r7, #4]
 8002fbe:	f000 f94a 	bl	8003256 <_ZN9__gnu_cxx13new_allocatorIPfEC1Ev>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	3708      	adds	r7, #8
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}

08002fcc <_ZN9__gnu_cxx13new_allocatorIPfED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8002fcc:	b480      	push	{r7}
 8002fce:	b083      	sub	sp, #12
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	370c      	adds	r7, #12
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr

08002fe2 <_ZN9__gnu_cxx13new_allocatorIPfE10deallocateEPS1_j>:
      deallocate(pointer __p, size_type)
 8002fe2:	b580      	push	{r7, lr}
 8002fe4:	b084      	sub	sp, #16
 8002fe6:	af00      	add	r7, sp, #0
 8002fe8:	60f8      	str	r0, [r7, #12]
 8002fea:	60b9      	str	r1, [r7, #8]
 8002fec:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8002fee:	68b8      	ldr	r0, [r7, #8]
 8002ff0:	f003 fa7a 	bl	80064e8 <_ZdlPv>
      }
 8002ff4:	bf00      	nop
 8002ff6:	3710      	adds	r7, #16
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}

08002ffc <_ZNSt20__uninitialized_fillILb1EE13__uninit_fillIPffEEvT_S3_RKT0_>:
        __uninit_fill(_ForwardIterator __first, _ForwardIterator __last,
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b084      	sub	sp, #16
 8003000:	af00      	add	r7, sp, #0
 8003002:	60f8      	str	r0, [r7, #12]
 8003004:	60b9      	str	r1, [r7, #8]
 8003006:	607a      	str	r2, [r7, #4]
        { std::fill(__first, __last, __x); }
 8003008:	687a      	ldr	r2, [r7, #4]
 800300a:	68b9      	ldr	r1, [r7, #8]
 800300c:	68f8      	ldr	r0, [r7, #12]
 800300e:	f000 f92d 	bl	800326c <_ZSt4fillIPffEvT_S1_RKT0_>
 8003012:	bf00      	nop
 8003014:	3710      	adds	r7, #16
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}

0800301a <_ZN9__gnu_cxx13new_allocatorItEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800301a:	b480      	push	{r7}
 800301c:	b083      	sub	sp, #12
 800301e:	af00      	add	r7, sp, #0
 8003020:	6078      	str	r0, [r7, #4]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	4618      	mov	r0, r3
 8003026:	370c      	adds	r7, #12
 8003028:	46bd      	mov	sp, r7
 800302a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302e:	4770      	bx	lr

08003030 <_ZNSt16allocator_traitsISaIPtEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 8003030:	b580      	push	{r7, lr}
 8003032:	b082      	sub	sp, #8
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
 8003038:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800303a:	2200      	movs	r2, #0
 800303c:	6839      	ldr	r1, [r7, #0]
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f000 f92b 	bl	800329a <_ZN9__gnu_cxx13new_allocatorIPtE8allocateEjPKv>
 8003044:	4603      	mov	r3, r0
 8003046:	4618      	mov	r0, r3
 8003048:	3708      	adds	r7, #8
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}

0800304e <_ZNKSt11_Deque_baseItSaItEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 800304e:	b480      	push	{r7}
 8003050:	b083      	sub	sp, #12
 8003052:	af00      	add	r7, sp, #0
 8003054:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	4618      	mov	r0, r3
 800305a:	370c      	adds	r7, #12
 800305c:	46bd      	mov	sp, r7
 800305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003062:	4770      	bx	lr

08003064 <_ZNSaIPtEC1ItEERKSaIT_E>:
 8003064:	b580      	push	{r7, lr}
 8003066:	b082      	sub	sp, #8
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
 800306c:	6039      	str	r1, [r7, #0]
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f000 f931 	bl	80032d6 <_ZN9__gnu_cxx13new_allocatorIPtEC1Ev>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	4618      	mov	r0, r3
 8003078:	3708      	adds	r7, #8
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}

0800307e <_ZN9__gnu_cxx13new_allocatorIPtED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800307e:	b480      	push	{r7}
 8003080:	b083      	sub	sp, #12
 8003082:	af00      	add	r7, sp, #0
 8003084:	6078      	str	r0, [r7, #4]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	4618      	mov	r0, r3
 800308a:	370c      	adds	r7, #12
 800308c:	46bd      	mov	sp, r7
 800308e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003092:	4770      	bx	lr

08003094 <_ZN9__gnu_cxx13new_allocatorIPtE10deallocateEPS1_j>:
      deallocate(pointer __p, size_type)
 8003094:	b580      	push	{r7, lr}
 8003096:	b084      	sub	sp, #16
 8003098:	af00      	add	r7, sp, #0
 800309a:	60f8      	str	r0, [r7, #12]
 800309c:	60b9      	str	r1, [r7, #8]
 800309e:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 80030a0:	68b8      	ldr	r0, [r7, #8]
 80030a2:	f003 fa21 	bl	80064e8 <_ZdlPv>
      }
 80030a6:	bf00      	nop
 80030a8:	3710      	adds	r7, #16
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}

080030ae <_ZN9__gnu_cxx13new_allocatorIfE10deallocateEPfj>:
      deallocate(pointer __p, size_type)
 80030ae:	b580      	push	{r7, lr}
 80030b0:	b084      	sub	sp, #16
 80030b2:	af00      	add	r7, sp, #0
 80030b4:	60f8      	str	r0, [r7, #12]
 80030b6:	60b9      	str	r1, [r7, #8]
 80030b8:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 80030ba:	68b8      	ldr	r0, [r7, #8]
 80030bc:	f003 fa14 	bl	80064e8 <_ZdlPv>
      }
 80030c0:	bf00      	nop
 80030c2:	3710      	adds	r7, #16
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}

080030c8 <_ZSt4copyIPPfS1_ET0_T_S3_S2_>:
   *  Note that the end of the output range is permitted to be contained
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 80030c8:	b590      	push	{r4, r7, lr}
 80030ca:	b085      	sub	sp, #20
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	60f8      	str	r0, [r7, #12]
 80030d0:	60b9      	str	r1, [r7, #8]
 80030d2:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_valid_range(__first, __last);

      return (std::__copy_move_a2<__is_move_iterator<_II>::__value>
	      (std::__miter_base(__first), std::__miter_base(__last),
 80030d4:	68f8      	ldr	r0, [r7, #12]
 80030d6:	f000 f909 	bl	80032ec <_ZSt12__miter_baseIPPfET_S2_>
 80030da:	4604      	mov	r4, r0
 80030dc:	68b8      	ldr	r0, [r7, #8]
 80030de:	f000 f905 	bl	80032ec <_ZSt12__miter_baseIPPfET_S2_>
 80030e2:	4603      	mov	r3, r0
	       __result));
 80030e4:	687a      	ldr	r2, [r7, #4]
 80030e6:	4619      	mov	r1, r3
 80030e8:	4620      	mov	r0, r4
 80030ea:	f000 f90a 	bl	8003302 <_ZSt14__copy_move_a2ILb0EPPfS1_ET1_T0_S3_S2_>
 80030ee:	4603      	mov	r3, r0
    }
 80030f0:	4618      	mov	r0, r3
 80030f2:	3714      	adds	r7, #20
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd90      	pop	{r4, r7, pc}

080030f8 <_ZSt13copy_backwardIPPfS1_ET0_T_S3_S2_>:
   *  Result may not be in the range (first,last].  Use copy instead.  Note
   *  that the start of the output range may overlap [first,last).
  */
  template<typename _BI1, typename _BI2>
    inline _BI2
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 80030f8:	b590      	push	{r4, r7, lr}
 80030fa:	b085      	sub	sp, #20
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	60f8      	str	r0, [r7, #12]
 8003100:	60b9      	str	r1, [r7, #8]
 8003102:	607a      	str	r2, [r7, #4]
	    typename iterator_traits<_BI1>::value_type,
	    typename iterator_traits<_BI2>::value_type>)
      __glibcxx_requires_valid_range(__first, __last);

      return (std::__copy_move_backward_a2<__is_move_iterator<_BI1>::__value>
	      (std::__miter_base(__first), std::__miter_base(__last),
 8003104:	68f8      	ldr	r0, [r7, #12]
 8003106:	f000 f8f1 	bl	80032ec <_ZSt12__miter_baseIPPfET_S2_>
 800310a:	4604      	mov	r4, r0
 800310c:	68b8      	ldr	r0, [r7, #8]
 800310e:	f000 f8ed 	bl	80032ec <_ZSt12__miter_baseIPPfET_S2_>
 8003112:	4603      	mov	r3, r0
	       __result));
 8003114:	687a      	ldr	r2, [r7, #4]
 8003116:	4619      	mov	r1, r3
 8003118:	4620      	mov	r0, r4
 800311a:	f000 f90e 	bl	800333a <_ZSt23__copy_move_backward_a2ILb0EPPfS1_ET1_T0_S3_S2_>
 800311e:	4603      	mov	r3, r0
    }
 8003120:	4618      	mov	r0, r3
 8003122:	3714      	adds	r7, #20
 8003124:	46bd      	mov	sp, r7
 8003126:	bd90      	pop	{r4, r7, pc}

08003128 <_ZN9__gnu_cxx13new_allocatorIfE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8003128:	b580      	push	{r7, lr}
 800312a:	b084      	sub	sp, #16
 800312c:	af00      	add	r7, sp, #0
 800312e:	60f8      	str	r0, [r7, #12]
 8003130:	60b9      	str	r1, [r7, #8]
 8003132:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8003134:	68f8      	ldr	r0, [r7, #12]
 8003136:	f000 f91c 	bl	8003372 <_ZNK9__gnu_cxx13new_allocatorIfE8max_sizeEv>
 800313a:	4602      	mov	r2, r0
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	4293      	cmp	r3, r2
 8003140:	bf8c      	ite	hi
 8003142:	2301      	movhi	r3, #1
 8003144:	2300      	movls	r3, #0
 8003146:	b2db      	uxtb	r3, r3
 8003148:	2b00      	cmp	r3, #0
 800314a:	d001      	beq.n	8003150 <_ZN9__gnu_cxx13new_allocatorIfE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800314c:	f003 f9d0 	bl	80064f0 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	009b      	lsls	r3, r3, #2
 8003154:	4618      	mov	r0, r3
 8003156:	f003 f9ad 	bl	80064b4 <_Znwj>
 800315a:	4603      	mov	r3, r0
      }
 800315c:	4618      	mov	r0, r3
 800315e:	3710      	adds	r7, #16
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}

08003164 <_ZSt4copyIPPtS1_ET0_T_S3_S2_>:
    copy(_II __first, _II __last, _OI __result)
 8003164:	b590      	push	{r4, r7, lr}
 8003166:	b085      	sub	sp, #20
 8003168:	af00      	add	r7, sp, #0
 800316a:	60f8      	str	r0, [r7, #12]
 800316c:	60b9      	str	r1, [r7, #8]
 800316e:	607a      	str	r2, [r7, #4]
	      (std::__miter_base(__first), std::__miter_base(__last),
 8003170:	68f8      	ldr	r0, [r7, #12]
 8003172:	f000 f90a 	bl	800338a <_ZSt12__miter_baseIPPtET_S2_>
 8003176:	4604      	mov	r4, r0
 8003178:	68b8      	ldr	r0, [r7, #8]
 800317a:	f000 f906 	bl	800338a <_ZSt12__miter_baseIPPtET_S2_>
 800317e:	4603      	mov	r3, r0
	       __result));
 8003180:	687a      	ldr	r2, [r7, #4]
 8003182:	4619      	mov	r1, r3
 8003184:	4620      	mov	r0, r4
 8003186:	f000 f90b 	bl	80033a0 <_ZSt14__copy_move_a2ILb0EPPtS1_ET1_T0_S3_S2_>
 800318a:	4603      	mov	r3, r0
    }
 800318c:	4618      	mov	r0, r3
 800318e:	3714      	adds	r7, #20
 8003190:	46bd      	mov	sp, r7
 8003192:	bd90      	pop	{r4, r7, pc}

08003194 <_ZSt13copy_backwardIPPtS1_ET0_T_S3_S2_>:
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 8003194:	b590      	push	{r4, r7, lr}
 8003196:	b085      	sub	sp, #20
 8003198:	af00      	add	r7, sp, #0
 800319a:	60f8      	str	r0, [r7, #12]
 800319c:	60b9      	str	r1, [r7, #8]
 800319e:	607a      	str	r2, [r7, #4]
	      (std::__miter_base(__first), std::__miter_base(__last),
 80031a0:	68f8      	ldr	r0, [r7, #12]
 80031a2:	f000 f8f2 	bl	800338a <_ZSt12__miter_baseIPPtET_S2_>
 80031a6:	4604      	mov	r4, r0
 80031a8:	68b8      	ldr	r0, [r7, #8]
 80031aa:	f000 f8ee 	bl	800338a <_ZSt12__miter_baseIPPtET_S2_>
 80031ae:	4603      	mov	r3, r0
	       __result));
 80031b0:	687a      	ldr	r2, [r7, #4]
 80031b2:	4619      	mov	r1, r3
 80031b4:	4620      	mov	r0, r4
 80031b6:	f000 f90f 	bl	80033d8 <_ZSt23__copy_move_backward_a2ILb0EPPtS1_ET1_T0_S3_S2_>
 80031ba:	4603      	mov	r3, r0
    }
 80031bc:	4618      	mov	r0, r3
 80031be:	3714      	adds	r7, #20
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd90      	pop	{r4, r7, pc}

080031c4 <_ZN9__gnu_cxx13new_allocatorItE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b084      	sub	sp, #16
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	60f8      	str	r0, [r7, #12]
 80031cc:	60b9      	str	r1, [r7, #8]
 80031ce:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 80031d0:	68f8      	ldr	r0, [r7, #12]
 80031d2:	f000 f91d 	bl	8003410 <_ZNK9__gnu_cxx13new_allocatorItE8max_sizeEv>
 80031d6:	4602      	mov	r2, r0
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	4293      	cmp	r3, r2
 80031dc:	bf8c      	ite	hi
 80031de:	2301      	movhi	r3, #1
 80031e0:	2300      	movls	r3, #0
 80031e2:	b2db      	uxtb	r3, r3
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d001      	beq.n	80031ec <_ZN9__gnu_cxx13new_allocatorItE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80031e8:	f003 f982 	bl	80064f0 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	005b      	lsls	r3, r3, #1
 80031f0:	4618      	mov	r0, r3
 80031f2:	f003 f95f 	bl	80064b4 <_Znwj>
 80031f6:	4603      	mov	r3, r0
      }
 80031f8:	4618      	mov	r0, r3
 80031fa:	3710      	adds	r7, #16
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}

08003200 <_ZN9__gnu_cxx13new_allocatorItE10deallocateEPtj>:
      deallocate(pointer __p, size_type)
 8003200:	b580      	push	{r7, lr}
 8003202:	b084      	sub	sp, #16
 8003204:	af00      	add	r7, sp, #0
 8003206:	60f8      	str	r0, [r7, #12]
 8003208:	60b9      	str	r1, [r7, #8]
 800320a:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 800320c:	68b8      	ldr	r0, [r7, #8]
 800320e:	f003 f96b 	bl	80064e8 <_ZdlPv>
      }
 8003212:	bf00      	nop
 8003214:	3710      	adds	r7, #16
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}

0800321a <_ZN9__gnu_cxx13new_allocatorIPfE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800321a:	b580      	push	{r7, lr}
 800321c:	b084      	sub	sp, #16
 800321e:	af00      	add	r7, sp, #0
 8003220:	60f8      	str	r0, [r7, #12]
 8003222:	60b9      	str	r1, [r7, #8]
 8003224:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8003226:	68f8      	ldr	r0, [r7, #12]
 8003228:	f000 f8fe 	bl	8003428 <_ZNK9__gnu_cxx13new_allocatorIPfE8max_sizeEv>
 800322c:	4602      	mov	r2, r0
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	4293      	cmp	r3, r2
 8003232:	bf8c      	ite	hi
 8003234:	2301      	movhi	r3, #1
 8003236:	2300      	movls	r3, #0
 8003238:	b2db      	uxtb	r3, r3
 800323a:	2b00      	cmp	r3, #0
 800323c:	d001      	beq.n	8003242 <_ZN9__gnu_cxx13new_allocatorIPfE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800323e:	f003 f957 	bl	80064f0 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	009b      	lsls	r3, r3, #2
 8003246:	4618      	mov	r0, r3
 8003248:	f003 f934 	bl	80064b4 <_Znwj>
 800324c:	4603      	mov	r3, r0
      }
 800324e:	4618      	mov	r0, r3
 8003250:	3710      	adds	r7, #16
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}

08003256 <_ZN9__gnu_cxx13new_allocatorIPfEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8003256:	b480      	push	{r7}
 8003258:	b083      	sub	sp, #12
 800325a:	af00      	add	r7, sp, #0
 800325c:	6078      	str	r0, [r7, #4]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	4618      	mov	r0, r3
 8003262:	370c      	adds	r7, #12
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr

0800326c <_ZSt4fillIPffEvT_S1_RKT0_>:
   *  types filling contiguous areas of memory, this becomes an inline call
   *  to @c memset or @c wmemset.
  */
  template<typename _ForwardIterator, typename _Tp>
    inline void
    fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value)
 800326c:	b590      	push	{r4, r7, lr}
 800326e:	b085      	sub	sp, #20
 8003270:	af00      	add	r7, sp, #0
 8003272:	60f8      	str	r0, [r7, #12]
 8003274:	60b9      	str	r1, [r7, #8]
 8003276:	607a      	str	r2, [r7, #4]
      // concept requirements
      __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
				  _ForwardIterator>)
      __glibcxx_requires_valid_range(__first, __last);

      std::__fill_a(std::__niter_base(__first), std::__niter_base(__last),
 8003278:	68f8      	ldr	r0, [r7, #12]
 800327a:	f000 f8e1 	bl	8003440 <_ZSt12__niter_baseIPfET_S1_>
 800327e:	4604      	mov	r4, r0
 8003280:	68b8      	ldr	r0, [r7, #8]
 8003282:	f000 f8dd 	bl	8003440 <_ZSt12__niter_baseIPfET_S1_>
 8003286:	4603      	mov	r3, r0
 8003288:	687a      	ldr	r2, [r7, #4]
 800328a:	4619      	mov	r1, r3
 800328c:	4620      	mov	r0, r4
 800328e:	f000 f8e2 	bl	8003456 <_ZSt8__fill_aIPffEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S8_RKS4_>
		    __value);
    }
 8003292:	bf00      	nop
 8003294:	3714      	adds	r7, #20
 8003296:	46bd      	mov	sp, r7
 8003298:	bd90      	pop	{r4, r7, pc}

0800329a <_ZN9__gnu_cxx13new_allocatorIPtE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800329a:	b580      	push	{r7, lr}
 800329c:	b084      	sub	sp, #16
 800329e:	af00      	add	r7, sp, #0
 80032a0:	60f8      	str	r0, [r7, #12]
 80032a2:	60b9      	str	r1, [r7, #8]
 80032a4:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 80032a6:	68f8      	ldr	r0, [r7, #12]
 80032a8:	f000 f8ef 	bl	800348a <_ZNK9__gnu_cxx13new_allocatorIPtE8max_sizeEv>
 80032ac:	4602      	mov	r2, r0
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	4293      	cmp	r3, r2
 80032b2:	bf8c      	ite	hi
 80032b4:	2301      	movhi	r3, #1
 80032b6:	2300      	movls	r3, #0
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d001      	beq.n	80032c2 <_ZN9__gnu_cxx13new_allocatorIPtE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80032be:	f003 f917 	bl	80064f0 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	009b      	lsls	r3, r3, #2
 80032c6:	4618      	mov	r0, r3
 80032c8:	f003 f8f4 	bl	80064b4 <_Znwj>
 80032cc:	4603      	mov	r3, r0
      }
 80032ce:	4618      	mov	r0, r3
 80032d0:	3710      	adds	r7, #16
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}

080032d6 <_ZN9__gnu_cxx13new_allocatorIPtEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80032d6:	b480      	push	{r7}
 80032d8:	b083      	sub	sp, #12
 80032da:	af00      	add	r7, sp, #0
 80032dc:	6078      	str	r0, [r7, #4]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	4618      	mov	r0, r3
 80032e2:	370c      	adds	r7, #12
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr

080032ec <_ZSt12__miter_baseIPPfET_S2_>:

  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    inline _Iterator
    __miter_base(_Iterator __it)
 80032ec:	b480      	push	{r7}
 80032ee:	b083      	sub	sp, #12
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
    { return __it; }
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	4618      	mov	r0, r3
 80032f8:	370c      	adds	r7, #12
 80032fa:	46bd      	mov	sp, r7
 80032fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003300:	4770      	bx	lr

08003302 <_ZSt14__copy_move_a2ILb0EPPfS1_ET1_T0_S3_S2_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8003302:	b5b0      	push	{r4, r5, r7, lr}
 8003304:	b084      	sub	sp, #16
 8003306:	af00      	add	r7, sp, #0
 8003308:	60f8      	str	r0, [r7, #12]
 800330a:	60b9      	str	r1, [r7, #8]
 800330c:	607a      	str	r2, [r7, #4]
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
 800330e:	68f8      	ldr	r0, [r7, #12]
 8003310:	f000 f8c7 	bl	80034a2 <_ZSt12__niter_baseIPPfET_S2_>
 8003314:	4604      	mov	r4, r0
 8003316:	68b8      	ldr	r0, [r7, #8]
 8003318:	f000 f8c3 	bl	80034a2 <_ZSt12__niter_baseIPPfET_S2_>
 800331c:	4605      	mov	r5, r0
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	f000 f8bf 	bl	80034a2 <_ZSt12__niter_baseIPPfET_S2_>
 8003324:	4603      	mov	r3, r0
					     std::__niter_base(__result)));
 8003326:	461a      	mov	r2, r3
 8003328:	4629      	mov	r1, r5
 800332a:	4620      	mov	r0, r4
 800332c:	f000 f8c4 	bl	80034b8 <_ZSt13__copy_move_aILb0EPPfS1_ET1_T0_S3_S2_>
 8003330:	4603      	mov	r3, r0
    }
 8003332:	4618      	mov	r0, r3
 8003334:	3710      	adds	r7, #16
 8003336:	46bd      	mov	sp, r7
 8003338:	bdb0      	pop	{r4, r5, r7, pc}

0800333a <_ZSt23__copy_move_backward_a2ILb0EPPfS1_ET1_T0_S3_S2_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 800333a:	b5b0      	push	{r4, r5, r7, lr}
 800333c:	b084      	sub	sp, #16
 800333e:	af00      	add	r7, sp, #0
 8003340:	60f8      	str	r0, [r7, #12]
 8003342:	60b9      	str	r1, [r7, #8]
 8003344:	607a      	str	r2, [r7, #4]
		  (std::__niter_base(__first), std::__niter_base(__last),
 8003346:	68f8      	ldr	r0, [r7, #12]
 8003348:	f000 f8ab 	bl	80034a2 <_ZSt12__niter_baseIPPfET_S2_>
 800334c:	4604      	mov	r4, r0
 800334e:	68b8      	ldr	r0, [r7, #8]
 8003350:	f000 f8a7 	bl	80034a2 <_ZSt12__niter_baseIPPfET_S2_>
 8003354:	4605      	mov	r5, r0
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	f000 f8a3 	bl	80034a2 <_ZSt12__niter_baseIPPfET_S2_>
 800335c:	4603      	mov	r3, r0
		   std::__niter_base(__result)));
 800335e:	461a      	mov	r2, r3
 8003360:	4629      	mov	r1, r5
 8003362:	4620      	mov	r0, r4
 8003364:	f000 f8ba 	bl	80034dc <_ZSt22__copy_move_backward_aILb0EPPfS1_ET1_T0_S3_S2_>
 8003368:	4603      	mov	r3, r0
    }
 800336a:	4618      	mov	r0, r3
 800336c:	3710      	adds	r7, #16
 800336e:	46bd      	mov	sp, r7
 8003370:	bdb0      	pop	{r4, r5, r7, pc}

08003372 <_ZNK9__gnu_cxx13new_allocatorIfE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8003372:	b480      	push	{r7}
 8003374:	b083      	sub	sp, #12
 8003376:	af00      	add	r7, sp, #0
 8003378:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 800337a:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800337e:	4618      	mov	r0, r3
 8003380:	370c      	adds	r7, #12
 8003382:	46bd      	mov	sp, r7
 8003384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003388:	4770      	bx	lr

0800338a <_ZSt12__miter_baseIPPtET_S2_>:
    __miter_base(_Iterator __it)
 800338a:	b480      	push	{r7}
 800338c:	b083      	sub	sp, #12
 800338e:	af00      	add	r7, sp, #0
 8003390:	6078      	str	r0, [r7, #4]
    { return __it; }
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	4618      	mov	r0, r3
 8003396:	370c      	adds	r7, #12
 8003398:	46bd      	mov	sp, r7
 800339a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339e:	4770      	bx	lr

080033a0 <_ZSt14__copy_move_a2ILb0EPPtS1_ET1_T0_S3_S2_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 80033a0:	b5b0      	push	{r4, r5, r7, lr}
 80033a2:	b084      	sub	sp, #16
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	60f8      	str	r0, [r7, #12]
 80033a8:	60b9      	str	r1, [r7, #8]
 80033aa:	607a      	str	r2, [r7, #4]
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
 80033ac:	68f8      	ldr	r0, [r7, #12]
 80033ae:	f000 f8a7 	bl	8003500 <_ZSt12__niter_baseIPPtET_S2_>
 80033b2:	4604      	mov	r4, r0
 80033b4:	68b8      	ldr	r0, [r7, #8]
 80033b6:	f000 f8a3 	bl	8003500 <_ZSt12__niter_baseIPPtET_S2_>
 80033ba:	4605      	mov	r5, r0
 80033bc:	6878      	ldr	r0, [r7, #4]
 80033be:	f000 f89f 	bl	8003500 <_ZSt12__niter_baseIPPtET_S2_>
 80033c2:	4603      	mov	r3, r0
					     std::__niter_base(__result)));
 80033c4:	461a      	mov	r2, r3
 80033c6:	4629      	mov	r1, r5
 80033c8:	4620      	mov	r0, r4
 80033ca:	f000 f8a4 	bl	8003516 <_ZSt13__copy_move_aILb0EPPtS1_ET1_T0_S3_S2_>
 80033ce:	4603      	mov	r3, r0
    }
 80033d0:	4618      	mov	r0, r3
 80033d2:	3710      	adds	r7, #16
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bdb0      	pop	{r4, r5, r7, pc}

080033d8 <_ZSt23__copy_move_backward_a2ILb0EPPtS1_ET1_T0_S3_S2_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 80033d8:	b5b0      	push	{r4, r5, r7, lr}
 80033da:	b084      	sub	sp, #16
 80033dc:	af00      	add	r7, sp, #0
 80033de:	60f8      	str	r0, [r7, #12]
 80033e0:	60b9      	str	r1, [r7, #8]
 80033e2:	607a      	str	r2, [r7, #4]
		  (std::__niter_base(__first), std::__niter_base(__last),
 80033e4:	68f8      	ldr	r0, [r7, #12]
 80033e6:	f000 f88b 	bl	8003500 <_ZSt12__niter_baseIPPtET_S2_>
 80033ea:	4604      	mov	r4, r0
 80033ec:	68b8      	ldr	r0, [r7, #8]
 80033ee:	f000 f887 	bl	8003500 <_ZSt12__niter_baseIPPtET_S2_>
 80033f2:	4605      	mov	r5, r0
 80033f4:	6878      	ldr	r0, [r7, #4]
 80033f6:	f000 f883 	bl	8003500 <_ZSt12__niter_baseIPPtET_S2_>
 80033fa:	4603      	mov	r3, r0
		   std::__niter_base(__result)));
 80033fc:	461a      	mov	r2, r3
 80033fe:	4629      	mov	r1, r5
 8003400:	4620      	mov	r0, r4
 8003402:	f000 f89a 	bl	800353a <_ZSt22__copy_move_backward_aILb0EPPtS1_ET1_T0_S3_S2_>
 8003406:	4603      	mov	r3, r0
    }
 8003408:	4618      	mov	r0, r3
 800340a:	3710      	adds	r7, #16
 800340c:	46bd      	mov	sp, r7
 800340e:	bdb0      	pop	{r4, r5, r7, pc}

08003410 <_ZNK9__gnu_cxx13new_allocatorItE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8003410:	b480      	push	{r7}
 8003412:	b083      	sub	sp, #12
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 8003418:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800341c:	4618      	mov	r0, r3
 800341e:	370c      	adds	r7, #12
 8003420:	46bd      	mov	sp, r7
 8003422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003426:	4770      	bx	lr

08003428 <_ZNK9__gnu_cxx13new_allocatorIPfE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8003428:	b480      	push	{r7}
 800342a:	b083      	sub	sp, #12
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 8003430:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8003434:	4618      	mov	r0, r3
 8003436:	370c      	adds	r7, #12
 8003438:	46bd      	mov	sp, r7
 800343a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343e:	4770      	bx	lr

08003440 <_ZSt12__niter_baseIPfET_S1_>:
    __niter_base(_Iterator __it)
 8003440:	b480      	push	{r7}
 8003442:	b083      	sub	sp, #12
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
    { return __it; }
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	4618      	mov	r0, r3
 800344c:	370c      	adds	r7, #12
 800344e:	46bd      	mov	sp, r7
 8003450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003454:	4770      	bx	lr

08003456 <_ZSt8__fill_aIPffEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S8_RKS4_>:
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
 8003456:	b480      	push	{r7}
 8003458:	b087      	sub	sp, #28
 800345a:	af00      	add	r7, sp, #0
 800345c:	60f8      	str	r0, [r7, #12]
 800345e:	60b9      	str	r1, [r7, #8]
 8003460:	607a      	str	r2, [r7, #4]
      const _Tp __tmp = __value;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	617b      	str	r3, [r7, #20]
      for (; __first != __last; ++__first)
 8003468:	68fa      	ldr	r2, [r7, #12]
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	429a      	cmp	r2, r3
 800346e:	d006      	beq.n	800347e <_ZSt8__fill_aIPffEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S8_RKS4_+0x28>
	*__first = __tmp;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	697a      	ldr	r2, [r7, #20]
 8003474:	601a      	str	r2, [r3, #0]
      for (; __first != __last; ++__first)
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	3304      	adds	r3, #4
 800347a:	60fb      	str	r3, [r7, #12]
 800347c:	e7f4      	b.n	8003468 <_ZSt8__fill_aIPffEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S8_RKS4_+0x12>
    }
 800347e:	bf00      	nop
 8003480:	371c      	adds	r7, #28
 8003482:	46bd      	mov	sp, r7
 8003484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003488:	4770      	bx	lr

0800348a <_ZNK9__gnu_cxx13new_allocatorIPtE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 800348a:	b480      	push	{r7}
 800348c:	b083      	sub	sp, #12
 800348e:	af00      	add	r7, sp, #0
 8003490:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 8003492:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8003496:	4618      	mov	r0, r3
 8003498:	370c      	adds	r7, #12
 800349a:	46bd      	mov	sp, r7
 800349c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a0:	4770      	bx	lr

080034a2 <_ZSt12__niter_baseIPPfET_S2_>:
    __niter_base(_Iterator __it)
 80034a2:	b480      	push	{r7}
 80034a4:	b083      	sub	sp, #12
 80034a6:	af00      	add	r7, sp, #0
 80034a8:	6078      	str	r0, [r7, #4]
    { return __it; }
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	4618      	mov	r0, r3
 80034ae:	370c      	adds	r7, #12
 80034b0:	46bd      	mov	sp, r7
 80034b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b6:	4770      	bx	lr

080034b8 <_ZSt13__copy_move_aILb0EPPfS1_ET1_T0_S3_S2_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b086      	sub	sp, #24
 80034bc:	af00      	add	r7, sp, #0
 80034be:	60f8      	str	r0, [r7, #12]
 80034c0:	60b9      	str	r1, [r7, #8]
 80034c2:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivial(_ValueTypeI)
 80034c4:	2301      	movs	r3, #1
 80034c6:	75fb      	strb	r3, [r7, #23]
	                      _Category>::__copy_m(__first, __last, __result);
 80034c8:	687a      	ldr	r2, [r7, #4]
 80034ca:	68b9      	ldr	r1, [r7, #8]
 80034cc:	68f8      	ldr	r0, [r7, #12]
 80034ce:	f000 f846 	bl	800355e <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPfEEPT_PKS4_S7_S5_>
 80034d2:	4603      	mov	r3, r0
    }
 80034d4:	4618      	mov	r0, r3
 80034d6:	3718      	adds	r7, #24
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}

080034dc <_ZSt22__copy_move_backward_aILb0EPPfS1_ET1_T0_S3_S2_>:
    __copy_move_backward_a(_BI1 __first, _BI1 __last, _BI2 __result)
 80034dc:	b580      	push	{r7, lr}
 80034de:	b086      	sub	sp, #24
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	60f8      	str	r0, [r7, #12]
 80034e4:	60b9      	str	r1, [r7, #8]
 80034e6:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivial(_ValueType1)
 80034e8:	2301      	movs	r3, #1
 80034ea:	75fb      	strb	r3, [r7, #23]
								 __result);
 80034ec:	687a      	ldr	r2, [r7, #4]
 80034ee:	68b9      	ldr	r1, [r7, #8]
 80034f0:	68f8      	ldr	r0, [r7, #12]
 80034f2:	f000 f851 	bl	8003598 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPfEEPT_PKS4_S7_S5_>
 80034f6:	4603      	mov	r3, r0
    }
 80034f8:	4618      	mov	r0, r3
 80034fa:	3718      	adds	r7, #24
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}

08003500 <_ZSt12__niter_baseIPPtET_S2_>:
    __niter_base(_Iterator __it)
 8003500:	b480      	push	{r7}
 8003502:	b083      	sub	sp, #12
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
    { return __it; }
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	4618      	mov	r0, r3
 800350c:	370c      	adds	r7, #12
 800350e:	46bd      	mov	sp, r7
 8003510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003514:	4770      	bx	lr

08003516 <_ZSt13__copy_move_aILb0EPPtS1_ET1_T0_S3_S2_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8003516:	b580      	push	{r7, lr}
 8003518:	b086      	sub	sp, #24
 800351a:	af00      	add	r7, sp, #0
 800351c:	60f8      	str	r0, [r7, #12]
 800351e:	60b9      	str	r1, [r7, #8]
 8003520:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivial(_ValueTypeI)
 8003522:	2301      	movs	r3, #1
 8003524:	75fb      	strb	r3, [r7, #23]
	                      _Category>::__copy_m(__first, __last, __result);
 8003526:	687a      	ldr	r2, [r7, #4]
 8003528:	68b9      	ldr	r1, [r7, #8]
 800352a:	68f8      	ldr	r0, [r7, #12]
 800352c:	f000 f856 	bl	80035dc <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPtEEPT_PKS4_S7_S5_>
 8003530:	4603      	mov	r3, r0
    }
 8003532:	4618      	mov	r0, r3
 8003534:	3718      	adds	r7, #24
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}

0800353a <_ZSt22__copy_move_backward_aILb0EPPtS1_ET1_T0_S3_S2_>:
    __copy_move_backward_a(_BI1 __first, _BI1 __last, _BI2 __result)
 800353a:	b580      	push	{r7, lr}
 800353c:	b086      	sub	sp, #24
 800353e:	af00      	add	r7, sp, #0
 8003540:	60f8      	str	r0, [r7, #12]
 8003542:	60b9      	str	r1, [r7, #8]
 8003544:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivial(_ValueType1)
 8003546:	2301      	movs	r3, #1
 8003548:	75fb      	strb	r3, [r7, #23]
								 __result);
 800354a:	687a      	ldr	r2, [r7, #4]
 800354c:	68b9      	ldr	r1, [r7, #8]
 800354e:	68f8      	ldr	r0, [r7, #12]
 8003550:	f000 f861 	bl	8003616 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPtEEPT_PKS4_S7_S5_>
 8003554:	4603      	mov	r3, r0
    }
 8003556:	4618      	mov	r0, r3
 8003558:	3718      	adds	r7, #24
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}

0800355e <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPfEEPT_PKS4_S7_S5_>:
        __copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 800355e:	b580      	push	{r7, lr}
 8003560:	b086      	sub	sp, #24
 8003562:	af00      	add	r7, sp, #0
 8003564:	60f8      	str	r0, [r7, #12]
 8003566:	60b9      	str	r1, [r7, #8]
 8003568:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 800356a:	68ba      	ldr	r2, [r7, #8]
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	1ad3      	subs	r3, r2, r3
 8003570:	109b      	asrs	r3, r3, #2
 8003572:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d006      	beq.n	8003588 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPfEEPT_PKS4_S7_S5_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	009b      	lsls	r3, r3, #2
 800357e:	461a      	mov	r2, r3
 8003580:	68f9      	ldr	r1, [r7, #12]
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f003 f87f 	bl	8006686 <memmove>
	  return __result + _Num;
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	009b      	lsls	r3, r3, #2
 800358c:	687a      	ldr	r2, [r7, #4]
 800358e:	4413      	add	r3, r2
	}
 8003590:	4618      	mov	r0, r3
 8003592:	3718      	adds	r7, #24
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}

08003598 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPfEEPT_PKS4_S7_S5_>:
        __copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8003598:	b580      	push	{r7, lr}
 800359a:	b086      	sub	sp, #24
 800359c:	af00      	add	r7, sp, #0
 800359e:	60f8      	str	r0, [r7, #12]
 80035a0:	60b9      	str	r1, [r7, #8]
 80035a2:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 80035a4:	68ba      	ldr	r2, [r7, #8]
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	1ad3      	subs	r3, r2, r3
 80035aa:	109b      	asrs	r3, r3, #2
 80035ac:	617b      	str	r3, [r7, #20]
	  if (_Num)
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d00a      	beq.n	80035ca <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPfEEPT_PKS4_S7_S5_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	425b      	negs	r3, r3
 80035ba:	687a      	ldr	r2, [r7, #4]
 80035bc:	18d0      	adds	r0, r2, r3
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	009b      	lsls	r3, r3, #2
 80035c2:	461a      	mov	r2, r3
 80035c4:	68f9      	ldr	r1, [r7, #12]
 80035c6:	f003 f85e 	bl	8006686 <memmove>
	  return __result - _Num;
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	009b      	lsls	r3, r3, #2
 80035ce:	425b      	negs	r3, r3
 80035d0:	687a      	ldr	r2, [r7, #4]
 80035d2:	4413      	add	r3, r2
	}
 80035d4:	4618      	mov	r0, r3
 80035d6:	3718      	adds	r7, #24
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}

080035dc <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPtEEPT_PKS4_S7_S5_>:
        __copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80035dc:	b580      	push	{r7, lr}
 80035de:	b086      	sub	sp, #24
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	60f8      	str	r0, [r7, #12]
 80035e4:	60b9      	str	r1, [r7, #8]
 80035e6:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 80035e8:	68ba      	ldr	r2, [r7, #8]
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	1ad3      	subs	r3, r2, r3
 80035ee:	109b      	asrs	r3, r3, #2
 80035f0:	617b      	str	r3, [r7, #20]
	  if (_Num)
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d006      	beq.n	8003606 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPtEEPT_PKS4_S7_S5_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	009b      	lsls	r3, r3, #2
 80035fc:	461a      	mov	r2, r3
 80035fe:	68f9      	ldr	r1, [r7, #12]
 8003600:	6878      	ldr	r0, [r7, #4]
 8003602:	f003 f840 	bl	8006686 <memmove>
	  return __result + _Num;
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	009b      	lsls	r3, r3, #2
 800360a:	687a      	ldr	r2, [r7, #4]
 800360c:	4413      	add	r3, r2
	}
 800360e:	4618      	mov	r0, r3
 8003610:	3718      	adds	r7, #24
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}

08003616 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPtEEPT_PKS4_S7_S5_>:
        __copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8003616:	b580      	push	{r7, lr}
 8003618:	b086      	sub	sp, #24
 800361a:	af00      	add	r7, sp, #0
 800361c:	60f8      	str	r0, [r7, #12]
 800361e:	60b9      	str	r1, [r7, #8]
 8003620:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8003622:	68ba      	ldr	r2, [r7, #8]
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	1ad3      	subs	r3, r2, r3
 8003628:	109b      	asrs	r3, r3, #2
 800362a:	617b      	str	r3, [r7, #20]
	  if (_Num)
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d00a      	beq.n	8003648 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPtEEPT_PKS4_S7_S5_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	009b      	lsls	r3, r3, #2
 8003636:	425b      	negs	r3, r3
 8003638:	687a      	ldr	r2, [r7, #4]
 800363a:	18d0      	adds	r0, r2, r3
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	009b      	lsls	r3, r3, #2
 8003640:	461a      	mov	r2, r3
 8003642:	68f9      	ldr	r1, [r7, #12]
 8003644:	f003 f81f 	bl	8006686 <memmove>
	  return __result - _Num;
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	009b      	lsls	r3, r3, #2
 800364c:	425b      	negs	r3, r3
 800364e:	687a      	ldr	r2, [r7, #4]
 8003650:	4413      	add	r3, r2
	}
 8003652:	4618      	mov	r0, r3
 8003654:	3718      	adds	r7, #24
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}

0800365a <_ZN9ParameterD1Ev>:
} Parameter ;
 800365a:	b580      	push	{r7, lr}
 800365c:	b082      	sub	sp, #8
 800365e:	af00      	add	r7, sp, #0
 8003660:	6078      	str	r0, [r7, #4]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	4618      	mov	r0, r3
 8003666:	f002 ff81 	bl	800656c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	4618      	mov	r0, r3
 800366e:	3708      	adds	r7, #8
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}

08003674 <_Z41__static_initialization_and_destruction_0ii>:
}

static inline uint32_t LL_SYSTICK_IsActiveCounterFlag(void)
{
  return ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == (SysTick_CTRL_COUNTFLAG_Msk));
}
 8003674:	b580      	push	{r7, lr}
 8003676:	b08c      	sub	sp, #48	; 0x30
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
 800367c:	6039      	str	r1, [r7, #0]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2b01      	cmp	r3, #1
 8003682:	f040 80a9 	bne.w	80037d8 <_Z41__static_initialization_and_destruction_0ii+0x164>
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800368c:	4293      	cmp	r3, r2
 800368e:	f040 80a3 	bne.w	80037d8 <_Z41__static_initialization_and_destruction_0ii+0x164>
Parameter measured_sig_amp = {"Desired lock-point amplitude [mV]",500};	//the amplitude of the discriminator slope
 8003692:	f107 030c 	add.w	r3, r7, #12
 8003696:	4618      	mov	r0, r3
 8003698:	f002 ff28 	bl	80064ec <_ZNSaIcEC1Ev>
 800369c:	f107 030c 	add.w	r3, r7, #12
 80036a0:	461a      	mov	r2, r3
 80036a2:	4961      	ldr	r1, [pc, #388]	; (8003828 <_Z41__static_initialization_and_destruction_0ii+0x1b4>)
 80036a4:	4861      	ldr	r0, [pc, #388]	; (800382c <_Z41__static_initialization_and_destruction_0ii+0x1b8>)
 80036a6:	f002 ff8b 	bl	80065c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80036aa:	f107 030c 	add.w	r3, r7, #12
 80036ae:	4618      	mov	r0, r3
 80036b0:	f002 ff1d 	bl	80064ee <_ZNSaIcED1Ev>
Parameter loop_speed = {"Running loop speed (locking mode) [kHz]",12.8};
 80036b4:	f107 0310 	add.w	r3, r7, #16
 80036b8:	4618      	mov	r0, r3
 80036ba:	f002 ff17 	bl	80064ec <_ZNSaIcEC1Ev>
 80036be:	f107 0310 	add.w	r3, r7, #16
 80036c2:	461a      	mov	r2, r3
 80036c4:	495a      	ldr	r1, [pc, #360]	; (8003830 <_Z41__static_initialization_and_destruction_0ii+0x1bc>)
 80036c6:	485b      	ldr	r0, [pc, #364]	; (8003834 <_Z41__static_initialization_and_destruction_0ii+0x1c0>)
 80036c8:	f002 ff7a 	bl	80065c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80036cc:	f107 0310 	add.w	r3, r7, #16
 80036d0:	4618      	mov	r0, r3
 80036d2:	f002 ff0c 	bl	80064ee <_ZNSaIcED1Ev>
Parameter pterm_piezo = {"P (piezo)",0.01};								// proportional gain term on piezo
 80036d6:	f107 0314 	add.w	r3, r7, #20
 80036da:	4618      	mov	r0, r3
 80036dc:	f002 ff06 	bl	80064ec <_ZNSaIcEC1Ev>
 80036e0:	f107 0314 	add.w	r3, r7, #20
 80036e4:	461a      	mov	r2, r3
 80036e6:	4954      	ldr	r1, [pc, #336]	; (8003838 <_Z41__static_initialization_and_destruction_0ii+0x1c4>)
 80036e8:	4854      	ldr	r0, [pc, #336]	; (800383c <_Z41__static_initialization_and_destruction_0ii+0x1c8>)
 80036ea:	f002 ff69 	bl	80065c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80036ee:	f107 0314 	add.w	r3, r7, #20
 80036f2:	4618      	mov	r0, r3
 80036f4:	f002 fefb 	bl	80064ee <_ZNSaIcED1Ev>
Parameter itime = {"Integration time constant [us]",500};				// integration time constant in microseconds
 80036f8:	f107 0318 	add.w	r3, r7, #24
 80036fc:	4618      	mov	r0, r3
 80036fe:	f002 fef5 	bl	80064ec <_ZNSaIcEC1Ev>
 8003702:	f107 0318 	add.w	r3, r7, #24
 8003706:	461a      	mov	r2, r3
 8003708:	494d      	ldr	r1, [pc, #308]	; (8003840 <_Z41__static_initialization_and_destruction_0ii+0x1cc>)
 800370a:	484e      	ldr	r0, [pc, #312]	; (8003844 <_Z41__static_initialization_and_destruction_0ii+0x1d0>)
 800370c:	f002 ff58 	bl	80065c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8003710:	f107 0318 	add.w	r3, r7, #24
 8003714:	4618      	mov	r0, r3
 8003716:	f002 feea 	bl	80064ee <_ZNSaIcED1Ev>
Parameter stime = {"Second integration time constant [us]",1000};		// second integration time (i squared) in microseconds
 800371a:	f107 031c 	add.w	r3, r7, #28
 800371e:	4618      	mov	r0, r3
 8003720:	f002 fee4 	bl	80064ec <_ZNSaIcEC1Ev>
 8003724:	f107 031c 	add.w	r3, r7, #28
 8003728:	461a      	mov	r2, r3
 800372a:	4947      	ldr	r1, [pc, #284]	; (8003848 <_Z41__static_initialization_and_destruction_0ii+0x1d4>)
 800372c:	4847      	ldr	r0, [pc, #284]	; (800384c <_Z41__static_initialization_and_destruction_0ii+0x1d8>)
 800372e:	f002 ff47 	bl	80065c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8003732:	f107 031c 	add.w	r3, r7, #28
 8003736:	4618      	mov	r0, r3
 8003738:	f002 fed9 	bl	80064ee <_ZNSaIcED1Ev>
Parameter dtime = {"Derivative time constant [us]",2};					// derivative time constant in microseconds
 800373c:	f107 0320 	add.w	r3, r7, #32
 8003740:	4618      	mov	r0, r3
 8003742:	f002 fed3 	bl	80064ec <_ZNSaIcEC1Ev>
 8003746:	f107 0320 	add.w	r3, r7, #32
 800374a:	461a      	mov	r2, r3
 800374c:	4940      	ldr	r1, [pc, #256]	; (8003850 <_Z41__static_initialization_and_destruction_0ii+0x1dc>)
 800374e:	4841      	ldr	r0, [pc, #260]	; (8003854 <_Z41__static_initialization_and_destruction_0ii+0x1e0>)
 8003750:	f002 ff36 	bl	80065c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8003754:	f107 0320 	add.w	r3, r7, #32
 8003758:	4618      	mov	r0, r3
 800375a:	f002 fec8 	bl	80064ee <_ZNSaIcED1Ev>
Parameter alpha = {"Low-pass filter constant alpha",0.9};				//proportional gain low-pass filter constant
 800375e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003762:	4618      	mov	r0, r3
 8003764:	f002 fec2 	bl	80064ec <_ZNSaIcEC1Ev>
 8003768:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800376c:	461a      	mov	r2, r3
 800376e:	493a      	ldr	r1, [pc, #232]	; (8003858 <_Z41__static_initialization_and_destruction_0ii+0x1e4>)
 8003770:	483a      	ldr	r0, [pc, #232]	; (800385c <_Z41__static_initialization_and_destruction_0ii+0x1e8>)
 8003772:	f002 ff25 	bl	80065c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8003776:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800377a:	4618      	mov	r0, r3
 800377c:	f002 feb7 	bl	80064ee <_ZNSaIcED1Ev>
Parameter freq = {"Scan frequency [Hz]",10};							//in Hz
 8003780:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003784:	4618      	mov	r0, r3
 8003786:	f002 feb1 	bl	80064ec <_ZNSaIcEC1Ev>
 800378a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800378e:	461a      	mov	r2, r3
 8003790:	4933      	ldr	r1, [pc, #204]	; (8003860 <_Z41__static_initialization_and_destruction_0ii+0x1ec>)
 8003792:	4834      	ldr	r0, [pc, #208]	; (8003864 <_Z41__static_initialization_and_destruction_0ii+0x1f0>)
 8003794:	f002 ff14 	bl	80065c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8003798:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800379c:	4618      	mov	r0, r3
 800379e:	f002 fea6 	bl	80064ee <_ZNSaIcED1Ev>
Parameter ramp_amp = {"Scan amplitude [V]", 3};							// in V
 80037a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80037a6:	4618      	mov	r0, r3
 80037a8:	f002 fea0 	bl	80064ec <_ZNSaIcEC1Ev>
 80037ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80037b0:	461a      	mov	r2, r3
 80037b2:	492d      	ldr	r1, [pc, #180]	; (8003868 <_Z41__static_initialization_and_destruction_0ii+0x1f4>)
 80037b4:	482d      	ldr	r0, [pc, #180]	; (800386c <_Z41__static_initialization_and_destruction_0ii+0x1f8>)
 80037b6:	f002 ff03 	bl	80065c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80037ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80037be:	4618      	mov	r0, r3
 80037c0:	f002 fe95 	bl	80064ee <_ZNSaIcED1Ev>
float period = 1000000.0/freq.param_value;
 80037c4:	4b27      	ldr	r3, [pc, #156]	; (8003864 <_Z41__static_initialization_and_destruction_0ii+0x1f0>)
 80037c6:	ed93 7a06 	vldr	s14, [r3, #24]
 80037ca:	eddf 6a29 	vldr	s13, [pc, #164]	; 8003870 <_Z41__static_initialization_and_destruction_0ii+0x1fc>
 80037ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80037d2:	4b28      	ldr	r3, [pc, #160]	; (8003874 <_Z41__static_initialization_and_destruction_0ii+0x200>)
 80037d4:	edc3 7a00 	vstr	s15, [r3]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d11f      	bne.n	800381e <_Z41__static_initialization_and_destruction_0ii+0x1aa>
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d11a      	bne.n	800381e <_Z41__static_initialization_and_destruction_0ii+0x1aa>
Parameter ramp_amp = {"Scan amplitude [V]", 3};							// in V
 80037e8:	4820      	ldr	r0, [pc, #128]	; (800386c <_Z41__static_initialization_and_destruction_0ii+0x1f8>)
 80037ea:	f7ff ff36 	bl	800365a <_ZN9ParameterD1Ev>
Parameter freq = {"Scan frequency [Hz]",10};							//in Hz
 80037ee:	481d      	ldr	r0, [pc, #116]	; (8003864 <_Z41__static_initialization_and_destruction_0ii+0x1f0>)
 80037f0:	f7ff ff33 	bl	800365a <_ZN9ParameterD1Ev>
Parameter alpha = {"Low-pass filter constant alpha",0.9};				//proportional gain low-pass filter constant
 80037f4:	4819      	ldr	r0, [pc, #100]	; (800385c <_Z41__static_initialization_and_destruction_0ii+0x1e8>)
 80037f6:	f7ff ff30 	bl	800365a <_ZN9ParameterD1Ev>
Parameter dtime = {"Derivative time constant [us]",2};					// derivative time constant in microseconds
 80037fa:	4816      	ldr	r0, [pc, #88]	; (8003854 <_Z41__static_initialization_and_destruction_0ii+0x1e0>)
 80037fc:	f7ff ff2d 	bl	800365a <_ZN9ParameterD1Ev>
Parameter stime = {"Second integration time constant [us]",1000};		// second integration time (i squared) in microseconds
 8003800:	4812      	ldr	r0, [pc, #72]	; (800384c <_Z41__static_initialization_and_destruction_0ii+0x1d8>)
 8003802:	f7ff ff2a 	bl	800365a <_ZN9ParameterD1Ev>
Parameter itime = {"Integration time constant [us]",500};				// integration time constant in microseconds
 8003806:	480f      	ldr	r0, [pc, #60]	; (8003844 <_Z41__static_initialization_and_destruction_0ii+0x1d0>)
 8003808:	f7ff ff27 	bl	800365a <_ZN9ParameterD1Ev>
Parameter pterm_piezo = {"P (piezo)",0.01};								// proportional gain term on piezo
 800380c:	480b      	ldr	r0, [pc, #44]	; (800383c <_Z41__static_initialization_and_destruction_0ii+0x1c8>)
 800380e:	f7ff ff24 	bl	800365a <_ZN9ParameterD1Ev>
Parameter loop_speed = {"Running loop speed (locking mode) [kHz]",12.8};
 8003812:	4808      	ldr	r0, [pc, #32]	; (8003834 <_Z41__static_initialization_and_destruction_0ii+0x1c0>)
 8003814:	f7ff ff21 	bl	800365a <_ZN9ParameterD1Ev>
Parameter measured_sig_amp = {"Desired lock-point amplitude [mV]",500};	//the amplitude of the discriminator slope
 8003818:	4804      	ldr	r0, [pc, #16]	; (800382c <_Z41__static_initialization_and_destruction_0ii+0x1b8>)
 800381a:	f7ff ff1e 	bl	800365a <_ZN9ParameterD1Ev>
}
 800381e:	bf00      	nop
 8003820:	3730      	adds	r7, #48	; 0x30
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}
 8003826:	bf00      	nop
 8003828:	080068dc 	.word	0x080068dc
 800382c:	20000000 	.word	0x20000000
 8003830:	08006900 	.word	0x08006900
 8003834:	2000001c 	.word	0x2000001c
 8003838:	08006928 	.word	0x08006928
 800383c:	20000038 	.word	0x20000038
 8003840:	08006934 	.word	0x08006934
 8003844:	20000054 	.word	0x20000054
 8003848:	08006954 	.word	0x08006954
 800384c:	20000070 	.word	0x20000070
 8003850:	0800697c 	.word	0x0800697c
 8003854:	2000008c 	.word	0x2000008c
 8003858:	0800699c 	.word	0x0800699c
 800385c:	200000a8 	.word	0x200000a8
 8003860:	080069bc 	.word	0x080069bc
 8003864:	200000c4 	.word	0x200000c4
 8003868:	080069d0 	.word	0x080069d0
 800386c:	200000e0 	.word	0x200000e0
 8003870:	49742400 	.word	0x49742400
 8003874:	200001cc 	.word	0x200001cc

08003878 <_GLOBAL__sub_I_t>:
 8003878:	b580      	push	{r7, lr}
 800387a:	af00      	add	r7, sp, #0
 800387c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003880:	2001      	movs	r0, #1
 8003882:	f7ff fef7 	bl	8003674 <_Z41__static_initialization_and_destruction_0ii>
 8003886:	bd80      	pop	{r7, pc}

08003888 <_GLOBAL__sub_D_t>:
 8003888:	b580      	push	{r7, lr}
 800388a:	af00      	add	r7, sp, #0
 800388c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003890:	2000      	movs	r0, #0
 8003892:	f7ff feef 	bl	8003674 <_Z41__static_initialization_and_destruction_0ii>
 8003896:	bd80      	pop	{r7, pc}

08003898 <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b082      	sub	sp, #8
 800389c:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 800389e:	463b      	mov	r3, r7
 80038a0:	2200      	movs	r2, #0
 80038a2:	601a      	str	r2, [r3, #0]
 80038a4:	605a      	str	r2, [r3, #4]

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80038a6:	4b0f      	ldr	r3, [pc, #60]	; (80038e4 <MX_DAC_Init+0x4c>)
 80038a8:	4a0f      	ldr	r2, [pc, #60]	; (80038e8 <MX_DAC_Init+0x50>)
 80038aa:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80038ac:	480d      	ldr	r0, [pc, #52]	; (80038e4 <MX_DAC_Init+0x4c>)
 80038ae:	f001 f872 	bl	8004996 <HAL_DAC_Init>
 80038b2:	4603      	mov	r3, r0
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d001      	beq.n	80038bc <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80038b8:	f000 f93a 	bl	8003b30 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80038bc:	2300      	movs	r3, #0
 80038be:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80038c0:	2300      	movs	r3, #0
 80038c2:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80038c4:	463b      	mov	r3, r7
 80038c6:	2200      	movs	r2, #0
 80038c8:	4619      	mov	r1, r3
 80038ca:	4806      	ldr	r0, [pc, #24]	; (80038e4 <MX_DAC_Init+0x4c>)
 80038cc:	f001 f885 	bl	80049da <HAL_DAC_ConfigChannel>
 80038d0:	4603      	mov	r3, r0
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d001      	beq.n	80038da <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80038d6:	f000 f92b 	bl	8003b30 <Error_Handler>
  }

}
 80038da:	bf00      	nop
 80038dc:	3708      	adds	r7, #8
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}
 80038e2:	bf00      	nop
 80038e4:	20000288 	.word	0x20000288
 80038e8:	40007400 	.word	0x40007400

080038ec <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b08a      	sub	sp, #40	; 0x28
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038f4:	f107 0314 	add.w	r3, r7, #20
 80038f8:	2200      	movs	r2, #0
 80038fa:	601a      	str	r2, [r3, #0]
 80038fc:	605a      	str	r2, [r3, #4]
 80038fe:	609a      	str	r2, [r3, #8]
 8003900:	60da      	str	r2, [r3, #12]
 8003902:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a15      	ldr	r2, [pc, #84]	; (8003960 <HAL_DAC_MspInit+0x74>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d123      	bne.n	8003956 <HAL_DAC_MspInit+0x6a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800390e:	4b15      	ldr	r3, [pc, #84]	; (8003964 <HAL_DAC_MspInit+0x78>)
 8003910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003912:	4a14      	ldr	r2, [pc, #80]	; (8003964 <HAL_DAC_MspInit+0x78>)
 8003914:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003918:	6413      	str	r3, [r2, #64]	; 0x40
 800391a:	4b12      	ldr	r3, [pc, #72]	; (8003964 <HAL_DAC_MspInit+0x78>)
 800391c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800391e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003922:	613b      	str	r3, [r7, #16]
 8003924:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003926:	4b0f      	ldr	r3, [pc, #60]	; (8003964 <HAL_DAC_MspInit+0x78>)
 8003928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800392a:	4a0e      	ldr	r2, [pc, #56]	; (8003964 <HAL_DAC_MspInit+0x78>)
 800392c:	f043 0301 	orr.w	r3, r3, #1
 8003930:	6313      	str	r3, [r2, #48]	; 0x30
 8003932:	4b0c      	ldr	r3, [pc, #48]	; (8003964 <HAL_DAC_MspInit+0x78>)
 8003934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003936:	f003 0301 	and.w	r3, r3, #1
 800393a:	60fb      	str	r3, [r7, #12]
 800393c:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800393e:	2310      	movs	r3, #16
 8003940:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003942:	2303      	movs	r3, #3
 8003944:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003946:	2300      	movs	r3, #0
 8003948:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800394a:	f107 0314 	add.w	r3, r7, #20
 800394e:	4619      	mov	r1, r3
 8003950:	4805      	ldr	r0, [pc, #20]	; (8003968 <HAL_DAC_MspInit+0x7c>)
 8003952:	f001 fc07 	bl	8005164 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 8003956:	bf00      	nop
 8003958:	3728      	adds	r7, #40	; 0x28
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}
 800395e:	bf00      	nop
 8003960:	40007400 	.word	0x40007400
 8003964:	40023800 	.word	0x40023800
 8003968:	40020000 	.word	0x40020000

0800396c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b082      	sub	sp, #8
 8003970:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003972:	4b0c      	ldr	r3, [pc, #48]	; (80039a4 <MX_DMA_Init+0x38>)
 8003974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003976:	4a0b      	ldr	r2, [pc, #44]	; (80039a4 <MX_DMA_Init+0x38>)
 8003978:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800397c:	6313      	str	r3, [r2, #48]	; 0x30
 800397e:	4b09      	ldr	r3, [pc, #36]	; (80039a4 <MX_DMA_Init+0x38>)
 8003980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003982:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003986:	607b      	str	r3, [r7, #4]
 8003988:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800398a:	2200      	movs	r2, #0
 800398c:	2100      	movs	r1, #0
 800398e:	2038      	movs	r0, #56	; 0x38
 8003990:	f000 ffcb 	bl	800492a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8003994:	2038      	movs	r0, #56	; 0x38
 8003996:	f000 ffe4 	bl	8004962 <HAL_NVIC_EnableIRQ>

}
 800399a:	bf00      	nop
 800399c:	3708      	adds	r7, #8
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}
 80039a2:	bf00      	nop
 80039a4:	40023800 	.word	0x40023800

080039a8 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b088      	sub	sp, #32
 80039ac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039ae:	f107 030c 	add.w	r3, r7, #12
 80039b2:	2200      	movs	r2, #0
 80039b4:	601a      	str	r2, [r3, #0]
 80039b6:	605a      	str	r2, [r3, #4]
 80039b8:	609a      	str	r2, [r3, #8]
 80039ba:	60da      	str	r2, [r3, #12]
 80039bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80039be:	4b21      	ldr	r3, [pc, #132]	; (8003a44 <MX_GPIO_Init+0x9c>)
 80039c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c2:	4a20      	ldr	r2, [pc, #128]	; (8003a44 <MX_GPIO_Init+0x9c>)
 80039c4:	f043 0301 	orr.w	r3, r3, #1
 80039c8:	6313      	str	r3, [r2, #48]	; 0x30
 80039ca:	4b1e      	ldr	r3, [pc, #120]	; (8003a44 <MX_GPIO_Init+0x9c>)
 80039cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ce:	f003 0301 	and.w	r3, r3, #1
 80039d2:	60bb      	str	r3, [r7, #8]
 80039d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80039d6:	4b1b      	ldr	r3, [pc, #108]	; (8003a44 <MX_GPIO_Init+0x9c>)
 80039d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039da:	4a1a      	ldr	r2, [pc, #104]	; (8003a44 <MX_GPIO_Init+0x9c>)
 80039dc:	f043 0302 	orr.w	r3, r3, #2
 80039e0:	6313      	str	r3, [r2, #48]	; 0x30
 80039e2:	4b18      	ldr	r3, [pc, #96]	; (8003a44 <MX_GPIO_Init+0x9c>)
 80039e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039e6:	f003 0302 	and.w	r3, r3, #2
 80039ea:	607b      	str	r3, [r7, #4]
 80039ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 80039ee:	2200      	movs	r2, #0
 80039f0:	2108      	movs	r1, #8
 80039f2:	4815      	ldr	r0, [pc, #84]	; (8003a48 <MX_GPIO_Init+0xa0>)
 80039f4:	f001 fd60 	bl	80054b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80039f8:	2200      	movs	r2, #0
 80039fa:	2101      	movs	r1, #1
 80039fc:	4813      	ldr	r0, [pc, #76]	; (8003a4c <MX_GPIO_Init+0xa4>)
 80039fe:	f001 fd5b 	bl	80054b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003a02:	2308      	movs	r3, #8
 8003a04:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a06:	2301      	movs	r3, #1
 8003a08:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a12:	f107 030c 	add.w	r3, r7, #12
 8003a16:	4619      	mov	r1, r3
 8003a18:	480b      	ldr	r0, [pc, #44]	; (8003a48 <MX_GPIO_Init+0xa0>)
 8003a1a:	f001 fba3 	bl	8005164 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a22:	2301      	movs	r3, #1
 8003a24:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a26:	2300      	movs	r3, #0
 8003a28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a2e:	f107 030c 	add.w	r3, r7, #12
 8003a32:	4619      	mov	r1, r3
 8003a34:	4805      	ldr	r0, [pc, #20]	; (8003a4c <MX_GPIO_Init+0xa4>)
 8003a36:	f001 fb95 	bl	8005164 <HAL_GPIO_Init>

}
 8003a3a:	bf00      	nop
 8003a3c:	3720      	adds	r7, #32
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	bf00      	nop
 8003a44:	40023800 	.word	0x40023800
 8003a48:	40020000 	.word	0x40020000
 8003a4c:	40020400 	.word	0x40020400

08003a50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003a54:	f000 fa03 	bl	8003e5e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003a58:	f000 f80e 	bl	8003a78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003a5c:	f7ff ffa4 	bl	80039a8 <MX_GPIO_Init>
  MX_DMA_Init();
 8003a60:	f7ff ff84 	bl	800396c <MX_DMA_Init>
  MX_ADC1_Init();
 8003a64:	f7fd f9fe 	bl	8000e64 <MX_ADC1_Init>
  MX_DAC_Init();
 8003a68:	f7ff ff16 	bl	8003898 <MX_DAC_Init>
  MX_SPI1_Init();
 8003a6c:	f000 f868 	bl	8003b40 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  alt_main();
 8003a70:	f7fd fafe 	bl	8001070 <alt_main>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003a74:	e7fe      	b.n	8003a74 <main+0x24>
	...

08003a78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b094      	sub	sp, #80	; 0x50
 8003a7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003a7e:	f107 0320 	add.w	r3, r7, #32
 8003a82:	2230      	movs	r2, #48	; 0x30
 8003a84:	2100      	movs	r1, #0
 8003a86:	4618      	mov	r0, r3
 8003a88:	f002 fe16 	bl	80066b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003a8c:	f107 030c 	add.w	r3, r7, #12
 8003a90:	2200      	movs	r2, #0
 8003a92:	601a      	str	r2, [r3, #0]
 8003a94:	605a      	str	r2, [r3, #4]
 8003a96:	609a      	str	r2, [r3, #8]
 8003a98:	60da      	str	r2, [r3, #12]
 8003a9a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a9c:	4b22      	ldr	r3, [pc, #136]	; (8003b28 <SystemClock_Config+0xb0>)
 8003a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa0:	4a21      	ldr	r2, [pc, #132]	; (8003b28 <SystemClock_Config+0xb0>)
 8003aa2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003aa6:	6413      	str	r3, [r2, #64]	; 0x40
 8003aa8:	4b1f      	ldr	r3, [pc, #124]	; (8003b28 <SystemClock_Config+0xb0>)
 8003aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ab0:	60bb      	str	r3, [r7, #8]
 8003ab2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8003ab4:	4b1d      	ldr	r3, [pc, #116]	; (8003b2c <SystemClock_Config+0xb4>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003abc:	4a1b      	ldr	r2, [pc, #108]	; (8003b2c <SystemClock_Config+0xb4>)
 8003abe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ac2:	6013      	str	r3, [r2, #0]
 8003ac4:	4b19      	ldr	r3, [pc, #100]	; (8003b2c <SystemClock_Config+0xb4>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003acc:	607b      	str	r3, [r7, #4]
 8003ace:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003ad0:	2302      	movs	r3, #2
 8003ad2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003ad8:	2310      	movs	r3, #16
 8003ada:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003adc:	2300      	movs	r3, #0
 8003ade:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003ae0:	f107 0320 	add.w	r3, r7, #32
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f001 fd01 	bl	80054ec <HAL_RCC_OscConfig>
 8003aea:	4603      	mov	r3, r0
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d001      	beq.n	8003af4 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8003af0:	f000 f81e 	bl	8003b30 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003af4:	230f      	movs	r3, #15
 8003af6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8003af8:	2300      	movs	r3, #0
 8003afa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003afc:	2300      	movs	r3, #0
 8003afe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003b00:	2300      	movs	r3, #0
 8003b02:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003b04:	2300      	movs	r3, #0
 8003b06:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003b08:	f107 030c 	add.w	r3, r7, #12
 8003b0c:	2100      	movs	r1, #0
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f001 ff90 	bl	8005a34 <HAL_RCC_ClockConfig>
 8003b14:	4603      	mov	r3, r0
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d001      	beq.n	8003b1e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8003b1a:	f000 f809 	bl	8003b30 <Error_Handler>
  }
}
 8003b1e:	bf00      	nop
 8003b20:	3750      	adds	r7, #80	; 0x50
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}
 8003b26:	bf00      	nop
 8003b28:	40023800 	.word	0x40023800
 8003b2c:	40007000 	.word	0x40007000

08003b30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003b30:	b480      	push	{r7}
 8003b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003b34:	bf00      	nop
 8003b36:	46bd      	mov	sp, r7
 8003b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3c:	4770      	bx	lr
	...

08003b40 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8003b44:	4b1b      	ldr	r3, [pc, #108]	; (8003bb4 <MX_SPI1_Init+0x74>)
 8003b46:	4a1c      	ldr	r2, [pc, #112]	; (8003bb8 <MX_SPI1_Init+0x78>)
 8003b48:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003b4a:	4b1a      	ldr	r3, [pc, #104]	; (8003bb4 <MX_SPI1_Init+0x74>)
 8003b4c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003b50:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003b52:	4b18      	ldr	r3, [pc, #96]	; (8003bb4 <MX_SPI1_Init+0x74>)
 8003b54:	2200      	movs	r2, #0
 8003b56:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8003b58:	4b16      	ldr	r3, [pc, #88]	; (8003bb4 <MX_SPI1_Init+0x74>)
 8003b5a:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8003b5e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003b60:	4b14      	ldr	r3, [pc, #80]	; (8003bb4 <MX_SPI1_Init+0x74>)
 8003b62:	2200      	movs	r2, #0
 8003b64:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8003b66:	4b13      	ldr	r3, [pc, #76]	; (8003bb4 <MX_SPI1_Init+0x74>)
 8003b68:	2201      	movs	r2, #1
 8003b6a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003b6c:	4b11      	ldr	r3, [pc, #68]	; (8003bb4 <MX_SPI1_Init+0x74>)
 8003b6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b72:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003b74:	4b0f      	ldr	r3, [pc, #60]	; (8003bb4 <MX_SPI1_Init+0x74>)
 8003b76:	2200      	movs	r2, #0
 8003b78:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003b7a:	4b0e      	ldr	r3, [pc, #56]	; (8003bb4 <MX_SPI1_Init+0x74>)
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003b80:	4b0c      	ldr	r3, [pc, #48]	; (8003bb4 <MX_SPI1_Init+0x74>)
 8003b82:	2200      	movs	r2, #0
 8003b84:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b86:	4b0b      	ldr	r3, [pc, #44]	; (8003bb4 <MX_SPI1_Init+0x74>)
 8003b88:	2200      	movs	r2, #0
 8003b8a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003b8c:	4b09      	ldr	r3, [pc, #36]	; (8003bb4 <MX_SPI1_Init+0x74>)
 8003b8e:	2207      	movs	r2, #7
 8003b90:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003b92:	4b08      	ldr	r3, [pc, #32]	; (8003bb4 <MX_SPI1_Init+0x74>)
 8003b94:	2200      	movs	r2, #0
 8003b96:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8003b98:	4b06      	ldr	r3, [pc, #24]	; (8003bb4 <MX_SPI1_Init+0x74>)
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003b9e:	4805      	ldr	r0, [pc, #20]	; (8003bb4 <MX_SPI1_Init+0x74>)
 8003ba0:	f002 f8e6 	bl	8005d70 <HAL_SPI_Init>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d001      	beq.n	8003bae <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8003baa:	f7ff ffc1 	bl	8003b30 <Error_Handler>
  }

}
 8003bae:	bf00      	nop
 8003bb0:	bd80      	pop	{r7, pc}
 8003bb2:	bf00      	nop
 8003bb4:	2000029c 	.word	0x2000029c
 8003bb8:	40013000 	.word	0x40013000

08003bbc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b08a      	sub	sp, #40	; 0x28
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bc4:	f107 0314 	add.w	r3, r7, #20
 8003bc8:	2200      	movs	r2, #0
 8003bca:	601a      	str	r2, [r3, #0]
 8003bcc:	605a      	str	r2, [r3, #4]
 8003bce:	609a      	str	r2, [r3, #8]
 8003bd0:	60da      	str	r2, [r3, #12]
 8003bd2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a25      	ldr	r2, [pc, #148]	; (8003c70 <HAL_SPI_MspInit+0xb4>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d143      	bne.n	8003c66 <HAL_SPI_MspInit+0xaa>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003bde:	4b25      	ldr	r3, [pc, #148]	; (8003c74 <HAL_SPI_MspInit+0xb8>)
 8003be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003be2:	4a24      	ldr	r2, [pc, #144]	; (8003c74 <HAL_SPI_MspInit+0xb8>)
 8003be4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003be8:	6453      	str	r3, [r2, #68]	; 0x44
 8003bea:	4b22      	ldr	r3, [pc, #136]	; (8003c74 <HAL_SPI_MspInit+0xb8>)
 8003bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003bf2:	613b      	str	r3, [r7, #16]
 8003bf4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bf6:	4b1f      	ldr	r3, [pc, #124]	; (8003c74 <HAL_SPI_MspInit+0xb8>)
 8003bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bfa:	4a1e      	ldr	r2, [pc, #120]	; (8003c74 <HAL_SPI_MspInit+0xb8>)
 8003bfc:	f043 0301 	orr.w	r3, r3, #1
 8003c00:	6313      	str	r3, [r2, #48]	; 0x30
 8003c02:	4b1c      	ldr	r3, [pc, #112]	; (8003c74 <HAL_SPI_MspInit+0xb8>)
 8003c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c06:	f003 0301 	and.w	r3, r3, #1
 8003c0a:	60fb      	str	r3, [r7, #12]
 8003c0c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c0e:	4b19      	ldr	r3, [pc, #100]	; (8003c74 <HAL_SPI_MspInit+0xb8>)
 8003c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c12:	4a18      	ldr	r2, [pc, #96]	; (8003c74 <HAL_SPI_MspInit+0xb8>)
 8003c14:	f043 0302 	orr.w	r3, r3, #2
 8003c18:	6313      	str	r3, [r2, #48]	; 0x30
 8003c1a:	4b16      	ldr	r3, [pc, #88]	; (8003c74 <HAL_SPI_MspInit+0xb8>)
 8003c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c1e:	f003 0302 	and.w	r3, r3, #2
 8003c22:	60bb      	str	r3, [r7, #8]
 8003c24:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003c26:	2380      	movs	r3, #128	; 0x80
 8003c28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c2a:	2302      	movs	r3, #2
 8003c2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c32:	2303      	movs	r3, #3
 8003c34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003c36:	2305      	movs	r3, #5
 8003c38:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c3a:	f107 0314 	add.w	r3, r7, #20
 8003c3e:	4619      	mov	r1, r3
 8003c40:	480d      	ldr	r0, [pc, #52]	; (8003c78 <HAL_SPI_MspInit+0xbc>)
 8003c42:	f001 fa8f 	bl	8005164 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8003c46:	2318      	movs	r3, #24
 8003c48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c4a:	2302      	movs	r3, #2
 8003c4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c52:	2303      	movs	r3, #3
 8003c54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003c56:	2305      	movs	r3, #5
 8003c58:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c5a:	f107 0314 	add.w	r3, r7, #20
 8003c5e:	4619      	mov	r1, r3
 8003c60:	4806      	ldr	r0, [pc, #24]	; (8003c7c <HAL_SPI_MspInit+0xc0>)
 8003c62:	f001 fa7f 	bl	8005164 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8003c66:	bf00      	nop
 8003c68:	3728      	adds	r7, #40	; 0x28
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}
 8003c6e:	bf00      	nop
 8003c70:	40013000 	.word	0x40013000
 8003c74:	40023800 	.word	0x40023800
 8003c78:	40020000 	.word	0x40020000
 8003c7c:	40020400 	.word	0x40020400

08003c80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b083      	sub	sp, #12
 8003c84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8003c86:	4b0f      	ldr	r3, [pc, #60]	; (8003cc4 <HAL_MspInit+0x44>)
 8003c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c8a:	4a0e      	ldr	r2, [pc, #56]	; (8003cc4 <HAL_MspInit+0x44>)
 8003c8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c90:	6413      	str	r3, [r2, #64]	; 0x40
 8003c92:	4b0c      	ldr	r3, [pc, #48]	; (8003cc4 <HAL_MspInit+0x44>)
 8003c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c9a:	607b      	str	r3, [r7, #4]
 8003c9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c9e:	4b09      	ldr	r3, [pc, #36]	; (8003cc4 <HAL_MspInit+0x44>)
 8003ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ca2:	4a08      	ldr	r2, [pc, #32]	; (8003cc4 <HAL_MspInit+0x44>)
 8003ca4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ca8:	6453      	str	r3, [r2, #68]	; 0x44
 8003caa:	4b06      	ldr	r3, [pc, #24]	; (8003cc4 <HAL_MspInit+0x44>)
 8003cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cb2:	603b      	str	r3, [r7, #0]
 8003cb4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003cb6:	bf00      	nop
 8003cb8:	370c      	adds	r7, #12
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc0:	4770      	bx	lr
 8003cc2:	bf00      	nop
 8003cc4:	40023800 	.word	0x40023800

08003cc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003ccc:	bf00      	nop
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd4:	4770      	bx	lr

08003cd6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003cd6:	b480      	push	{r7}
 8003cd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003cda:	e7fe      	b.n	8003cda <HardFault_Handler+0x4>

08003cdc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003ce0:	e7fe      	b.n	8003ce0 <MemManage_Handler+0x4>

08003ce2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003ce2:	b480      	push	{r7}
 8003ce4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003ce6:	e7fe      	b.n	8003ce6 <BusFault_Handler+0x4>

08003ce8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003cec:	e7fe      	b.n	8003cec <UsageFault_Handler+0x4>

08003cee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003cee:	b480      	push	{r7}
 8003cf0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003cf2:	bf00      	nop
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr

08003cfc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003d00:	bf00      	nop
 8003d02:	46bd      	mov	sp, r7
 8003d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d08:	4770      	bx	lr

08003d0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003d0a:	b480      	push	{r7}
 8003d0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003d0e:	bf00      	nop
 8003d10:	46bd      	mov	sp, r7
 8003d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d16:	4770      	bx	lr

08003d18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003d1c:	f000 f8dc 	bl	8003ed8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003d20:	bf00      	nop
 8003d22:	bd80      	pop	{r7, pc}

08003d24 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003d28:	4802      	ldr	r0, [pc, #8]	; (8003d34 <DMA2_Stream0_IRQHandler+0x10>)
 8003d2a:	f000 ffb3 	bl	8004c94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003d2e:	bf00      	nop
 8003d30:	bd80      	pop	{r7, pc}
 8003d32:	bf00      	nop
 8003d34:	20000228 	.word	0x20000228

08003d38 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	af00      	add	r7, sp, #0
	return 1;
 8003d3c:	2301      	movs	r3, #1
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	46bd      	mov	sp, r7
 8003d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d46:	4770      	bx	lr

08003d48 <_kill>:

int _kill(int pid, int sig)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b082      	sub	sp, #8
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
 8003d50:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003d52:	f002 fc53 	bl	80065fc <__errno>
 8003d56:	4602      	mov	r2, r0
 8003d58:	2316      	movs	r3, #22
 8003d5a:	6013      	str	r3, [r2, #0]
	return -1;
 8003d5c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	3708      	adds	r7, #8
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}

08003d68 <_exit>:

void _exit (int status)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b082      	sub	sp, #8
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003d70:	f04f 31ff 	mov.w	r1, #4294967295
 8003d74:	6878      	ldr	r0, [r7, #4]
 8003d76:	f7ff ffe7 	bl	8003d48 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003d7a:	e7fe      	b.n	8003d7a <_exit+0x12>

08003d7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b086      	sub	sp, #24
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003d84:	4a14      	ldr	r2, [pc, #80]	; (8003dd8 <_sbrk+0x5c>)
 8003d86:	4b15      	ldr	r3, [pc, #84]	; (8003ddc <_sbrk+0x60>)
 8003d88:	1ad3      	subs	r3, r2, r3
 8003d8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003d90:	4b13      	ldr	r3, [pc, #76]	; (8003de0 <_sbrk+0x64>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d102      	bne.n	8003d9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003d98:	4b11      	ldr	r3, [pc, #68]	; (8003de0 <_sbrk+0x64>)
 8003d9a:	4a12      	ldr	r2, [pc, #72]	; (8003de4 <_sbrk+0x68>)
 8003d9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003d9e:	4b10      	ldr	r3, [pc, #64]	; (8003de0 <_sbrk+0x64>)
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	4413      	add	r3, r2
 8003da6:	693a      	ldr	r2, [r7, #16]
 8003da8:	429a      	cmp	r2, r3
 8003daa:	d207      	bcs.n	8003dbc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003dac:	f002 fc26 	bl	80065fc <__errno>
 8003db0:	4602      	mov	r2, r0
 8003db2:	230c      	movs	r3, #12
 8003db4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8003db6:	f04f 33ff 	mov.w	r3, #4294967295
 8003dba:	e009      	b.n	8003dd0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003dbc:	4b08      	ldr	r3, [pc, #32]	; (8003de0 <_sbrk+0x64>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003dc2:	4b07      	ldr	r3, [pc, #28]	; (8003de0 <_sbrk+0x64>)
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	4413      	add	r3, r2
 8003dca:	4a05      	ldr	r2, [pc, #20]	; (8003de0 <_sbrk+0x64>)
 8003dcc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003dce:	68fb      	ldr	r3, [r7, #12]
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	3718      	adds	r7, #24
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}
 8003dd8:	20050000 	.word	0x20050000
 8003ddc:	00000400 	.word	0x00000400
 8003de0:	200001d0 	.word	0x200001d0
 8003de4:	20000308 	.word	0x20000308

08003de8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003de8:	b480      	push	{r7}
 8003dea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003dec:	4b06      	ldr	r3, [pc, #24]	; (8003e08 <SystemInit+0x20>)
 8003dee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003df2:	4a05      	ldr	r2, [pc, #20]	; (8003e08 <SystemInit+0x20>)
 8003df4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003df8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003dfc:	bf00      	nop
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e04:	4770      	bx	lr
 8003e06:	bf00      	nop
 8003e08:	e000ed00 	.word	0xe000ed00

08003e0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003e0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003e44 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003e10:	480d      	ldr	r0, [pc, #52]	; (8003e48 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003e12:	490e      	ldr	r1, [pc, #56]	; (8003e4c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003e14:	4a0e      	ldr	r2, [pc, #56]	; (8003e50 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003e16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003e18:	e002      	b.n	8003e20 <LoopCopyDataInit>

08003e1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003e1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003e1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003e1e:	3304      	adds	r3, #4

08003e20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003e20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003e22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003e24:	d3f9      	bcc.n	8003e1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003e26:	4a0b      	ldr	r2, [pc, #44]	; (8003e54 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003e28:	4c0b      	ldr	r4, [pc, #44]	; (8003e58 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003e2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003e2c:	e001      	b.n	8003e32 <LoopFillZerobss>

08003e2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003e2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003e30:	3204      	adds	r2, #4

08003e32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003e32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003e34:	d3fb      	bcc.n	8003e2e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003e36:	f7ff ffd7 	bl	8003de8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003e3a:	f002 fbe5 	bl	8006608 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003e3e:	f7ff fe07 	bl	8003a50 <main>
  bx  lr    
 8003e42:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003e44:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8003e48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003e4c:	20000178 	.word	0x20000178
  ldr r2, =_sidata
 8003e50:	08006a58 	.word	0x08006a58
  ldr r2, =_sbss
 8003e54:	20000178 	.word	0x20000178
  ldr r4, =_ebss
 8003e58:	20000308 	.word	0x20000308

08003e5c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003e5c:	e7fe      	b.n	8003e5c <ADC_IRQHandler>

08003e5e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003e5e:	b580      	push	{r7, lr}
 8003e60:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003e62:	2003      	movs	r0, #3
 8003e64:	f000 fd56 	bl	8004914 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003e68:	2000      	movs	r0, #0
 8003e6a:	f000 f805 	bl	8003e78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003e6e:	f7ff ff07 	bl	8003c80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003e72:	2300      	movs	r3, #0
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	bd80      	pop	{r7, pc}

08003e78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b082      	sub	sp, #8
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003e80:	4b12      	ldr	r3, [pc, #72]	; (8003ecc <HAL_InitTick+0x54>)
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	4b12      	ldr	r3, [pc, #72]	; (8003ed0 <HAL_InitTick+0x58>)
 8003e86:	781b      	ldrb	r3, [r3, #0]
 8003e88:	4619      	mov	r1, r3
 8003e8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003e8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003e92:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e96:	4618      	mov	r0, r3
 8003e98:	f000 fd71 	bl	800497e <HAL_SYSTICK_Config>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d001      	beq.n	8003ea6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e00e      	b.n	8003ec4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2b0f      	cmp	r3, #15
 8003eaa:	d80a      	bhi.n	8003ec2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003eac:	2200      	movs	r2, #0
 8003eae:	6879      	ldr	r1, [r7, #4]
 8003eb0:	f04f 30ff 	mov.w	r0, #4294967295
 8003eb4:	f000 fd39 	bl	800492a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003eb8:	4a06      	ldr	r2, [pc, #24]	; (8003ed4 <HAL_InitTick+0x5c>)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	e000      	b.n	8003ec4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	3708      	adds	r7, #8
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}
 8003ecc:	20000108 	.word	0x20000108
 8003ed0:	20000110 	.word	0x20000110
 8003ed4:	2000010c 	.word	0x2000010c

08003ed8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003edc:	4b06      	ldr	r3, [pc, #24]	; (8003ef8 <HAL_IncTick+0x20>)
 8003ede:	781b      	ldrb	r3, [r3, #0]
 8003ee0:	461a      	mov	r2, r3
 8003ee2:	4b06      	ldr	r3, [pc, #24]	; (8003efc <HAL_IncTick+0x24>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4413      	add	r3, r2
 8003ee8:	4a04      	ldr	r2, [pc, #16]	; (8003efc <HAL_IncTick+0x24>)
 8003eea:	6013      	str	r3, [r2, #0]
}
 8003eec:	bf00      	nop
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef4:	4770      	bx	lr
 8003ef6:	bf00      	nop
 8003ef8:	20000110 	.word	0x20000110
 8003efc:	20000300 	.word	0x20000300

08003f00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003f00:	b480      	push	{r7}
 8003f02:	af00      	add	r7, sp, #0
  return uwTick;
 8003f04:	4b03      	ldr	r3, [pc, #12]	; (8003f14 <HAL_GetTick+0x14>)
 8003f06:	681b      	ldr	r3, [r3, #0]
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f10:	4770      	bx	lr
 8003f12:	bf00      	nop
 8003f14:	20000300 	.word	0x20000300

08003f18 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b084      	sub	sp, #16
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f20:	2300      	movs	r3, #0
 8003f22:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d101      	bne.n	8003f2e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e031      	b.n	8003f92 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d109      	bne.n	8003f4a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f7fc fff4 	bl	8000f24 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2200      	movs	r2, #0
 8003f46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f4e:	f003 0310 	and.w	r3, r3, #16
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d116      	bne.n	8003f84 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f5a:	4b10      	ldr	r3, [pc, #64]	; (8003f9c <HAL_ADC_Init+0x84>)
 8003f5c:	4013      	ands	r3, r2
 8003f5e:	f043 0202 	orr.w	r2, r3, #2
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f000 fa88 	bl	800447c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f76:	f023 0303 	bic.w	r3, r3, #3
 8003f7a:	f043 0201 	orr.w	r2, r3, #1
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	641a      	str	r2, [r3, #64]	; 0x40
 8003f82:	e001      	b.n	8003f88 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003f84:	2301      	movs	r3, #1
 8003f86:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003f90:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	3710      	adds	r7, #16
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}
 8003f9a:	bf00      	nop
 8003f9c:	ffffeefd 	.word	0xffffeefd

08003fa0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b086      	sub	sp, #24
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	60f8      	str	r0, [r7, #12]
 8003fa8:	60b9      	str	r1, [r7, #8]
 8003faa:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 8003fac:	2300      	movs	r3, #0
 8003fae:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fb6:	2b01      	cmp	r3, #1
 8003fb8:	d101      	bne.n	8003fbe <HAL_ADC_Start_DMA+0x1e>
 8003fba:	2302      	movs	r3, #2
 8003fbc:	e0d4      	b.n	8004168 <HAL_ADC_Start_DMA+0x1c8>
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	2201      	movs	r2, #1
 8003fc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	f003 0301 	and.w	r3, r3, #1
 8003fd0:	2b01      	cmp	r3, #1
 8003fd2:	d018      	beq.n	8004006 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	689a      	ldr	r2, [r3, #8]
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f042 0201 	orr.w	r2, r2, #1
 8003fe2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8003fe4:	4b62      	ldr	r3, [pc, #392]	; (8004170 <HAL_ADC_Start_DMA+0x1d0>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a62      	ldr	r2, [pc, #392]	; (8004174 <HAL_ADC_Start_DMA+0x1d4>)
 8003fea:	fba2 2303 	umull	r2, r3, r2, r3
 8003fee:	0c9a      	lsrs	r2, r3, #18
 8003ff0:	4613      	mov	r3, r2
 8003ff2:	005b      	lsls	r3, r3, #1
 8003ff4:	4413      	add	r3, r2
 8003ff6:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8003ff8:	e002      	b.n	8004000 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	3b01      	subs	r3, #1
 8003ffe:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d1f9      	bne.n	8003ffa <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	f003 0301 	and.w	r3, r3, #1
 8004010:	2b01      	cmp	r3, #1
 8004012:	f040 809c 	bne.w	800414e <HAL_ADC_Start_DMA+0x1ae>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800401a:	4b57      	ldr	r3, [pc, #348]	; (8004178 <HAL_ADC_Start_DMA+0x1d8>)
 800401c:	4013      	ands	r3, r2
 800401e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004030:	2b00      	cmp	r3, #0
 8004032:	d007      	beq.n	8004044 <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004038:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800403c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004048:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800404c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004050:	d106      	bne.n	8004060 <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004056:	f023 0206 	bic.w	r2, r3, #6
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	645a      	str	r2, [r3, #68]	; 0x44
 800405e:	e002      	b.n	8004066 <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	2200      	movs	r2, #0
 8004064:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	2200      	movs	r2, #0
 800406a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004072:	4a42      	ldr	r2, [pc, #264]	; (800417c <HAL_ADC_Start_DMA+0x1dc>)
 8004074:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800407a:	4a41      	ldr	r2, [pc, #260]	; (8004180 <HAL_ADC_Start_DMA+0x1e0>)
 800407c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004082:	4a40      	ldr	r2, [pc, #256]	; (8004184 <HAL_ADC_Start_DMA+0x1e4>)
 8004084:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800408e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	685a      	ldr	r2, [r3, #4]
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800409e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	689a      	ldr	r2, [r3, #8]
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040ae:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	334c      	adds	r3, #76	; 0x4c
 80040ba:	4619      	mov	r1, r3
 80040bc:	68ba      	ldr	r2, [r7, #8]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	f000 fd88 	bl	8004bd4 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80040c4:	4b30      	ldr	r3, [pc, #192]	; (8004188 <HAL_ADC_Start_DMA+0x1e8>)
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	f003 031f 	and.w	r3, r3, #31
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d10f      	bne.n	80040f0 <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	689b      	ldr	r3, [r3, #8]
 80040d6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d143      	bne.n	8004166 <HAL_ADC_Start_DMA+0x1c6>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	689a      	ldr	r2, [r3, #8]
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80040ec:	609a      	str	r2, [r3, #8]
 80040ee:	e03a      	b.n	8004166 <HAL_ADC_Start_DMA+0x1c6>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a25      	ldr	r2, [pc, #148]	; (800418c <HAL_ADC_Start_DMA+0x1ec>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d10e      	bne.n	8004118 <HAL_ADC_Start_DMA+0x178>
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004104:	2b00      	cmp	r3, #0
 8004106:	d107      	bne.n	8004118 <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	689a      	ldr	r2, [r3, #8]
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004116:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8004118:	4b1b      	ldr	r3, [pc, #108]	; (8004188 <HAL_ADC_Start_DMA+0x1e8>)
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	f003 0310 	and.w	r3, r3, #16
 8004120:	2b00      	cmp	r3, #0
 8004122:	d120      	bne.n	8004166 <HAL_ADC_Start_DMA+0x1c6>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a19      	ldr	r2, [pc, #100]	; (8004190 <HAL_ADC_Start_DMA+0x1f0>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d11b      	bne.n	8004166 <HAL_ADC_Start_DMA+0x1c6>
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004138:	2b00      	cmp	r3, #0
 800413a:	d114      	bne.n	8004166 <HAL_ADC_Start_DMA+0x1c6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	689a      	ldr	r2, [r3, #8]
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800414a:	609a      	str	r2, [r3, #8]
 800414c:	e00b      	b.n	8004166 <HAL_ADC_Start_DMA+0x1c6>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004152:	f043 0210 	orr.w	r2, r3, #16
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800415e:	f043 0201 	orr.w	r2, r3, #1
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8004166:	2300      	movs	r3, #0
}
 8004168:	4618      	mov	r0, r3
 800416a:	3718      	adds	r7, #24
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}
 8004170:	20000108 	.word	0x20000108
 8004174:	431bde83 	.word	0x431bde83
 8004178:	fffff8fe 	.word	0xfffff8fe
 800417c:	08004671 	.word	0x08004671
 8004180:	0800472b 	.word	0x0800472b
 8004184:	08004747 	.word	0x08004747
 8004188:	40012300 	.word	0x40012300
 800418c:	40012000 	.word	0x40012000
 8004190:	40012200 	.word	0x40012200

08004194 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004194:	b480      	push	{r7}
 8004196:	b083      	sub	sp, #12
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800419c:	bf00      	nop
 800419e:	370c      	adds	r7, #12
 80041a0:	46bd      	mov	sp, r7
 80041a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a6:	4770      	bx	lr

080041a8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b083      	sub	sp, #12
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80041b0:	bf00      	nop
 80041b2:	370c      	adds	r7, #12
 80041b4:	46bd      	mov	sp, r7
 80041b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ba:	4770      	bx	lr

080041bc <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80041bc:	b480      	push	{r7}
 80041be:	b083      	sub	sp, #12
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80041c4:	bf00      	nop
 80041c6:	370c      	adds	r7, #12
 80041c8:	46bd      	mov	sp, r7
 80041ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ce:	4770      	bx	lr

080041d0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80041d0:	b480      	push	{r7}
 80041d2:	b085      	sub	sp, #20
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
 80041d8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80041da:	2300      	movs	r3, #0
 80041dc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041e4:	2b01      	cmp	r3, #1
 80041e6:	d101      	bne.n	80041ec <HAL_ADC_ConfigChannel+0x1c>
 80041e8:	2302      	movs	r3, #2
 80041ea:	e136      	b.n	800445a <HAL_ADC_ConfigChannel+0x28a>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2201      	movs	r2, #1
 80041f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	2b09      	cmp	r3, #9
 80041fa:	d93a      	bls.n	8004272 <HAL_ADC_ConfigChannel+0xa2>
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004204:	d035      	beq.n	8004272 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	68d9      	ldr	r1, [r3, #12]
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	b29b      	uxth	r3, r3
 8004212:	461a      	mov	r2, r3
 8004214:	4613      	mov	r3, r2
 8004216:	005b      	lsls	r3, r3, #1
 8004218:	4413      	add	r3, r2
 800421a:	3b1e      	subs	r3, #30
 800421c:	2207      	movs	r2, #7
 800421e:	fa02 f303 	lsl.w	r3, r2, r3
 8004222:	43da      	mvns	r2, r3
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	400a      	ands	r2, r1
 800422a:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a8d      	ldr	r2, [pc, #564]	; (8004468 <HAL_ADC_ConfigChannel+0x298>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d10a      	bne.n	800424c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	68d9      	ldr	r1, [r3, #12]
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	061a      	lsls	r2, r3, #24
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	430a      	orrs	r2, r1
 8004248:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800424a:	e035      	b.n	80042b8 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	68d9      	ldr	r1, [r3, #12]
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	689a      	ldr	r2, [r3, #8]
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	b29b      	uxth	r3, r3
 800425c:	4618      	mov	r0, r3
 800425e:	4603      	mov	r3, r0
 8004260:	005b      	lsls	r3, r3, #1
 8004262:	4403      	add	r3, r0
 8004264:	3b1e      	subs	r3, #30
 8004266:	409a      	lsls	r2, r3
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	430a      	orrs	r2, r1
 800426e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004270:	e022      	b.n	80042b8 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	6919      	ldr	r1, [r3, #16]
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	b29b      	uxth	r3, r3
 800427e:	461a      	mov	r2, r3
 8004280:	4613      	mov	r3, r2
 8004282:	005b      	lsls	r3, r3, #1
 8004284:	4413      	add	r3, r2
 8004286:	2207      	movs	r2, #7
 8004288:	fa02 f303 	lsl.w	r3, r2, r3
 800428c:	43da      	mvns	r2, r3
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	400a      	ands	r2, r1
 8004294:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	6919      	ldr	r1, [r3, #16]
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	689a      	ldr	r2, [r3, #8]
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	b29b      	uxth	r3, r3
 80042a6:	4618      	mov	r0, r3
 80042a8:	4603      	mov	r3, r0
 80042aa:	005b      	lsls	r3, r3, #1
 80042ac:	4403      	add	r3, r0
 80042ae:	409a      	lsls	r2, r3
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	430a      	orrs	r2, r1
 80042b6:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	2b06      	cmp	r3, #6
 80042be:	d824      	bhi.n	800430a <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	685a      	ldr	r2, [r3, #4]
 80042ca:	4613      	mov	r3, r2
 80042cc:	009b      	lsls	r3, r3, #2
 80042ce:	4413      	add	r3, r2
 80042d0:	3b05      	subs	r3, #5
 80042d2:	221f      	movs	r2, #31
 80042d4:	fa02 f303 	lsl.w	r3, r2, r3
 80042d8:	43da      	mvns	r2, r3
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	400a      	ands	r2, r1
 80042e0:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	b29b      	uxth	r3, r3
 80042ee:	4618      	mov	r0, r3
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	685a      	ldr	r2, [r3, #4]
 80042f4:	4613      	mov	r3, r2
 80042f6:	009b      	lsls	r3, r3, #2
 80042f8:	4413      	add	r3, r2
 80042fa:	3b05      	subs	r3, #5
 80042fc:	fa00 f203 	lsl.w	r2, r0, r3
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	430a      	orrs	r2, r1
 8004306:	635a      	str	r2, [r3, #52]	; 0x34
 8004308:	e04c      	b.n	80043a4 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	2b0c      	cmp	r3, #12
 8004310:	d824      	bhi.n	800435c <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	685a      	ldr	r2, [r3, #4]
 800431c:	4613      	mov	r3, r2
 800431e:	009b      	lsls	r3, r3, #2
 8004320:	4413      	add	r3, r2
 8004322:	3b23      	subs	r3, #35	; 0x23
 8004324:	221f      	movs	r2, #31
 8004326:	fa02 f303 	lsl.w	r3, r2, r3
 800432a:	43da      	mvns	r2, r3
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	400a      	ands	r2, r1
 8004332:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	b29b      	uxth	r3, r3
 8004340:	4618      	mov	r0, r3
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	685a      	ldr	r2, [r3, #4]
 8004346:	4613      	mov	r3, r2
 8004348:	009b      	lsls	r3, r3, #2
 800434a:	4413      	add	r3, r2
 800434c:	3b23      	subs	r3, #35	; 0x23
 800434e:	fa00 f203 	lsl.w	r2, r0, r3
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	430a      	orrs	r2, r1
 8004358:	631a      	str	r2, [r3, #48]	; 0x30
 800435a:	e023      	b.n	80043a4 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	685a      	ldr	r2, [r3, #4]
 8004366:	4613      	mov	r3, r2
 8004368:	009b      	lsls	r3, r3, #2
 800436a:	4413      	add	r3, r2
 800436c:	3b41      	subs	r3, #65	; 0x41
 800436e:	221f      	movs	r2, #31
 8004370:	fa02 f303 	lsl.w	r3, r2, r3
 8004374:	43da      	mvns	r2, r3
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	400a      	ands	r2, r1
 800437c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	b29b      	uxth	r3, r3
 800438a:	4618      	mov	r0, r3
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	685a      	ldr	r2, [r3, #4]
 8004390:	4613      	mov	r3, r2
 8004392:	009b      	lsls	r3, r3, #2
 8004394:	4413      	add	r3, r2
 8004396:	3b41      	subs	r3, #65	; 0x41
 8004398:	fa00 f203 	lsl.w	r2, r0, r3
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	430a      	orrs	r2, r1
 80043a2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a30      	ldr	r2, [pc, #192]	; (800446c <HAL_ADC_ConfigChannel+0x29c>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d10a      	bne.n	80043c4 <HAL_ADC_ConfigChannel+0x1f4>
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80043b6:	d105      	bne.n	80043c4 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80043b8:	4b2d      	ldr	r3, [pc, #180]	; (8004470 <HAL_ADC_ConfigChannel+0x2a0>)
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	4a2c      	ldr	r2, [pc, #176]	; (8004470 <HAL_ADC_ConfigChannel+0x2a0>)
 80043be:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80043c2:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a28      	ldr	r2, [pc, #160]	; (800446c <HAL_ADC_ConfigChannel+0x29c>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d10f      	bne.n	80043ee <HAL_ADC_ConfigChannel+0x21e>
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	2b12      	cmp	r3, #18
 80043d4:	d10b      	bne.n	80043ee <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80043d6:	4b26      	ldr	r3, [pc, #152]	; (8004470 <HAL_ADC_ConfigChannel+0x2a0>)
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	4a25      	ldr	r2, [pc, #148]	; (8004470 <HAL_ADC_ConfigChannel+0x2a0>)
 80043dc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80043e0:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80043e2:	4b23      	ldr	r3, [pc, #140]	; (8004470 <HAL_ADC_ConfigChannel+0x2a0>)
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	4a22      	ldr	r2, [pc, #136]	; (8004470 <HAL_ADC_ConfigChannel+0x2a0>)
 80043e8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80043ec:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a1e      	ldr	r2, [pc, #120]	; (800446c <HAL_ADC_ConfigChannel+0x29c>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d12b      	bne.n	8004450 <HAL_ADC_ConfigChannel+0x280>
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a1a      	ldr	r2, [pc, #104]	; (8004468 <HAL_ADC_ConfigChannel+0x298>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d003      	beq.n	800440a <HAL_ADC_ConfigChannel+0x23a>
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	2b11      	cmp	r3, #17
 8004408:	d122      	bne.n	8004450 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 800440a:	4b19      	ldr	r3, [pc, #100]	; (8004470 <HAL_ADC_ConfigChannel+0x2a0>)
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	4a18      	ldr	r2, [pc, #96]	; (8004470 <HAL_ADC_ConfigChannel+0x2a0>)
 8004410:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8004414:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8004416:	4b16      	ldr	r3, [pc, #88]	; (8004470 <HAL_ADC_ConfigChannel+0x2a0>)
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	4a15      	ldr	r2, [pc, #84]	; (8004470 <HAL_ADC_ConfigChannel+0x2a0>)
 800441c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004420:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a10      	ldr	r2, [pc, #64]	; (8004468 <HAL_ADC_ConfigChannel+0x298>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d111      	bne.n	8004450 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800442c:	4b11      	ldr	r3, [pc, #68]	; (8004474 <HAL_ADC_ConfigChannel+0x2a4>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a11      	ldr	r2, [pc, #68]	; (8004478 <HAL_ADC_ConfigChannel+0x2a8>)
 8004432:	fba2 2303 	umull	r2, r3, r2, r3
 8004436:	0c9a      	lsrs	r2, r3, #18
 8004438:	4613      	mov	r3, r2
 800443a:	009b      	lsls	r3, r3, #2
 800443c:	4413      	add	r3, r2
 800443e:	005b      	lsls	r3, r3, #1
 8004440:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8004442:	e002      	b.n	800444a <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	3b01      	subs	r3, #1
 8004448:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d1f9      	bne.n	8004444 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2200      	movs	r2, #0
 8004454:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004458:	2300      	movs	r3, #0
}
 800445a:	4618      	mov	r0, r3
 800445c:	3714      	adds	r7, #20
 800445e:	46bd      	mov	sp, r7
 8004460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004464:	4770      	bx	lr
 8004466:	bf00      	nop
 8004468:	10000012 	.word	0x10000012
 800446c:	40012000 	.word	0x40012000
 8004470:	40012300 	.word	0x40012300
 8004474:	20000108 	.word	0x20000108
 8004478:	431bde83 	.word	0x431bde83

0800447c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800447c:	b480      	push	{r7}
 800447e:	b083      	sub	sp, #12
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8004484:	4b78      	ldr	r3, [pc, #480]	; (8004668 <ADC_Init+0x1ec>)
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	4a77      	ldr	r2, [pc, #476]	; (8004668 <ADC_Init+0x1ec>)
 800448a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800448e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8004490:	4b75      	ldr	r3, [pc, #468]	; (8004668 <ADC_Init+0x1ec>)
 8004492:	685a      	ldr	r2, [r3, #4]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	4973      	ldr	r1, [pc, #460]	; (8004668 <ADC_Init+0x1ec>)
 800449a:	4313      	orrs	r3, r2
 800449c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	685a      	ldr	r2, [r3, #4]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80044ac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	6859      	ldr	r1, [r3, #4]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	691b      	ldr	r3, [r3, #16]
 80044b8:	021a      	lsls	r2, r3, #8
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	430a      	orrs	r2, r1
 80044c0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	685a      	ldr	r2, [r3, #4]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80044d0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	6859      	ldr	r1, [r3, #4]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	689a      	ldr	r2, [r3, #8]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	430a      	orrs	r2, r1
 80044e2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	689a      	ldr	r2, [r3, #8]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80044f2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	6899      	ldr	r1, [r3, #8]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	68da      	ldr	r2, [r3, #12]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	430a      	orrs	r2, r1
 8004504:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800450a:	4a58      	ldr	r2, [pc, #352]	; (800466c <ADC_Init+0x1f0>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d022      	beq.n	8004556 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	689a      	ldr	r2, [r3, #8]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800451e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	6899      	ldr	r1, [r3, #8]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	430a      	orrs	r2, r1
 8004530:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	689a      	ldr	r2, [r3, #8]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004540:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	6899      	ldr	r1, [r3, #8]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	430a      	orrs	r2, r1
 8004552:	609a      	str	r2, [r3, #8]
 8004554:	e00f      	b.n	8004576 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	689a      	ldr	r2, [r3, #8]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004564:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	689a      	ldr	r2, [r3, #8]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004574:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	689a      	ldr	r2, [r3, #8]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f022 0202 	bic.w	r2, r2, #2
 8004584:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	6899      	ldr	r1, [r3, #8]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	699b      	ldr	r3, [r3, #24]
 8004590:	005a      	lsls	r2, r3, #1
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	430a      	orrs	r2, r1
 8004598:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d01b      	beq.n	80045dc <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	685a      	ldr	r2, [r3, #4]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045b2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	685a      	ldr	r2, [r3, #4]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80045c2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	6859      	ldr	r1, [r3, #4]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ce:	3b01      	subs	r3, #1
 80045d0:	035a      	lsls	r2, r3, #13
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	430a      	orrs	r2, r1
 80045d8:	605a      	str	r2, [r3, #4]
 80045da:	e007      	b.n	80045ec <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	685a      	ldr	r2, [r3, #4]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045ea:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80045fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	69db      	ldr	r3, [r3, #28]
 8004606:	3b01      	subs	r3, #1
 8004608:	051a      	lsls	r2, r3, #20
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	430a      	orrs	r2, r1
 8004610:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	689a      	ldr	r2, [r3, #8]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004620:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	6899      	ldr	r1, [r3, #8]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800462e:	025a      	lsls	r2, r3, #9
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	430a      	orrs	r2, r1
 8004636:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	689a      	ldr	r2, [r3, #8]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004646:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	6899      	ldr	r1, [r3, #8]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	695b      	ldr	r3, [r3, #20]
 8004652:	029a      	lsls	r2, r3, #10
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	430a      	orrs	r2, r1
 800465a:	609a      	str	r2, [r3, #8]
}
 800465c:	bf00      	nop
 800465e:	370c      	adds	r7, #12
 8004660:	46bd      	mov	sp, r7
 8004662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004666:	4770      	bx	lr
 8004668:	40012300 	.word	0x40012300
 800466c:	0f000001 	.word	0x0f000001

08004670 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b084      	sub	sp, #16
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800467c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004682:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004686:	2b00      	cmp	r3, #0
 8004688:	d13c      	bne.n	8004704 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800468e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d12b      	bne.n	80046fc <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d127      	bne.n	80046fc <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046b2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d006      	beq.n	80046c8 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d119      	bne.n	80046fc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	685a      	ldr	r2, [r3, #4]
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f022 0220 	bic.w	r2, r2, #32
 80046d6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046dc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d105      	bne.n	80046fc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f4:	f043 0201 	orr.w	r2, r3, #1
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80046fc:	68f8      	ldr	r0, [r7, #12]
 80046fe:	f7ff fd49 	bl	8004194 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004702:	e00e      	b.n	8004722 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004708:	f003 0310 	and.w	r3, r3, #16
 800470c:	2b00      	cmp	r3, #0
 800470e:	d003      	beq.n	8004718 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004710:	68f8      	ldr	r0, [r7, #12]
 8004712:	f7ff fd53 	bl	80041bc <HAL_ADC_ErrorCallback>
}
 8004716:	e004      	b.n	8004722 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800471c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800471e:	6878      	ldr	r0, [r7, #4]
 8004720:	4798      	blx	r3
}
 8004722:	bf00      	nop
 8004724:	3710      	adds	r7, #16
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}

0800472a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800472a:	b580      	push	{r7, lr}
 800472c:	b084      	sub	sp, #16
 800472e:	af00      	add	r7, sp, #0
 8004730:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004736:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004738:	68f8      	ldr	r0, [r7, #12]
 800473a:	f7ff fd35 	bl	80041a8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800473e:	bf00      	nop
 8004740:	3710      	adds	r7, #16
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}

08004746 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004746:	b580      	push	{r7, lr}
 8004748:	b084      	sub	sp, #16
 800474a:	af00      	add	r7, sp, #0
 800474c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004752:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	2240      	movs	r2, #64	; 0x40
 8004758:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800475e:	f043 0204 	orr.w	r2, r3, #4
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004766:	68f8      	ldr	r0, [r7, #12]
 8004768:	f7ff fd28 	bl	80041bc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800476c:	bf00      	nop
 800476e:	3710      	adds	r7, #16
 8004770:	46bd      	mov	sp, r7
 8004772:	bd80      	pop	{r7, pc}

08004774 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004774:	b480      	push	{r7}
 8004776:	b085      	sub	sp, #20
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	f003 0307 	and.w	r3, r3, #7
 8004782:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004784:	4b0b      	ldr	r3, [pc, #44]	; (80047b4 <__NVIC_SetPriorityGrouping+0x40>)
 8004786:	68db      	ldr	r3, [r3, #12]
 8004788:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800478a:	68ba      	ldr	r2, [r7, #8]
 800478c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004790:	4013      	ands	r3, r2
 8004792:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800479c:	4b06      	ldr	r3, [pc, #24]	; (80047b8 <__NVIC_SetPriorityGrouping+0x44>)
 800479e:	4313      	orrs	r3, r2
 80047a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80047a2:	4a04      	ldr	r2, [pc, #16]	; (80047b4 <__NVIC_SetPriorityGrouping+0x40>)
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	60d3      	str	r3, [r2, #12]
}
 80047a8:	bf00      	nop
 80047aa:	3714      	adds	r7, #20
 80047ac:	46bd      	mov	sp, r7
 80047ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b2:	4770      	bx	lr
 80047b4:	e000ed00 	.word	0xe000ed00
 80047b8:	05fa0000 	.word	0x05fa0000

080047bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80047bc:	b480      	push	{r7}
 80047be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80047c0:	4b04      	ldr	r3, [pc, #16]	; (80047d4 <__NVIC_GetPriorityGrouping+0x18>)
 80047c2:	68db      	ldr	r3, [r3, #12]
 80047c4:	0a1b      	lsrs	r3, r3, #8
 80047c6:	f003 0307 	and.w	r3, r3, #7
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	46bd      	mov	sp, r7
 80047ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d2:	4770      	bx	lr
 80047d4:	e000ed00 	.word	0xe000ed00

080047d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80047d8:	b480      	push	{r7}
 80047da:	b083      	sub	sp, #12
 80047dc:	af00      	add	r7, sp, #0
 80047de:	4603      	mov	r3, r0
 80047e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	db0b      	blt.n	8004802 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80047ea:	79fb      	ldrb	r3, [r7, #7]
 80047ec:	f003 021f 	and.w	r2, r3, #31
 80047f0:	4907      	ldr	r1, [pc, #28]	; (8004810 <__NVIC_EnableIRQ+0x38>)
 80047f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047f6:	095b      	lsrs	r3, r3, #5
 80047f8:	2001      	movs	r0, #1
 80047fa:	fa00 f202 	lsl.w	r2, r0, r2
 80047fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004802:	bf00      	nop
 8004804:	370c      	adds	r7, #12
 8004806:	46bd      	mov	sp, r7
 8004808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480c:	4770      	bx	lr
 800480e:	bf00      	nop
 8004810:	e000e100 	.word	0xe000e100

08004814 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004814:	b480      	push	{r7}
 8004816:	b083      	sub	sp, #12
 8004818:	af00      	add	r7, sp, #0
 800481a:	4603      	mov	r3, r0
 800481c:	6039      	str	r1, [r7, #0]
 800481e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004820:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004824:	2b00      	cmp	r3, #0
 8004826:	db0a      	blt.n	800483e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	b2da      	uxtb	r2, r3
 800482c:	490c      	ldr	r1, [pc, #48]	; (8004860 <__NVIC_SetPriority+0x4c>)
 800482e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004832:	0112      	lsls	r2, r2, #4
 8004834:	b2d2      	uxtb	r2, r2
 8004836:	440b      	add	r3, r1
 8004838:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800483c:	e00a      	b.n	8004854 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	b2da      	uxtb	r2, r3
 8004842:	4908      	ldr	r1, [pc, #32]	; (8004864 <__NVIC_SetPriority+0x50>)
 8004844:	79fb      	ldrb	r3, [r7, #7]
 8004846:	f003 030f 	and.w	r3, r3, #15
 800484a:	3b04      	subs	r3, #4
 800484c:	0112      	lsls	r2, r2, #4
 800484e:	b2d2      	uxtb	r2, r2
 8004850:	440b      	add	r3, r1
 8004852:	761a      	strb	r2, [r3, #24]
}
 8004854:	bf00      	nop
 8004856:	370c      	adds	r7, #12
 8004858:	46bd      	mov	sp, r7
 800485a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485e:	4770      	bx	lr
 8004860:	e000e100 	.word	0xe000e100
 8004864:	e000ed00 	.word	0xe000ed00

08004868 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004868:	b480      	push	{r7}
 800486a:	b089      	sub	sp, #36	; 0x24
 800486c:	af00      	add	r7, sp, #0
 800486e:	60f8      	str	r0, [r7, #12]
 8004870:	60b9      	str	r1, [r7, #8]
 8004872:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	f003 0307 	and.w	r3, r3, #7
 800487a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800487c:	69fb      	ldr	r3, [r7, #28]
 800487e:	f1c3 0307 	rsb	r3, r3, #7
 8004882:	2b04      	cmp	r3, #4
 8004884:	bf28      	it	cs
 8004886:	2304      	movcs	r3, #4
 8004888:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800488a:	69fb      	ldr	r3, [r7, #28]
 800488c:	3304      	adds	r3, #4
 800488e:	2b06      	cmp	r3, #6
 8004890:	d902      	bls.n	8004898 <NVIC_EncodePriority+0x30>
 8004892:	69fb      	ldr	r3, [r7, #28]
 8004894:	3b03      	subs	r3, #3
 8004896:	e000      	b.n	800489a <NVIC_EncodePriority+0x32>
 8004898:	2300      	movs	r3, #0
 800489a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800489c:	f04f 32ff 	mov.w	r2, #4294967295
 80048a0:	69bb      	ldr	r3, [r7, #24]
 80048a2:	fa02 f303 	lsl.w	r3, r2, r3
 80048a6:	43da      	mvns	r2, r3
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	401a      	ands	r2, r3
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80048b0:	f04f 31ff 	mov.w	r1, #4294967295
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	fa01 f303 	lsl.w	r3, r1, r3
 80048ba:	43d9      	mvns	r1, r3
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80048c0:	4313      	orrs	r3, r2
         );
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	3724      	adds	r7, #36	; 0x24
 80048c6:	46bd      	mov	sp, r7
 80048c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048cc:	4770      	bx	lr
	...

080048d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b082      	sub	sp, #8
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	3b01      	subs	r3, #1
 80048dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80048e0:	d301      	bcc.n	80048e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80048e2:	2301      	movs	r3, #1
 80048e4:	e00f      	b.n	8004906 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80048e6:	4a0a      	ldr	r2, [pc, #40]	; (8004910 <SysTick_Config+0x40>)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	3b01      	subs	r3, #1
 80048ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80048ee:	210f      	movs	r1, #15
 80048f0:	f04f 30ff 	mov.w	r0, #4294967295
 80048f4:	f7ff ff8e 	bl	8004814 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80048f8:	4b05      	ldr	r3, [pc, #20]	; (8004910 <SysTick_Config+0x40>)
 80048fa:	2200      	movs	r2, #0
 80048fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80048fe:	4b04      	ldr	r3, [pc, #16]	; (8004910 <SysTick_Config+0x40>)
 8004900:	2207      	movs	r2, #7
 8004902:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004904:	2300      	movs	r3, #0
}
 8004906:	4618      	mov	r0, r3
 8004908:	3708      	adds	r7, #8
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}
 800490e:	bf00      	nop
 8004910:	e000e010 	.word	0xe000e010

08004914 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b082      	sub	sp, #8
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800491c:	6878      	ldr	r0, [r7, #4]
 800491e:	f7ff ff29 	bl	8004774 <__NVIC_SetPriorityGrouping>
}
 8004922:	bf00      	nop
 8004924:	3708      	adds	r7, #8
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}

0800492a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800492a:	b580      	push	{r7, lr}
 800492c:	b086      	sub	sp, #24
 800492e:	af00      	add	r7, sp, #0
 8004930:	4603      	mov	r3, r0
 8004932:	60b9      	str	r1, [r7, #8]
 8004934:	607a      	str	r2, [r7, #4]
 8004936:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004938:	2300      	movs	r3, #0
 800493a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800493c:	f7ff ff3e 	bl	80047bc <__NVIC_GetPriorityGrouping>
 8004940:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004942:	687a      	ldr	r2, [r7, #4]
 8004944:	68b9      	ldr	r1, [r7, #8]
 8004946:	6978      	ldr	r0, [r7, #20]
 8004948:	f7ff ff8e 	bl	8004868 <NVIC_EncodePriority>
 800494c:	4602      	mov	r2, r0
 800494e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004952:	4611      	mov	r1, r2
 8004954:	4618      	mov	r0, r3
 8004956:	f7ff ff5d 	bl	8004814 <__NVIC_SetPriority>
}
 800495a:	bf00      	nop
 800495c:	3718      	adds	r7, #24
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}

08004962 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004962:	b580      	push	{r7, lr}
 8004964:	b082      	sub	sp, #8
 8004966:	af00      	add	r7, sp, #0
 8004968:	4603      	mov	r3, r0
 800496a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800496c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004970:	4618      	mov	r0, r3
 8004972:	f7ff ff31 	bl	80047d8 <__NVIC_EnableIRQ>
}
 8004976:	bf00      	nop
 8004978:	3708      	adds	r7, #8
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}

0800497e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800497e:	b580      	push	{r7, lr}
 8004980:	b082      	sub	sp, #8
 8004982:	af00      	add	r7, sp, #0
 8004984:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f7ff ffa2 	bl	80048d0 <SysTick_Config>
 800498c:	4603      	mov	r3, r0
}
 800498e:	4618      	mov	r0, r3
 8004990:	3708      	adds	r7, #8
 8004992:	46bd      	mov	sp, r7
 8004994:	bd80      	pop	{r7, pc}

08004996 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004996:	b580      	push	{r7, lr}
 8004998:	b082      	sub	sp, #8
 800499a:	af00      	add	r7, sp, #0
 800499c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d101      	bne.n	80049a8 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80049a4:	2301      	movs	r3, #1
 80049a6:	e014      	b.n	80049d2 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	791b      	ldrb	r3, [r3, #4]
 80049ac:	b2db      	uxtb	r3, r3
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d105      	bne.n	80049be <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2200      	movs	r2, #0
 80049b6:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80049b8:	6878      	ldr	r0, [r7, #4]
 80049ba:	f7fe ff97 	bl	80038ec <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2202      	movs	r2, #2
 80049c2:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2200      	movs	r2, #0
 80049c8:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2201      	movs	r2, #1
 80049ce:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80049d0:	2300      	movs	r3, #0
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	3708      	adds	r7, #8
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}

080049da <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80049da:	b480      	push	{r7}
 80049dc:	b087      	sub	sp, #28
 80049de:	af00      	add	r7, sp, #0
 80049e0:	60f8      	str	r0, [r7, #12]
 80049e2:	60b9      	str	r1, [r7, #8]
 80049e4:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	795b      	ldrb	r3, [r3, #5]
 80049ea:	2b01      	cmp	r3, #1
 80049ec:	d101      	bne.n	80049f2 <HAL_DAC_ConfigChannel+0x18>
 80049ee:	2302      	movs	r3, #2
 80049f0:	e03c      	b.n	8004a6c <HAL_DAC_ConfigChannel+0x92>
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2201      	movs	r2, #1
 80049f6:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	2202      	movs	r2, #2
 80049fc:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	f003 0310 	and.w	r3, r3, #16
 8004a0c:	f640 72fe 	movw	r2, #4094	; 0xffe
 8004a10:	fa02 f303 	lsl.w	r3, r2, r3
 8004a14:	43db      	mvns	r3, r3
 8004a16:	697a      	ldr	r2, [r7, #20]
 8004a18:	4013      	ands	r3, r2
 8004a1a:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	681a      	ldr	r2, [r3, #0]
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	4313      	orrs	r3, r2
 8004a26:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	f003 0310 	and.w	r3, r3, #16
 8004a2e:	693a      	ldr	r2, [r7, #16]
 8004a30:	fa02 f303 	lsl.w	r3, r2, r3
 8004a34:	697a      	ldr	r2, [r7, #20]
 8004a36:	4313      	orrs	r3, r2
 8004a38:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	697a      	ldr	r2, [r7, #20]
 8004a40:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	6819      	ldr	r1, [r3, #0]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	f003 0310 	and.w	r3, r3, #16
 8004a4e:	22c0      	movs	r2, #192	; 0xc0
 8004a50:	fa02 f303 	lsl.w	r3, r2, r3
 8004a54:	43da      	mvns	r2, r3
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	400a      	ands	r2, r1
 8004a5c:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	2201      	movs	r2, #1
 8004a62:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	2200      	movs	r2, #0
 8004a68:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004a6a:	2300      	movs	r3, #0
}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	371c      	adds	r7, #28
 8004a70:	46bd      	mov	sp, r7
 8004a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a76:	4770      	bx	lr

08004a78 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b086      	sub	sp, #24
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004a80:	2300      	movs	r3, #0
 8004a82:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004a84:	f7ff fa3c 	bl	8003f00 <HAL_GetTick>
 8004a88:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d101      	bne.n	8004a94 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004a90:	2301      	movs	r3, #1
 8004a92:	e099      	b.n	8004bc8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2202      	movs	r2, #2
 8004a98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	681a      	ldr	r2, [r3, #0]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f022 0201 	bic.w	r2, r2, #1
 8004ab2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004ab4:	e00f      	b.n	8004ad6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004ab6:	f7ff fa23 	bl	8003f00 <HAL_GetTick>
 8004aba:	4602      	mov	r2, r0
 8004abc:	693b      	ldr	r3, [r7, #16]
 8004abe:	1ad3      	subs	r3, r2, r3
 8004ac0:	2b05      	cmp	r3, #5
 8004ac2:	d908      	bls.n	8004ad6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2220      	movs	r2, #32
 8004ac8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2203      	movs	r2, #3
 8004ace:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004ad2:	2303      	movs	r3, #3
 8004ad4:	e078      	b.n	8004bc8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f003 0301 	and.w	r3, r3, #1
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d1e8      	bne.n	8004ab6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004aec:	697a      	ldr	r2, [r7, #20]
 8004aee:	4b38      	ldr	r3, [pc, #224]	; (8004bd0 <HAL_DMA_Init+0x158>)
 8004af0:	4013      	ands	r3, r2
 8004af2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	685a      	ldr	r2, [r3, #4]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	689b      	ldr	r3, [r3, #8]
 8004afc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004b02:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	691b      	ldr	r3, [r3, #16]
 8004b08:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b0e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	699b      	ldr	r3, [r3, #24]
 8004b14:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b1a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6a1b      	ldr	r3, [r3, #32]
 8004b20:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004b22:	697a      	ldr	r2, [r7, #20]
 8004b24:	4313      	orrs	r3, r2
 8004b26:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b2c:	2b04      	cmp	r3, #4
 8004b2e:	d107      	bne.n	8004b40 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	697a      	ldr	r2, [r7, #20]
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	697a      	ldr	r2, [r7, #20]
 8004b46:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	695b      	ldr	r3, [r3, #20]
 8004b4e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	f023 0307 	bic.w	r3, r3, #7
 8004b56:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b5c:	697a      	ldr	r2, [r7, #20]
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b66:	2b04      	cmp	r3, #4
 8004b68:	d117      	bne.n	8004b9a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b6e:	697a      	ldr	r2, [r7, #20]
 8004b70:	4313      	orrs	r3, r2
 8004b72:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d00e      	beq.n	8004b9a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004b7c:	6878      	ldr	r0, [r7, #4]
 8004b7e:	f000 fa77 	bl	8005070 <DMA_CheckFifoParam>
 8004b82:	4603      	mov	r3, r0
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d008      	beq.n	8004b9a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2240      	movs	r2, #64	; 0x40
 8004b8c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2201      	movs	r2, #1
 8004b92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004b96:	2301      	movs	r3, #1
 8004b98:	e016      	b.n	8004bc8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	697a      	ldr	r2, [r7, #20]
 8004ba0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	f000 fa2e 	bl	8005004 <DMA_CalcBaseAndBitshift>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bb0:	223f      	movs	r2, #63	; 0x3f
 8004bb2:	409a      	lsls	r2, r3
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2201      	movs	r2, #1
 8004bc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004bc6:	2300      	movs	r3, #0
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	3718      	adds	r7, #24
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bd80      	pop	{r7, pc}
 8004bd0:	f010803f 	.word	0xf010803f

08004bd4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b086      	sub	sp, #24
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	60f8      	str	r0, [r7, #12]
 8004bdc:	60b9      	str	r1, [r7, #8]
 8004bde:	607a      	str	r2, [r7, #4]
 8004be0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004be2:	2300      	movs	r3, #0
 8004be4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bea:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004bf2:	2b01      	cmp	r3, #1
 8004bf4:	d101      	bne.n	8004bfa <HAL_DMA_Start_IT+0x26>
 8004bf6:	2302      	movs	r3, #2
 8004bf8:	e048      	b.n	8004c8c <HAL_DMA_Start_IT+0xb8>
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	2201      	movs	r2, #1
 8004bfe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004c08:	b2db      	uxtb	r3, r3
 8004c0a:	2b01      	cmp	r3, #1
 8004c0c:	d137      	bne.n	8004c7e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	2202      	movs	r2, #2
 8004c12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	687a      	ldr	r2, [r7, #4]
 8004c20:	68b9      	ldr	r1, [r7, #8]
 8004c22:	68f8      	ldr	r0, [r7, #12]
 8004c24:	f000 f9c0 	bl	8004fa8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c2c:	223f      	movs	r2, #63	; 0x3f
 8004c2e:	409a      	lsls	r2, r3
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	681a      	ldr	r2, [r3, #0]
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f042 0216 	orr.w	r2, r2, #22
 8004c42:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	695a      	ldr	r2, [r3, #20]
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004c52:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d007      	beq.n	8004c6c <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	681a      	ldr	r2, [r3, #0]
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f042 0208 	orr.w	r2, r2, #8
 8004c6a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	681a      	ldr	r2, [r3, #0]
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f042 0201 	orr.w	r2, r2, #1
 8004c7a:	601a      	str	r2, [r3, #0]
 8004c7c:	e005      	b.n	8004c8a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	2200      	movs	r2, #0
 8004c82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004c86:	2302      	movs	r3, #2
 8004c88:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004c8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	3718      	adds	r7, #24
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bd80      	pop	{r7, pc}

08004c94 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b086      	sub	sp, #24
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8004ca0:	4b92      	ldr	r3, [pc, #584]	; (8004eec <HAL_DMA_IRQHandler+0x258>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a92      	ldr	r2, [pc, #584]	; (8004ef0 <HAL_DMA_IRQHandler+0x25c>)
 8004ca6:	fba2 2303 	umull	r2, r3, r2, r3
 8004caa:	0a9b      	lsrs	r3, r3, #10
 8004cac:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cb2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cbe:	2208      	movs	r2, #8
 8004cc0:	409a      	lsls	r2, r3
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	4013      	ands	r3, r2
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d01a      	beq.n	8004d00 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f003 0304 	and.w	r3, r3, #4
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d013      	beq.n	8004d00 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	681a      	ldr	r2, [r3, #0]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f022 0204 	bic.w	r2, r2, #4
 8004ce6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cec:	2208      	movs	r2, #8
 8004cee:	409a      	lsls	r2, r3
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cf8:	f043 0201 	orr.w	r2, r3, #1
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d04:	2201      	movs	r2, #1
 8004d06:	409a      	lsls	r2, r3
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	4013      	ands	r3, r2
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d012      	beq.n	8004d36 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	695b      	ldr	r3, [r3, #20]
 8004d16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d00b      	beq.n	8004d36 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d22:	2201      	movs	r2, #1
 8004d24:	409a      	lsls	r2, r3
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d2e:	f043 0202 	orr.w	r2, r3, #2
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d3a:	2204      	movs	r2, #4
 8004d3c:	409a      	lsls	r2, r3
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	4013      	ands	r3, r2
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d012      	beq.n	8004d6c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f003 0302 	and.w	r3, r3, #2
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d00b      	beq.n	8004d6c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d58:	2204      	movs	r2, #4
 8004d5a:	409a      	lsls	r2, r3
 8004d5c:	693b      	ldr	r3, [r7, #16]
 8004d5e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d64:	f043 0204 	orr.w	r2, r3, #4
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d70:	2210      	movs	r2, #16
 8004d72:	409a      	lsls	r2, r3
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	4013      	ands	r3, r2
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d043      	beq.n	8004e04 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f003 0308 	and.w	r3, r3, #8
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d03c      	beq.n	8004e04 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d8e:	2210      	movs	r2, #16
 8004d90:	409a      	lsls	r2, r3
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d018      	beq.n	8004dd6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d108      	bne.n	8004dc4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d024      	beq.n	8004e04 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	4798      	blx	r3
 8004dc2:	e01f      	b.n	8004e04 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d01b      	beq.n	8004e04 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004dd0:	6878      	ldr	r0, [r7, #4]
 8004dd2:	4798      	blx	r3
 8004dd4:	e016      	b.n	8004e04 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d107      	bne.n	8004df4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	681a      	ldr	r2, [r3, #0]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f022 0208 	bic.w	r2, r2, #8
 8004df2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d003      	beq.n	8004e04 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e00:	6878      	ldr	r0, [r7, #4]
 8004e02:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e08:	2220      	movs	r2, #32
 8004e0a:	409a      	lsls	r2, r3
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	4013      	ands	r3, r2
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	f000 808e 	beq.w	8004f32 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f003 0310 	and.w	r3, r3, #16
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	f000 8086 	beq.w	8004f32 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e2a:	2220      	movs	r2, #32
 8004e2c:	409a      	lsls	r2, r3
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004e38:	b2db      	uxtb	r3, r3
 8004e3a:	2b05      	cmp	r3, #5
 8004e3c:	d136      	bne.n	8004eac <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	681a      	ldr	r2, [r3, #0]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f022 0216 	bic.w	r2, r2, #22
 8004e4c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	695a      	ldr	r2, [r3, #20]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004e5c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d103      	bne.n	8004e6e <HAL_DMA_IRQHandler+0x1da>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d007      	beq.n	8004e7e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	681a      	ldr	r2, [r3, #0]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f022 0208 	bic.w	r2, r2, #8
 8004e7c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e82:	223f      	movs	r2, #63	; 0x3f
 8004e84:	409a      	lsls	r2, r3
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2201      	movs	r2, #1
 8004e8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2200      	movs	r2, #0
 8004e96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d07d      	beq.n	8004f9e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	4798      	blx	r3
        }
        return;
 8004eaa:	e078      	b.n	8004f9e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d01c      	beq.n	8004ef4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d108      	bne.n	8004eda <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d030      	beq.n	8004f32 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ed4:	6878      	ldr	r0, [r7, #4]
 8004ed6:	4798      	blx	r3
 8004ed8:	e02b      	b.n	8004f32 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d027      	beq.n	8004f32 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ee6:	6878      	ldr	r0, [r7, #4]
 8004ee8:	4798      	blx	r3
 8004eea:	e022      	b.n	8004f32 <HAL_DMA_IRQHandler+0x29e>
 8004eec:	20000108 	.word	0x20000108
 8004ef0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d10f      	bne.n	8004f22 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	681a      	ldr	r2, [r3, #0]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f022 0210 	bic.w	r2, r2, #16
 8004f10:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2201      	movs	r2, #1
 8004f16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d003      	beq.n	8004f32 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f2e:	6878      	ldr	r0, [r7, #4]
 8004f30:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d032      	beq.n	8004fa0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f3e:	f003 0301 	and.w	r3, r3, #1
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d022      	beq.n	8004f8c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2205      	movs	r2, #5
 8004f4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	681a      	ldr	r2, [r3, #0]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f022 0201 	bic.w	r2, r2, #1
 8004f5c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	3301      	adds	r3, #1
 8004f62:	60bb      	str	r3, [r7, #8]
 8004f64:	697a      	ldr	r2, [r7, #20]
 8004f66:	429a      	cmp	r2, r3
 8004f68:	d307      	bcc.n	8004f7a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f003 0301 	and.w	r3, r3, #1
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d1f2      	bne.n	8004f5e <HAL_DMA_IRQHandler+0x2ca>
 8004f78:	e000      	b.n	8004f7c <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004f7a:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2201      	movs	r2, #1
 8004f80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2200      	movs	r2, #0
 8004f88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d005      	beq.n	8004fa0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f98:	6878      	ldr	r0, [r7, #4]
 8004f9a:	4798      	blx	r3
 8004f9c:	e000      	b.n	8004fa0 <HAL_DMA_IRQHandler+0x30c>
        return;
 8004f9e:	bf00      	nop
    }
  }
}
 8004fa0:	3718      	adds	r7, #24
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bd80      	pop	{r7, pc}
 8004fa6:	bf00      	nop

08004fa8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b085      	sub	sp, #20
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	60f8      	str	r0, [r7, #12]
 8004fb0:	60b9      	str	r1, [r7, #8]
 8004fb2:	607a      	str	r2, [r7, #4]
 8004fb4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	681a      	ldr	r2, [r3, #0]
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004fc4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	683a      	ldr	r2, [r7, #0]
 8004fcc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	689b      	ldr	r3, [r3, #8]
 8004fd2:	2b40      	cmp	r3, #64	; 0x40
 8004fd4:	d108      	bne.n	8004fe8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	687a      	ldr	r2, [r7, #4]
 8004fdc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	68ba      	ldr	r2, [r7, #8]
 8004fe4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004fe6:	e007      	b.n	8004ff8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	68ba      	ldr	r2, [r7, #8]
 8004fee:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	687a      	ldr	r2, [r7, #4]
 8004ff6:	60da      	str	r2, [r3, #12]
}
 8004ff8:	bf00      	nop
 8004ffa:	3714      	adds	r7, #20
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005002:	4770      	bx	lr

08005004 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005004:	b480      	push	{r7}
 8005006:	b085      	sub	sp, #20
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	b2db      	uxtb	r3, r3
 8005012:	3b10      	subs	r3, #16
 8005014:	4a13      	ldr	r2, [pc, #76]	; (8005064 <DMA_CalcBaseAndBitshift+0x60>)
 8005016:	fba2 2303 	umull	r2, r3, r2, r3
 800501a:	091b      	lsrs	r3, r3, #4
 800501c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800501e:	4a12      	ldr	r2, [pc, #72]	; (8005068 <DMA_CalcBaseAndBitshift+0x64>)
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	4413      	add	r3, r2
 8005024:	781b      	ldrb	r3, [r3, #0]
 8005026:	461a      	mov	r2, r3
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2b03      	cmp	r3, #3
 8005030:	d908      	bls.n	8005044 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	461a      	mov	r2, r3
 8005038:	4b0c      	ldr	r3, [pc, #48]	; (800506c <DMA_CalcBaseAndBitshift+0x68>)
 800503a:	4013      	ands	r3, r2
 800503c:	1d1a      	adds	r2, r3, #4
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	659a      	str	r2, [r3, #88]	; 0x58
 8005042:	e006      	b.n	8005052 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	461a      	mov	r2, r3
 800504a:	4b08      	ldr	r3, [pc, #32]	; (800506c <DMA_CalcBaseAndBitshift+0x68>)
 800504c:	4013      	ands	r3, r2
 800504e:	687a      	ldr	r2, [r7, #4]
 8005050:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005056:	4618      	mov	r0, r3
 8005058:	3714      	adds	r7, #20
 800505a:	46bd      	mov	sp, r7
 800505c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005060:	4770      	bx	lr
 8005062:	bf00      	nop
 8005064:	aaaaaaab 	.word	0xaaaaaaab
 8005068:	080069f4 	.word	0x080069f4
 800506c:	fffffc00 	.word	0xfffffc00

08005070 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005070:	b480      	push	{r7}
 8005072:	b085      	sub	sp, #20
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005078:	2300      	movs	r3, #0
 800507a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005080:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	699b      	ldr	r3, [r3, #24]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d11f      	bne.n	80050ca <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	2b03      	cmp	r3, #3
 800508e:	d855      	bhi.n	800513c <DMA_CheckFifoParam+0xcc>
 8005090:	a201      	add	r2, pc, #4	; (adr r2, 8005098 <DMA_CheckFifoParam+0x28>)
 8005092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005096:	bf00      	nop
 8005098:	080050a9 	.word	0x080050a9
 800509c:	080050bb 	.word	0x080050bb
 80050a0:	080050a9 	.word	0x080050a9
 80050a4:	0800513d 	.word	0x0800513d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d045      	beq.n	8005140 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80050b4:	2301      	movs	r3, #1
 80050b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80050b8:	e042      	b.n	8005140 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050be:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80050c2:	d13f      	bne.n	8005144 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80050c4:	2301      	movs	r3, #1
 80050c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80050c8:	e03c      	b.n	8005144 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	699b      	ldr	r3, [r3, #24]
 80050ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050d2:	d121      	bne.n	8005118 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	2b03      	cmp	r3, #3
 80050d8:	d836      	bhi.n	8005148 <DMA_CheckFifoParam+0xd8>
 80050da:	a201      	add	r2, pc, #4	; (adr r2, 80050e0 <DMA_CheckFifoParam+0x70>)
 80050dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050e0:	080050f1 	.word	0x080050f1
 80050e4:	080050f7 	.word	0x080050f7
 80050e8:	080050f1 	.word	0x080050f1
 80050ec:	08005109 	.word	0x08005109
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80050f0:	2301      	movs	r3, #1
 80050f2:	73fb      	strb	r3, [r7, #15]
      break;
 80050f4:	e02f      	b.n	8005156 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d024      	beq.n	800514c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8005102:	2301      	movs	r3, #1
 8005104:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005106:	e021      	b.n	800514c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800510c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005110:	d11e      	bne.n	8005150 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8005112:	2301      	movs	r3, #1
 8005114:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005116:	e01b      	b.n	8005150 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	2b02      	cmp	r3, #2
 800511c:	d902      	bls.n	8005124 <DMA_CheckFifoParam+0xb4>
 800511e:	2b03      	cmp	r3, #3
 8005120:	d003      	beq.n	800512a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005122:	e018      	b.n	8005156 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8005124:	2301      	movs	r3, #1
 8005126:	73fb      	strb	r3, [r7, #15]
      break;
 8005128:	e015      	b.n	8005156 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800512e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005132:	2b00      	cmp	r3, #0
 8005134:	d00e      	beq.n	8005154 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8005136:	2301      	movs	r3, #1
 8005138:	73fb      	strb	r3, [r7, #15]
      break;
 800513a:	e00b      	b.n	8005154 <DMA_CheckFifoParam+0xe4>
      break;
 800513c:	bf00      	nop
 800513e:	e00a      	b.n	8005156 <DMA_CheckFifoParam+0xe6>
      break;
 8005140:	bf00      	nop
 8005142:	e008      	b.n	8005156 <DMA_CheckFifoParam+0xe6>
      break;
 8005144:	bf00      	nop
 8005146:	e006      	b.n	8005156 <DMA_CheckFifoParam+0xe6>
      break;
 8005148:	bf00      	nop
 800514a:	e004      	b.n	8005156 <DMA_CheckFifoParam+0xe6>
      break;
 800514c:	bf00      	nop
 800514e:	e002      	b.n	8005156 <DMA_CheckFifoParam+0xe6>
      break;   
 8005150:	bf00      	nop
 8005152:	e000      	b.n	8005156 <DMA_CheckFifoParam+0xe6>
      break;
 8005154:	bf00      	nop
    }
  } 
  
  return status; 
 8005156:	7bfb      	ldrb	r3, [r7, #15]
}
 8005158:	4618      	mov	r0, r3
 800515a:	3714      	adds	r7, #20
 800515c:	46bd      	mov	sp, r7
 800515e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005162:	4770      	bx	lr

08005164 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005164:	b480      	push	{r7}
 8005166:	b089      	sub	sp, #36	; 0x24
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
 800516c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800516e:	2300      	movs	r3, #0
 8005170:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8005172:	2300      	movs	r3, #0
 8005174:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8005176:	2300      	movs	r3, #0
 8005178:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800517a:	2300      	movs	r3, #0
 800517c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800517e:	2300      	movs	r3, #0
 8005180:	61fb      	str	r3, [r7, #28]
 8005182:	e175      	b.n	8005470 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005184:	2201      	movs	r2, #1
 8005186:	69fb      	ldr	r3, [r7, #28]
 8005188:	fa02 f303 	lsl.w	r3, r2, r3
 800518c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	697a      	ldr	r2, [r7, #20]
 8005194:	4013      	ands	r3, r2
 8005196:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005198:	693a      	ldr	r2, [r7, #16]
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	429a      	cmp	r2, r3
 800519e:	f040 8164 	bne.w	800546a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	f003 0303 	and.w	r3, r3, #3
 80051aa:	2b01      	cmp	r3, #1
 80051ac:	d005      	beq.n	80051ba <HAL_GPIO_Init+0x56>
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	f003 0303 	and.w	r3, r3, #3
 80051b6:	2b02      	cmp	r3, #2
 80051b8:	d130      	bne.n	800521c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	689b      	ldr	r3, [r3, #8]
 80051be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80051c0:	69fb      	ldr	r3, [r7, #28]
 80051c2:	005b      	lsls	r3, r3, #1
 80051c4:	2203      	movs	r2, #3
 80051c6:	fa02 f303 	lsl.w	r3, r2, r3
 80051ca:	43db      	mvns	r3, r3
 80051cc:	69ba      	ldr	r2, [r7, #24]
 80051ce:	4013      	ands	r3, r2
 80051d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	68da      	ldr	r2, [r3, #12]
 80051d6:	69fb      	ldr	r3, [r7, #28]
 80051d8:	005b      	lsls	r3, r3, #1
 80051da:	fa02 f303 	lsl.w	r3, r2, r3
 80051de:	69ba      	ldr	r2, [r7, #24]
 80051e0:	4313      	orrs	r3, r2
 80051e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	69ba      	ldr	r2, [r7, #24]
 80051e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80051f0:	2201      	movs	r2, #1
 80051f2:	69fb      	ldr	r3, [r7, #28]
 80051f4:	fa02 f303 	lsl.w	r3, r2, r3
 80051f8:	43db      	mvns	r3, r3
 80051fa:	69ba      	ldr	r2, [r7, #24]
 80051fc:	4013      	ands	r3, r2
 80051fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	091b      	lsrs	r3, r3, #4
 8005206:	f003 0201 	and.w	r2, r3, #1
 800520a:	69fb      	ldr	r3, [r7, #28]
 800520c:	fa02 f303 	lsl.w	r3, r2, r3
 8005210:	69ba      	ldr	r2, [r7, #24]
 8005212:	4313      	orrs	r3, r2
 8005214:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	69ba      	ldr	r2, [r7, #24]
 800521a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	f003 0303 	and.w	r3, r3, #3
 8005224:	2b03      	cmp	r3, #3
 8005226:	d017      	beq.n	8005258 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	68db      	ldr	r3, [r3, #12]
 800522c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800522e:	69fb      	ldr	r3, [r7, #28]
 8005230:	005b      	lsls	r3, r3, #1
 8005232:	2203      	movs	r2, #3
 8005234:	fa02 f303 	lsl.w	r3, r2, r3
 8005238:	43db      	mvns	r3, r3
 800523a:	69ba      	ldr	r2, [r7, #24]
 800523c:	4013      	ands	r3, r2
 800523e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	689a      	ldr	r2, [r3, #8]
 8005244:	69fb      	ldr	r3, [r7, #28]
 8005246:	005b      	lsls	r3, r3, #1
 8005248:	fa02 f303 	lsl.w	r3, r2, r3
 800524c:	69ba      	ldr	r2, [r7, #24]
 800524e:	4313      	orrs	r3, r2
 8005250:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	69ba      	ldr	r2, [r7, #24]
 8005256:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	685b      	ldr	r3, [r3, #4]
 800525c:	f003 0303 	and.w	r3, r3, #3
 8005260:	2b02      	cmp	r3, #2
 8005262:	d123      	bne.n	80052ac <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8005264:	69fb      	ldr	r3, [r7, #28]
 8005266:	08da      	lsrs	r2, r3, #3
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	3208      	adds	r2, #8
 800526c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005270:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005272:	69fb      	ldr	r3, [r7, #28]
 8005274:	f003 0307 	and.w	r3, r3, #7
 8005278:	009b      	lsls	r3, r3, #2
 800527a:	220f      	movs	r2, #15
 800527c:	fa02 f303 	lsl.w	r3, r2, r3
 8005280:	43db      	mvns	r3, r3
 8005282:	69ba      	ldr	r2, [r7, #24]
 8005284:	4013      	ands	r3, r2
 8005286:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	691a      	ldr	r2, [r3, #16]
 800528c:	69fb      	ldr	r3, [r7, #28]
 800528e:	f003 0307 	and.w	r3, r3, #7
 8005292:	009b      	lsls	r3, r3, #2
 8005294:	fa02 f303 	lsl.w	r3, r2, r3
 8005298:	69ba      	ldr	r2, [r7, #24]
 800529a:	4313      	orrs	r3, r2
 800529c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800529e:	69fb      	ldr	r3, [r7, #28]
 80052a0:	08da      	lsrs	r2, r3, #3
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	3208      	adds	r2, #8
 80052a6:	69b9      	ldr	r1, [r7, #24]
 80052a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80052b2:	69fb      	ldr	r3, [r7, #28]
 80052b4:	005b      	lsls	r3, r3, #1
 80052b6:	2203      	movs	r2, #3
 80052b8:	fa02 f303 	lsl.w	r3, r2, r3
 80052bc:	43db      	mvns	r3, r3
 80052be:	69ba      	ldr	r2, [r7, #24]
 80052c0:	4013      	ands	r3, r2
 80052c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	f003 0203 	and.w	r2, r3, #3
 80052cc:	69fb      	ldr	r3, [r7, #28]
 80052ce:	005b      	lsls	r3, r3, #1
 80052d0:	fa02 f303 	lsl.w	r3, r2, r3
 80052d4:	69ba      	ldr	r2, [r7, #24]
 80052d6:	4313      	orrs	r3, r2
 80052d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	69ba      	ldr	r2, [r7, #24]
 80052de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	f000 80be 	beq.w	800546a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80052ee:	4b65      	ldr	r3, [pc, #404]	; (8005484 <HAL_GPIO_Init+0x320>)
 80052f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052f2:	4a64      	ldr	r2, [pc, #400]	; (8005484 <HAL_GPIO_Init+0x320>)
 80052f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80052f8:	6453      	str	r3, [r2, #68]	; 0x44
 80052fa:	4b62      	ldr	r3, [pc, #392]	; (8005484 <HAL_GPIO_Init+0x320>)
 80052fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005302:	60fb      	str	r3, [r7, #12]
 8005304:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8005306:	4a60      	ldr	r2, [pc, #384]	; (8005488 <HAL_GPIO_Init+0x324>)
 8005308:	69fb      	ldr	r3, [r7, #28]
 800530a:	089b      	lsrs	r3, r3, #2
 800530c:	3302      	adds	r3, #2
 800530e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005312:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005314:	69fb      	ldr	r3, [r7, #28]
 8005316:	f003 0303 	and.w	r3, r3, #3
 800531a:	009b      	lsls	r3, r3, #2
 800531c:	220f      	movs	r2, #15
 800531e:	fa02 f303 	lsl.w	r3, r2, r3
 8005322:	43db      	mvns	r3, r3
 8005324:	69ba      	ldr	r2, [r7, #24]
 8005326:	4013      	ands	r3, r2
 8005328:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	4a57      	ldr	r2, [pc, #348]	; (800548c <HAL_GPIO_Init+0x328>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d037      	beq.n	80053a2 <HAL_GPIO_Init+0x23e>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	4a56      	ldr	r2, [pc, #344]	; (8005490 <HAL_GPIO_Init+0x32c>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d031      	beq.n	800539e <HAL_GPIO_Init+0x23a>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	4a55      	ldr	r2, [pc, #340]	; (8005494 <HAL_GPIO_Init+0x330>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d02b      	beq.n	800539a <HAL_GPIO_Init+0x236>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	4a54      	ldr	r2, [pc, #336]	; (8005498 <HAL_GPIO_Init+0x334>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d025      	beq.n	8005396 <HAL_GPIO_Init+0x232>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	4a53      	ldr	r2, [pc, #332]	; (800549c <HAL_GPIO_Init+0x338>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d01f      	beq.n	8005392 <HAL_GPIO_Init+0x22e>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	4a52      	ldr	r2, [pc, #328]	; (80054a0 <HAL_GPIO_Init+0x33c>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d019      	beq.n	800538e <HAL_GPIO_Init+0x22a>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	4a51      	ldr	r2, [pc, #324]	; (80054a4 <HAL_GPIO_Init+0x340>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d013      	beq.n	800538a <HAL_GPIO_Init+0x226>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	4a50      	ldr	r2, [pc, #320]	; (80054a8 <HAL_GPIO_Init+0x344>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d00d      	beq.n	8005386 <HAL_GPIO_Init+0x222>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	4a4f      	ldr	r2, [pc, #316]	; (80054ac <HAL_GPIO_Init+0x348>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d007      	beq.n	8005382 <HAL_GPIO_Init+0x21e>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	4a4e      	ldr	r2, [pc, #312]	; (80054b0 <HAL_GPIO_Init+0x34c>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d101      	bne.n	800537e <HAL_GPIO_Init+0x21a>
 800537a:	2309      	movs	r3, #9
 800537c:	e012      	b.n	80053a4 <HAL_GPIO_Init+0x240>
 800537e:	230a      	movs	r3, #10
 8005380:	e010      	b.n	80053a4 <HAL_GPIO_Init+0x240>
 8005382:	2308      	movs	r3, #8
 8005384:	e00e      	b.n	80053a4 <HAL_GPIO_Init+0x240>
 8005386:	2307      	movs	r3, #7
 8005388:	e00c      	b.n	80053a4 <HAL_GPIO_Init+0x240>
 800538a:	2306      	movs	r3, #6
 800538c:	e00a      	b.n	80053a4 <HAL_GPIO_Init+0x240>
 800538e:	2305      	movs	r3, #5
 8005390:	e008      	b.n	80053a4 <HAL_GPIO_Init+0x240>
 8005392:	2304      	movs	r3, #4
 8005394:	e006      	b.n	80053a4 <HAL_GPIO_Init+0x240>
 8005396:	2303      	movs	r3, #3
 8005398:	e004      	b.n	80053a4 <HAL_GPIO_Init+0x240>
 800539a:	2302      	movs	r3, #2
 800539c:	e002      	b.n	80053a4 <HAL_GPIO_Init+0x240>
 800539e:	2301      	movs	r3, #1
 80053a0:	e000      	b.n	80053a4 <HAL_GPIO_Init+0x240>
 80053a2:	2300      	movs	r3, #0
 80053a4:	69fa      	ldr	r2, [r7, #28]
 80053a6:	f002 0203 	and.w	r2, r2, #3
 80053aa:	0092      	lsls	r2, r2, #2
 80053ac:	4093      	lsls	r3, r2
 80053ae:	69ba      	ldr	r2, [r7, #24]
 80053b0:	4313      	orrs	r3, r2
 80053b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80053b4:	4934      	ldr	r1, [pc, #208]	; (8005488 <HAL_GPIO_Init+0x324>)
 80053b6:	69fb      	ldr	r3, [r7, #28]
 80053b8:	089b      	lsrs	r3, r3, #2
 80053ba:	3302      	adds	r3, #2
 80053bc:	69ba      	ldr	r2, [r7, #24]
 80053be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80053c2:	4b3c      	ldr	r3, [pc, #240]	; (80054b4 <HAL_GPIO_Init+0x350>)
 80053c4:	689b      	ldr	r3, [r3, #8]
 80053c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80053c8:	693b      	ldr	r3, [r7, #16]
 80053ca:	43db      	mvns	r3, r3
 80053cc:	69ba      	ldr	r2, [r7, #24]
 80053ce:	4013      	ands	r3, r2
 80053d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d003      	beq.n	80053e6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80053de:	69ba      	ldr	r2, [r7, #24]
 80053e0:	693b      	ldr	r3, [r7, #16]
 80053e2:	4313      	orrs	r3, r2
 80053e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80053e6:	4a33      	ldr	r2, [pc, #204]	; (80054b4 <HAL_GPIO_Init+0x350>)
 80053e8:	69bb      	ldr	r3, [r7, #24]
 80053ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80053ec:	4b31      	ldr	r3, [pc, #196]	; (80054b4 <HAL_GPIO_Init+0x350>)
 80053ee:	68db      	ldr	r3, [r3, #12]
 80053f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80053f2:	693b      	ldr	r3, [r7, #16]
 80053f4:	43db      	mvns	r3, r3
 80053f6:	69ba      	ldr	r2, [r7, #24]
 80053f8:	4013      	ands	r3, r2
 80053fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005404:	2b00      	cmp	r3, #0
 8005406:	d003      	beq.n	8005410 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005408:	69ba      	ldr	r2, [r7, #24]
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	4313      	orrs	r3, r2
 800540e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005410:	4a28      	ldr	r2, [pc, #160]	; (80054b4 <HAL_GPIO_Init+0x350>)
 8005412:	69bb      	ldr	r3, [r7, #24]
 8005414:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005416:	4b27      	ldr	r3, [pc, #156]	; (80054b4 <HAL_GPIO_Init+0x350>)
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800541c:	693b      	ldr	r3, [r7, #16]
 800541e:	43db      	mvns	r3, r3
 8005420:	69ba      	ldr	r2, [r7, #24]
 8005422:	4013      	ands	r3, r2
 8005424:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800542e:	2b00      	cmp	r3, #0
 8005430:	d003      	beq.n	800543a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005432:	69ba      	ldr	r2, [r7, #24]
 8005434:	693b      	ldr	r3, [r7, #16]
 8005436:	4313      	orrs	r3, r2
 8005438:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800543a:	4a1e      	ldr	r2, [pc, #120]	; (80054b4 <HAL_GPIO_Init+0x350>)
 800543c:	69bb      	ldr	r3, [r7, #24]
 800543e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005440:	4b1c      	ldr	r3, [pc, #112]	; (80054b4 <HAL_GPIO_Init+0x350>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005446:	693b      	ldr	r3, [r7, #16]
 8005448:	43db      	mvns	r3, r3
 800544a:	69ba      	ldr	r2, [r7, #24]
 800544c:	4013      	ands	r3, r2
 800544e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005458:	2b00      	cmp	r3, #0
 800545a:	d003      	beq.n	8005464 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800545c:	69ba      	ldr	r2, [r7, #24]
 800545e:	693b      	ldr	r3, [r7, #16]
 8005460:	4313      	orrs	r3, r2
 8005462:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005464:	4a13      	ldr	r2, [pc, #76]	; (80054b4 <HAL_GPIO_Init+0x350>)
 8005466:	69bb      	ldr	r3, [r7, #24]
 8005468:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800546a:	69fb      	ldr	r3, [r7, #28]
 800546c:	3301      	adds	r3, #1
 800546e:	61fb      	str	r3, [r7, #28]
 8005470:	69fb      	ldr	r3, [r7, #28]
 8005472:	2b0f      	cmp	r3, #15
 8005474:	f67f ae86 	bls.w	8005184 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005478:	bf00      	nop
 800547a:	3724      	adds	r7, #36	; 0x24
 800547c:	46bd      	mov	sp, r7
 800547e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005482:	4770      	bx	lr
 8005484:	40023800 	.word	0x40023800
 8005488:	40013800 	.word	0x40013800
 800548c:	40020000 	.word	0x40020000
 8005490:	40020400 	.word	0x40020400
 8005494:	40020800 	.word	0x40020800
 8005498:	40020c00 	.word	0x40020c00
 800549c:	40021000 	.word	0x40021000
 80054a0:	40021400 	.word	0x40021400
 80054a4:	40021800 	.word	0x40021800
 80054a8:	40021c00 	.word	0x40021c00
 80054ac:	40022000 	.word	0x40022000
 80054b0:	40022400 	.word	0x40022400
 80054b4:	40013c00 	.word	0x40013c00

080054b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80054b8:	b480      	push	{r7}
 80054ba:	b083      	sub	sp, #12
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
 80054c0:	460b      	mov	r3, r1
 80054c2:	807b      	strh	r3, [r7, #2]
 80054c4:	4613      	mov	r3, r2
 80054c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80054c8:	787b      	ldrb	r3, [r7, #1]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d003      	beq.n	80054d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80054ce:	887a      	ldrh	r2, [r7, #2]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80054d4:	e003      	b.n	80054de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80054d6:	887b      	ldrh	r3, [r7, #2]
 80054d8:	041a      	lsls	r2, r3, #16
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	619a      	str	r2, [r3, #24]
}
 80054de:	bf00      	nop
 80054e0:	370c      	adds	r7, #12
 80054e2:	46bd      	mov	sp, r7
 80054e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e8:	4770      	bx	lr
	...

080054ec <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b086      	sub	sp, #24
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80054f4:	2300      	movs	r3, #0
 80054f6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d101      	bne.n	8005502 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80054fe:	2301      	movs	r3, #1
 8005500:	e291      	b.n	8005a26 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f003 0301 	and.w	r3, r3, #1
 800550a:	2b00      	cmp	r3, #0
 800550c:	f000 8087 	beq.w	800561e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005510:	4b96      	ldr	r3, [pc, #600]	; (800576c <HAL_RCC_OscConfig+0x280>)
 8005512:	689b      	ldr	r3, [r3, #8]
 8005514:	f003 030c 	and.w	r3, r3, #12
 8005518:	2b04      	cmp	r3, #4
 800551a:	d00c      	beq.n	8005536 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800551c:	4b93      	ldr	r3, [pc, #588]	; (800576c <HAL_RCC_OscConfig+0x280>)
 800551e:	689b      	ldr	r3, [r3, #8]
 8005520:	f003 030c 	and.w	r3, r3, #12
 8005524:	2b08      	cmp	r3, #8
 8005526:	d112      	bne.n	800554e <HAL_RCC_OscConfig+0x62>
 8005528:	4b90      	ldr	r3, [pc, #576]	; (800576c <HAL_RCC_OscConfig+0x280>)
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005530:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005534:	d10b      	bne.n	800554e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005536:	4b8d      	ldr	r3, [pc, #564]	; (800576c <HAL_RCC_OscConfig+0x280>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800553e:	2b00      	cmp	r3, #0
 8005540:	d06c      	beq.n	800561c <HAL_RCC_OscConfig+0x130>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	685b      	ldr	r3, [r3, #4]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d168      	bne.n	800561c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800554a:	2301      	movs	r3, #1
 800554c:	e26b      	b.n	8005a26 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005556:	d106      	bne.n	8005566 <HAL_RCC_OscConfig+0x7a>
 8005558:	4b84      	ldr	r3, [pc, #528]	; (800576c <HAL_RCC_OscConfig+0x280>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a83      	ldr	r2, [pc, #524]	; (800576c <HAL_RCC_OscConfig+0x280>)
 800555e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005562:	6013      	str	r3, [r2, #0]
 8005564:	e02e      	b.n	80055c4 <HAL_RCC_OscConfig+0xd8>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	685b      	ldr	r3, [r3, #4]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d10c      	bne.n	8005588 <HAL_RCC_OscConfig+0x9c>
 800556e:	4b7f      	ldr	r3, [pc, #508]	; (800576c <HAL_RCC_OscConfig+0x280>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a7e      	ldr	r2, [pc, #504]	; (800576c <HAL_RCC_OscConfig+0x280>)
 8005574:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005578:	6013      	str	r3, [r2, #0]
 800557a:	4b7c      	ldr	r3, [pc, #496]	; (800576c <HAL_RCC_OscConfig+0x280>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a7b      	ldr	r2, [pc, #492]	; (800576c <HAL_RCC_OscConfig+0x280>)
 8005580:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005584:	6013      	str	r3, [r2, #0]
 8005586:	e01d      	b.n	80055c4 <HAL_RCC_OscConfig+0xd8>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	685b      	ldr	r3, [r3, #4]
 800558c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005590:	d10c      	bne.n	80055ac <HAL_RCC_OscConfig+0xc0>
 8005592:	4b76      	ldr	r3, [pc, #472]	; (800576c <HAL_RCC_OscConfig+0x280>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a75      	ldr	r2, [pc, #468]	; (800576c <HAL_RCC_OscConfig+0x280>)
 8005598:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800559c:	6013      	str	r3, [r2, #0]
 800559e:	4b73      	ldr	r3, [pc, #460]	; (800576c <HAL_RCC_OscConfig+0x280>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4a72      	ldr	r2, [pc, #456]	; (800576c <HAL_RCC_OscConfig+0x280>)
 80055a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055a8:	6013      	str	r3, [r2, #0]
 80055aa:	e00b      	b.n	80055c4 <HAL_RCC_OscConfig+0xd8>
 80055ac:	4b6f      	ldr	r3, [pc, #444]	; (800576c <HAL_RCC_OscConfig+0x280>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a6e      	ldr	r2, [pc, #440]	; (800576c <HAL_RCC_OscConfig+0x280>)
 80055b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055b6:	6013      	str	r3, [r2, #0]
 80055b8:	4b6c      	ldr	r3, [pc, #432]	; (800576c <HAL_RCC_OscConfig+0x280>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4a6b      	ldr	r2, [pc, #428]	; (800576c <HAL_RCC_OscConfig+0x280>)
 80055be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80055c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d013      	beq.n	80055f4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055cc:	f7fe fc98 	bl	8003f00 <HAL_GetTick>
 80055d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055d2:	e008      	b.n	80055e6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80055d4:	f7fe fc94 	bl	8003f00 <HAL_GetTick>
 80055d8:	4602      	mov	r2, r0
 80055da:	693b      	ldr	r3, [r7, #16]
 80055dc:	1ad3      	subs	r3, r2, r3
 80055de:	2b64      	cmp	r3, #100	; 0x64
 80055e0:	d901      	bls.n	80055e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80055e2:	2303      	movs	r3, #3
 80055e4:	e21f      	b.n	8005a26 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055e6:	4b61      	ldr	r3, [pc, #388]	; (800576c <HAL_RCC_OscConfig+0x280>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d0f0      	beq.n	80055d4 <HAL_RCC_OscConfig+0xe8>
 80055f2:	e014      	b.n	800561e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055f4:	f7fe fc84 	bl	8003f00 <HAL_GetTick>
 80055f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80055fa:	e008      	b.n	800560e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80055fc:	f7fe fc80 	bl	8003f00 <HAL_GetTick>
 8005600:	4602      	mov	r2, r0
 8005602:	693b      	ldr	r3, [r7, #16]
 8005604:	1ad3      	subs	r3, r2, r3
 8005606:	2b64      	cmp	r3, #100	; 0x64
 8005608:	d901      	bls.n	800560e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800560a:	2303      	movs	r3, #3
 800560c:	e20b      	b.n	8005a26 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800560e:	4b57      	ldr	r3, [pc, #348]	; (800576c <HAL_RCC_OscConfig+0x280>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005616:	2b00      	cmp	r3, #0
 8005618:	d1f0      	bne.n	80055fc <HAL_RCC_OscConfig+0x110>
 800561a:	e000      	b.n	800561e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800561c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f003 0302 	and.w	r3, r3, #2
 8005626:	2b00      	cmp	r3, #0
 8005628:	d069      	beq.n	80056fe <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800562a:	4b50      	ldr	r3, [pc, #320]	; (800576c <HAL_RCC_OscConfig+0x280>)
 800562c:	689b      	ldr	r3, [r3, #8]
 800562e:	f003 030c 	and.w	r3, r3, #12
 8005632:	2b00      	cmp	r3, #0
 8005634:	d00b      	beq.n	800564e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005636:	4b4d      	ldr	r3, [pc, #308]	; (800576c <HAL_RCC_OscConfig+0x280>)
 8005638:	689b      	ldr	r3, [r3, #8]
 800563a:	f003 030c 	and.w	r3, r3, #12
 800563e:	2b08      	cmp	r3, #8
 8005640:	d11c      	bne.n	800567c <HAL_RCC_OscConfig+0x190>
 8005642:	4b4a      	ldr	r3, [pc, #296]	; (800576c <HAL_RCC_OscConfig+0x280>)
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800564a:	2b00      	cmp	r3, #0
 800564c:	d116      	bne.n	800567c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800564e:	4b47      	ldr	r3, [pc, #284]	; (800576c <HAL_RCC_OscConfig+0x280>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f003 0302 	and.w	r3, r3, #2
 8005656:	2b00      	cmp	r3, #0
 8005658:	d005      	beq.n	8005666 <HAL_RCC_OscConfig+0x17a>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	68db      	ldr	r3, [r3, #12]
 800565e:	2b01      	cmp	r3, #1
 8005660:	d001      	beq.n	8005666 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005662:	2301      	movs	r3, #1
 8005664:	e1df      	b.n	8005a26 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005666:	4b41      	ldr	r3, [pc, #260]	; (800576c <HAL_RCC_OscConfig+0x280>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	691b      	ldr	r3, [r3, #16]
 8005672:	00db      	lsls	r3, r3, #3
 8005674:	493d      	ldr	r1, [pc, #244]	; (800576c <HAL_RCC_OscConfig+0x280>)
 8005676:	4313      	orrs	r3, r2
 8005678:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800567a:	e040      	b.n	80056fe <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	68db      	ldr	r3, [r3, #12]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d023      	beq.n	80056cc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005684:	4b39      	ldr	r3, [pc, #228]	; (800576c <HAL_RCC_OscConfig+0x280>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4a38      	ldr	r2, [pc, #224]	; (800576c <HAL_RCC_OscConfig+0x280>)
 800568a:	f043 0301 	orr.w	r3, r3, #1
 800568e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005690:	f7fe fc36 	bl	8003f00 <HAL_GetTick>
 8005694:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005696:	e008      	b.n	80056aa <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005698:	f7fe fc32 	bl	8003f00 <HAL_GetTick>
 800569c:	4602      	mov	r2, r0
 800569e:	693b      	ldr	r3, [r7, #16]
 80056a0:	1ad3      	subs	r3, r2, r3
 80056a2:	2b02      	cmp	r3, #2
 80056a4:	d901      	bls.n	80056aa <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80056a6:	2303      	movs	r3, #3
 80056a8:	e1bd      	b.n	8005a26 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056aa:	4b30      	ldr	r3, [pc, #192]	; (800576c <HAL_RCC_OscConfig+0x280>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f003 0302 	and.w	r3, r3, #2
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d0f0      	beq.n	8005698 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056b6:	4b2d      	ldr	r3, [pc, #180]	; (800576c <HAL_RCC_OscConfig+0x280>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	691b      	ldr	r3, [r3, #16]
 80056c2:	00db      	lsls	r3, r3, #3
 80056c4:	4929      	ldr	r1, [pc, #164]	; (800576c <HAL_RCC_OscConfig+0x280>)
 80056c6:	4313      	orrs	r3, r2
 80056c8:	600b      	str	r3, [r1, #0]
 80056ca:	e018      	b.n	80056fe <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80056cc:	4b27      	ldr	r3, [pc, #156]	; (800576c <HAL_RCC_OscConfig+0x280>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4a26      	ldr	r2, [pc, #152]	; (800576c <HAL_RCC_OscConfig+0x280>)
 80056d2:	f023 0301 	bic.w	r3, r3, #1
 80056d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056d8:	f7fe fc12 	bl	8003f00 <HAL_GetTick>
 80056dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80056de:	e008      	b.n	80056f2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80056e0:	f7fe fc0e 	bl	8003f00 <HAL_GetTick>
 80056e4:	4602      	mov	r2, r0
 80056e6:	693b      	ldr	r3, [r7, #16]
 80056e8:	1ad3      	subs	r3, r2, r3
 80056ea:	2b02      	cmp	r3, #2
 80056ec:	d901      	bls.n	80056f2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80056ee:	2303      	movs	r3, #3
 80056f0:	e199      	b.n	8005a26 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80056f2:	4b1e      	ldr	r3, [pc, #120]	; (800576c <HAL_RCC_OscConfig+0x280>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f003 0302 	and.w	r3, r3, #2
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d1f0      	bne.n	80056e0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f003 0308 	and.w	r3, r3, #8
 8005706:	2b00      	cmp	r3, #0
 8005708:	d038      	beq.n	800577c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	695b      	ldr	r3, [r3, #20]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d019      	beq.n	8005746 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005712:	4b16      	ldr	r3, [pc, #88]	; (800576c <HAL_RCC_OscConfig+0x280>)
 8005714:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005716:	4a15      	ldr	r2, [pc, #84]	; (800576c <HAL_RCC_OscConfig+0x280>)
 8005718:	f043 0301 	orr.w	r3, r3, #1
 800571c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800571e:	f7fe fbef 	bl	8003f00 <HAL_GetTick>
 8005722:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005724:	e008      	b.n	8005738 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005726:	f7fe fbeb 	bl	8003f00 <HAL_GetTick>
 800572a:	4602      	mov	r2, r0
 800572c:	693b      	ldr	r3, [r7, #16]
 800572e:	1ad3      	subs	r3, r2, r3
 8005730:	2b02      	cmp	r3, #2
 8005732:	d901      	bls.n	8005738 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005734:	2303      	movs	r3, #3
 8005736:	e176      	b.n	8005a26 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005738:	4b0c      	ldr	r3, [pc, #48]	; (800576c <HAL_RCC_OscConfig+0x280>)
 800573a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800573c:	f003 0302 	and.w	r3, r3, #2
 8005740:	2b00      	cmp	r3, #0
 8005742:	d0f0      	beq.n	8005726 <HAL_RCC_OscConfig+0x23a>
 8005744:	e01a      	b.n	800577c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005746:	4b09      	ldr	r3, [pc, #36]	; (800576c <HAL_RCC_OscConfig+0x280>)
 8005748:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800574a:	4a08      	ldr	r2, [pc, #32]	; (800576c <HAL_RCC_OscConfig+0x280>)
 800574c:	f023 0301 	bic.w	r3, r3, #1
 8005750:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005752:	f7fe fbd5 	bl	8003f00 <HAL_GetTick>
 8005756:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005758:	e00a      	b.n	8005770 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800575a:	f7fe fbd1 	bl	8003f00 <HAL_GetTick>
 800575e:	4602      	mov	r2, r0
 8005760:	693b      	ldr	r3, [r7, #16]
 8005762:	1ad3      	subs	r3, r2, r3
 8005764:	2b02      	cmp	r3, #2
 8005766:	d903      	bls.n	8005770 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005768:	2303      	movs	r3, #3
 800576a:	e15c      	b.n	8005a26 <HAL_RCC_OscConfig+0x53a>
 800576c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005770:	4b91      	ldr	r3, [pc, #580]	; (80059b8 <HAL_RCC_OscConfig+0x4cc>)
 8005772:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005774:	f003 0302 	and.w	r3, r3, #2
 8005778:	2b00      	cmp	r3, #0
 800577a:	d1ee      	bne.n	800575a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f003 0304 	and.w	r3, r3, #4
 8005784:	2b00      	cmp	r3, #0
 8005786:	f000 80a4 	beq.w	80058d2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800578a:	4b8b      	ldr	r3, [pc, #556]	; (80059b8 <HAL_RCC_OscConfig+0x4cc>)
 800578c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800578e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005792:	2b00      	cmp	r3, #0
 8005794:	d10d      	bne.n	80057b2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8005796:	4b88      	ldr	r3, [pc, #544]	; (80059b8 <HAL_RCC_OscConfig+0x4cc>)
 8005798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800579a:	4a87      	ldr	r2, [pc, #540]	; (80059b8 <HAL_RCC_OscConfig+0x4cc>)
 800579c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057a0:	6413      	str	r3, [r2, #64]	; 0x40
 80057a2:	4b85      	ldr	r3, [pc, #532]	; (80059b8 <HAL_RCC_OscConfig+0x4cc>)
 80057a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057aa:	60bb      	str	r3, [r7, #8]
 80057ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80057ae:	2301      	movs	r3, #1
 80057b0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80057b2:	4b82      	ldr	r3, [pc, #520]	; (80059bc <HAL_RCC_OscConfig+0x4d0>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d118      	bne.n	80057f0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80057be:	4b7f      	ldr	r3, [pc, #508]	; (80059bc <HAL_RCC_OscConfig+0x4d0>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4a7e      	ldr	r2, [pc, #504]	; (80059bc <HAL_RCC_OscConfig+0x4d0>)
 80057c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80057ca:	f7fe fb99 	bl	8003f00 <HAL_GetTick>
 80057ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80057d0:	e008      	b.n	80057e4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057d2:	f7fe fb95 	bl	8003f00 <HAL_GetTick>
 80057d6:	4602      	mov	r2, r0
 80057d8:	693b      	ldr	r3, [r7, #16]
 80057da:	1ad3      	subs	r3, r2, r3
 80057dc:	2b64      	cmp	r3, #100	; 0x64
 80057de:	d901      	bls.n	80057e4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80057e0:	2303      	movs	r3, #3
 80057e2:	e120      	b.n	8005a26 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80057e4:	4b75      	ldr	r3, [pc, #468]	; (80059bc <HAL_RCC_OscConfig+0x4d0>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d0f0      	beq.n	80057d2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	689b      	ldr	r3, [r3, #8]
 80057f4:	2b01      	cmp	r3, #1
 80057f6:	d106      	bne.n	8005806 <HAL_RCC_OscConfig+0x31a>
 80057f8:	4b6f      	ldr	r3, [pc, #444]	; (80059b8 <HAL_RCC_OscConfig+0x4cc>)
 80057fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057fc:	4a6e      	ldr	r2, [pc, #440]	; (80059b8 <HAL_RCC_OscConfig+0x4cc>)
 80057fe:	f043 0301 	orr.w	r3, r3, #1
 8005802:	6713      	str	r3, [r2, #112]	; 0x70
 8005804:	e02d      	b.n	8005862 <HAL_RCC_OscConfig+0x376>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	689b      	ldr	r3, [r3, #8]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d10c      	bne.n	8005828 <HAL_RCC_OscConfig+0x33c>
 800580e:	4b6a      	ldr	r3, [pc, #424]	; (80059b8 <HAL_RCC_OscConfig+0x4cc>)
 8005810:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005812:	4a69      	ldr	r2, [pc, #420]	; (80059b8 <HAL_RCC_OscConfig+0x4cc>)
 8005814:	f023 0301 	bic.w	r3, r3, #1
 8005818:	6713      	str	r3, [r2, #112]	; 0x70
 800581a:	4b67      	ldr	r3, [pc, #412]	; (80059b8 <HAL_RCC_OscConfig+0x4cc>)
 800581c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800581e:	4a66      	ldr	r2, [pc, #408]	; (80059b8 <HAL_RCC_OscConfig+0x4cc>)
 8005820:	f023 0304 	bic.w	r3, r3, #4
 8005824:	6713      	str	r3, [r2, #112]	; 0x70
 8005826:	e01c      	b.n	8005862 <HAL_RCC_OscConfig+0x376>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	689b      	ldr	r3, [r3, #8]
 800582c:	2b05      	cmp	r3, #5
 800582e:	d10c      	bne.n	800584a <HAL_RCC_OscConfig+0x35e>
 8005830:	4b61      	ldr	r3, [pc, #388]	; (80059b8 <HAL_RCC_OscConfig+0x4cc>)
 8005832:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005834:	4a60      	ldr	r2, [pc, #384]	; (80059b8 <HAL_RCC_OscConfig+0x4cc>)
 8005836:	f043 0304 	orr.w	r3, r3, #4
 800583a:	6713      	str	r3, [r2, #112]	; 0x70
 800583c:	4b5e      	ldr	r3, [pc, #376]	; (80059b8 <HAL_RCC_OscConfig+0x4cc>)
 800583e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005840:	4a5d      	ldr	r2, [pc, #372]	; (80059b8 <HAL_RCC_OscConfig+0x4cc>)
 8005842:	f043 0301 	orr.w	r3, r3, #1
 8005846:	6713      	str	r3, [r2, #112]	; 0x70
 8005848:	e00b      	b.n	8005862 <HAL_RCC_OscConfig+0x376>
 800584a:	4b5b      	ldr	r3, [pc, #364]	; (80059b8 <HAL_RCC_OscConfig+0x4cc>)
 800584c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800584e:	4a5a      	ldr	r2, [pc, #360]	; (80059b8 <HAL_RCC_OscConfig+0x4cc>)
 8005850:	f023 0301 	bic.w	r3, r3, #1
 8005854:	6713      	str	r3, [r2, #112]	; 0x70
 8005856:	4b58      	ldr	r3, [pc, #352]	; (80059b8 <HAL_RCC_OscConfig+0x4cc>)
 8005858:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800585a:	4a57      	ldr	r2, [pc, #348]	; (80059b8 <HAL_RCC_OscConfig+0x4cc>)
 800585c:	f023 0304 	bic.w	r3, r3, #4
 8005860:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	689b      	ldr	r3, [r3, #8]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d015      	beq.n	8005896 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800586a:	f7fe fb49 	bl	8003f00 <HAL_GetTick>
 800586e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005870:	e00a      	b.n	8005888 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005872:	f7fe fb45 	bl	8003f00 <HAL_GetTick>
 8005876:	4602      	mov	r2, r0
 8005878:	693b      	ldr	r3, [r7, #16]
 800587a:	1ad3      	subs	r3, r2, r3
 800587c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005880:	4293      	cmp	r3, r2
 8005882:	d901      	bls.n	8005888 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005884:	2303      	movs	r3, #3
 8005886:	e0ce      	b.n	8005a26 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005888:	4b4b      	ldr	r3, [pc, #300]	; (80059b8 <HAL_RCC_OscConfig+0x4cc>)
 800588a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800588c:	f003 0302 	and.w	r3, r3, #2
 8005890:	2b00      	cmp	r3, #0
 8005892:	d0ee      	beq.n	8005872 <HAL_RCC_OscConfig+0x386>
 8005894:	e014      	b.n	80058c0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005896:	f7fe fb33 	bl	8003f00 <HAL_GetTick>
 800589a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800589c:	e00a      	b.n	80058b4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800589e:	f7fe fb2f 	bl	8003f00 <HAL_GetTick>
 80058a2:	4602      	mov	r2, r0
 80058a4:	693b      	ldr	r3, [r7, #16]
 80058a6:	1ad3      	subs	r3, r2, r3
 80058a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d901      	bls.n	80058b4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80058b0:	2303      	movs	r3, #3
 80058b2:	e0b8      	b.n	8005a26 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80058b4:	4b40      	ldr	r3, [pc, #256]	; (80059b8 <HAL_RCC_OscConfig+0x4cc>)
 80058b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058b8:	f003 0302 	and.w	r3, r3, #2
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d1ee      	bne.n	800589e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80058c0:	7dfb      	ldrb	r3, [r7, #23]
 80058c2:	2b01      	cmp	r3, #1
 80058c4:	d105      	bne.n	80058d2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80058c6:	4b3c      	ldr	r3, [pc, #240]	; (80059b8 <HAL_RCC_OscConfig+0x4cc>)
 80058c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ca:	4a3b      	ldr	r2, [pc, #236]	; (80059b8 <HAL_RCC_OscConfig+0x4cc>)
 80058cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80058d0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	699b      	ldr	r3, [r3, #24]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	f000 80a4 	beq.w	8005a24 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80058dc:	4b36      	ldr	r3, [pc, #216]	; (80059b8 <HAL_RCC_OscConfig+0x4cc>)
 80058de:	689b      	ldr	r3, [r3, #8]
 80058e0:	f003 030c 	and.w	r3, r3, #12
 80058e4:	2b08      	cmp	r3, #8
 80058e6:	d06b      	beq.n	80059c0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	699b      	ldr	r3, [r3, #24]
 80058ec:	2b02      	cmp	r3, #2
 80058ee:	d149      	bne.n	8005984 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058f0:	4b31      	ldr	r3, [pc, #196]	; (80059b8 <HAL_RCC_OscConfig+0x4cc>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4a30      	ldr	r2, [pc, #192]	; (80059b8 <HAL_RCC_OscConfig+0x4cc>)
 80058f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80058fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058fc:	f7fe fb00 	bl	8003f00 <HAL_GetTick>
 8005900:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005902:	e008      	b.n	8005916 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005904:	f7fe fafc 	bl	8003f00 <HAL_GetTick>
 8005908:	4602      	mov	r2, r0
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	1ad3      	subs	r3, r2, r3
 800590e:	2b02      	cmp	r3, #2
 8005910:	d901      	bls.n	8005916 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8005912:	2303      	movs	r3, #3
 8005914:	e087      	b.n	8005a26 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005916:	4b28      	ldr	r3, [pc, #160]	; (80059b8 <HAL_RCC_OscConfig+0x4cc>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800591e:	2b00      	cmp	r3, #0
 8005920:	d1f0      	bne.n	8005904 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	69da      	ldr	r2, [r3, #28]
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6a1b      	ldr	r3, [r3, #32]
 800592a:	431a      	orrs	r2, r3
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005930:	019b      	lsls	r3, r3, #6
 8005932:	431a      	orrs	r2, r3
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005938:	085b      	lsrs	r3, r3, #1
 800593a:	3b01      	subs	r3, #1
 800593c:	041b      	lsls	r3, r3, #16
 800593e:	431a      	orrs	r2, r3
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005944:	061b      	lsls	r3, r3, #24
 8005946:	4313      	orrs	r3, r2
 8005948:	4a1b      	ldr	r2, [pc, #108]	; (80059b8 <HAL_RCC_OscConfig+0x4cc>)
 800594a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800594e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005950:	4b19      	ldr	r3, [pc, #100]	; (80059b8 <HAL_RCC_OscConfig+0x4cc>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a18      	ldr	r2, [pc, #96]	; (80059b8 <HAL_RCC_OscConfig+0x4cc>)
 8005956:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800595a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800595c:	f7fe fad0 	bl	8003f00 <HAL_GetTick>
 8005960:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005962:	e008      	b.n	8005976 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005964:	f7fe facc 	bl	8003f00 <HAL_GetTick>
 8005968:	4602      	mov	r2, r0
 800596a:	693b      	ldr	r3, [r7, #16]
 800596c:	1ad3      	subs	r3, r2, r3
 800596e:	2b02      	cmp	r3, #2
 8005970:	d901      	bls.n	8005976 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8005972:	2303      	movs	r3, #3
 8005974:	e057      	b.n	8005a26 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005976:	4b10      	ldr	r3, [pc, #64]	; (80059b8 <HAL_RCC_OscConfig+0x4cc>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800597e:	2b00      	cmp	r3, #0
 8005980:	d0f0      	beq.n	8005964 <HAL_RCC_OscConfig+0x478>
 8005982:	e04f      	b.n	8005a24 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005984:	4b0c      	ldr	r3, [pc, #48]	; (80059b8 <HAL_RCC_OscConfig+0x4cc>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a0b      	ldr	r2, [pc, #44]	; (80059b8 <HAL_RCC_OscConfig+0x4cc>)
 800598a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800598e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005990:	f7fe fab6 	bl	8003f00 <HAL_GetTick>
 8005994:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005996:	e008      	b.n	80059aa <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005998:	f7fe fab2 	bl	8003f00 <HAL_GetTick>
 800599c:	4602      	mov	r2, r0
 800599e:	693b      	ldr	r3, [r7, #16]
 80059a0:	1ad3      	subs	r3, r2, r3
 80059a2:	2b02      	cmp	r3, #2
 80059a4:	d901      	bls.n	80059aa <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80059a6:	2303      	movs	r3, #3
 80059a8:	e03d      	b.n	8005a26 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80059aa:	4b03      	ldr	r3, [pc, #12]	; (80059b8 <HAL_RCC_OscConfig+0x4cc>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d1f0      	bne.n	8005998 <HAL_RCC_OscConfig+0x4ac>
 80059b6:	e035      	b.n	8005a24 <HAL_RCC_OscConfig+0x538>
 80059b8:	40023800 	.word	0x40023800
 80059bc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80059c0:	4b1b      	ldr	r3, [pc, #108]	; (8005a30 <HAL_RCC_OscConfig+0x544>)
 80059c2:	685b      	ldr	r3, [r3, #4]
 80059c4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	699b      	ldr	r3, [r3, #24]
 80059ca:	2b01      	cmp	r3, #1
 80059cc:	d028      	beq.n	8005a20 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80059d8:	429a      	cmp	r2, r3
 80059da:	d121      	bne.n	8005a20 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059e6:	429a      	cmp	r2, r3
 80059e8:	d11a      	bne.n	8005a20 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80059ea:	68fa      	ldr	r2, [r7, #12]
 80059ec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80059f0:	4013      	ands	r3, r2
 80059f2:	687a      	ldr	r2, [r7, #4]
 80059f4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80059f6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d111      	bne.n	8005a20 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a06:	085b      	lsrs	r3, r3, #1
 8005a08:	3b01      	subs	r3, #1
 8005a0a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005a0c:	429a      	cmp	r2, r3
 8005a0e:	d107      	bne.n	8005a20 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a1a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005a1c:	429a      	cmp	r2, r3
 8005a1e:	d001      	beq.n	8005a24 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8005a20:	2301      	movs	r3, #1
 8005a22:	e000      	b.n	8005a26 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8005a24:	2300      	movs	r3, #0
}
 8005a26:	4618      	mov	r0, r3
 8005a28:	3718      	adds	r7, #24
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bd80      	pop	{r7, pc}
 8005a2e:	bf00      	nop
 8005a30:	40023800 	.word	0x40023800

08005a34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b084      	sub	sp, #16
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
 8005a3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005a3e:	2300      	movs	r3, #0
 8005a40:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d101      	bne.n	8005a4c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005a48:	2301      	movs	r3, #1
 8005a4a:	e0d0      	b.n	8005bee <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005a4c:	4b6a      	ldr	r3, [pc, #424]	; (8005bf8 <HAL_RCC_ClockConfig+0x1c4>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f003 030f 	and.w	r3, r3, #15
 8005a54:	683a      	ldr	r2, [r7, #0]
 8005a56:	429a      	cmp	r2, r3
 8005a58:	d910      	bls.n	8005a7c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a5a:	4b67      	ldr	r3, [pc, #412]	; (8005bf8 <HAL_RCC_ClockConfig+0x1c4>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f023 020f 	bic.w	r2, r3, #15
 8005a62:	4965      	ldr	r1, [pc, #404]	; (8005bf8 <HAL_RCC_ClockConfig+0x1c4>)
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	4313      	orrs	r3, r2
 8005a68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a6a:	4b63      	ldr	r3, [pc, #396]	; (8005bf8 <HAL_RCC_ClockConfig+0x1c4>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f003 030f 	and.w	r3, r3, #15
 8005a72:	683a      	ldr	r2, [r7, #0]
 8005a74:	429a      	cmp	r2, r3
 8005a76:	d001      	beq.n	8005a7c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005a78:	2301      	movs	r3, #1
 8005a7a:	e0b8      	b.n	8005bee <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f003 0302 	and.w	r3, r3, #2
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d020      	beq.n	8005aca <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f003 0304 	and.w	r3, r3, #4
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d005      	beq.n	8005aa0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005a94:	4b59      	ldr	r3, [pc, #356]	; (8005bfc <HAL_RCC_ClockConfig+0x1c8>)
 8005a96:	689b      	ldr	r3, [r3, #8]
 8005a98:	4a58      	ldr	r2, [pc, #352]	; (8005bfc <HAL_RCC_ClockConfig+0x1c8>)
 8005a9a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005a9e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f003 0308 	and.w	r3, r3, #8
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d005      	beq.n	8005ab8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005aac:	4b53      	ldr	r3, [pc, #332]	; (8005bfc <HAL_RCC_ClockConfig+0x1c8>)
 8005aae:	689b      	ldr	r3, [r3, #8]
 8005ab0:	4a52      	ldr	r2, [pc, #328]	; (8005bfc <HAL_RCC_ClockConfig+0x1c8>)
 8005ab2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005ab6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ab8:	4b50      	ldr	r3, [pc, #320]	; (8005bfc <HAL_RCC_ClockConfig+0x1c8>)
 8005aba:	689b      	ldr	r3, [r3, #8]
 8005abc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	689b      	ldr	r3, [r3, #8]
 8005ac4:	494d      	ldr	r1, [pc, #308]	; (8005bfc <HAL_RCC_ClockConfig+0x1c8>)
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f003 0301 	and.w	r3, r3, #1
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d040      	beq.n	8005b58 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	685b      	ldr	r3, [r3, #4]
 8005ada:	2b01      	cmp	r3, #1
 8005adc:	d107      	bne.n	8005aee <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ade:	4b47      	ldr	r3, [pc, #284]	; (8005bfc <HAL_RCC_ClockConfig+0x1c8>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d115      	bne.n	8005b16 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005aea:	2301      	movs	r3, #1
 8005aec:	e07f      	b.n	8005bee <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	685b      	ldr	r3, [r3, #4]
 8005af2:	2b02      	cmp	r3, #2
 8005af4:	d107      	bne.n	8005b06 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005af6:	4b41      	ldr	r3, [pc, #260]	; (8005bfc <HAL_RCC_ClockConfig+0x1c8>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d109      	bne.n	8005b16 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005b02:	2301      	movs	r3, #1
 8005b04:	e073      	b.n	8005bee <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b06:	4b3d      	ldr	r3, [pc, #244]	; (8005bfc <HAL_RCC_ClockConfig+0x1c8>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f003 0302 	and.w	r3, r3, #2
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d101      	bne.n	8005b16 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005b12:	2301      	movs	r3, #1
 8005b14:	e06b      	b.n	8005bee <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005b16:	4b39      	ldr	r3, [pc, #228]	; (8005bfc <HAL_RCC_ClockConfig+0x1c8>)
 8005b18:	689b      	ldr	r3, [r3, #8]
 8005b1a:	f023 0203 	bic.w	r2, r3, #3
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	685b      	ldr	r3, [r3, #4]
 8005b22:	4936      	ldr	r1, [pc, #216]	; (8005bfc <HAL_RCC_ClockConfig+0x1c8>)
 8005b24:	4313      	orrs	r3, r2
 8005b26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b28:	f7fe f9ea 	bl	8003f00 <HAL_GetTick>
 8005b2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b2e:	e00a      	b.n	8005b46 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b30:	f7fe f9e6 	bl	8003f00 <HAL_GetTick>
 8005b34:	4602      	mov	r2, r0
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	1ad3      	subs	r3, r2, r3
 8005b3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d901      	bls.n	8005b46 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8005b42:	2303      	movs	r3, #3
 8005b44:	e053      	b.n	8005bee <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b46:	4b2d      	ldr	r3, [pc, #180]	; (8005bfc <HAL_RCC_ClockConfig+0x1c8>)
 8005b48:	689b      	ldr	r3, [r3, #8]
 8005b4a:	f003 020c 	and.w	r2, r3, #12
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	009b      	lsls	r3, r3, #2
 8005b54:	429a      	cmp	r2, r3
 8005b56:	d1eb      	bne.n	8005b30 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005b58:	4b27      	ldr	r3, [pc, #156]	; (8005bf8 <HAL_RCC_ClockConfig+0x1c4>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f003 030f 	and.w	r3, r3, #15
 8005b60:	683a      	ldr	r2, [r7, #0]
 8005b62:	429a      	cmp	r2, r3
 8005b64:	d210      	bcs.n	8005b88 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b66:	4b24      	ldr	r3, [pc, #144]	; (8005bf8 <HAL_RCC_ClockConfig+0x1c4>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f023 020f 	bic.w	r2, r3, #15
 8005b6e:	4922      	ldr	r1, [pc, #136]	; (8005bf8 <HAL_RCC_ClockConfig+0x1c4>)
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	4313      	orrs	r3, r2
 8005b74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b76:	4b20      	ldr	r3, [pc, #128]	; (8005bf8 <HAL_RCC_ClockConfig+0x1c4>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f003 030f 	and.w	r3, r3, #15
 8005b7e:	683a      	ldr	r2, [r7, #0]
 8005b80:	429a      	cmp	r2, r3
 8005b82:	d001      	beq.n	8005b88 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005b84:	2301      	movs	r3, #1
 8005b86:	e032      	b.n	8005bee <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f003 0304 	and.w	r3, r3, #4
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d008      	beq.n	8005ba6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005b94:	4b19      	ldr	r3, [pc, #100]	; (8005bfc <HAL_RCC_ClockConfig+0x1c8>)
 8005b96:	689b      	ldr	r3, [r3, #8]
 8005b98:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	68db      	ldr	r3, [r3, #12]
 8005ba0:	4916      	ldr	r1, [pc, #88]	; (8005bfc <HAL_RCC_ClockConfig+0x1c8>)
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f003 0308 	and.w	r3, r3, #8
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d009      	beq.n	8005bc6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005bb2:	4b12      	ldr	r3, [pc, #72]	; (8005bfc <HAL_RCC_ClockConfig+0x1c8>)
 8005bb4:	689b      	ldr	r3, [r3, #8]
 8005bb6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	691b      	ldr	r3, [r3, #16]
 8005bbe:	00db      	lsls	r3, r3, #3
 8005bc0:	490e      	ldr	r1, [pc, #56]	; (8005bfc <HAL_RCC_ClockConfig+0x1c8>)
 8005bc2:	4313      	orrs	r3, r2
 8005bc4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005bc6:	f000 f821 	bl	8005c0c <HAL_RCC_GetSysClockFreq>
 8005bca:	4601      	mov	r1, r0
 8005bcc:	4b0b      	ldr	r3, [pc, #44]	; (8005bfc <HAL_RCC_ClockConfig+0x1c8>)
 8005bce:	689b      	ldr	r3, [r3, #8]
 8005bd0:	091b      	lsrs	r3, r3, #4
 8005bd2:	f003 030f 	and.w	r3, r3, #15
 8005bd6:	4a0a      	ldr	r2, [pc, #40]	; (8005c00 <HAL_RCC_ClockConfig+0x1cc>)
 8005bd8:	5cd3      	ldrb	r3, [r2, r3]
 8005bda:	fa21 f303 	lsr.w	r3, r1, r3
 8005bde:	4a09      	ldr	r2, [pc, #36]	; (8005c04 <HAL_RCC_ClockConfig+0x1d0>)
 8005be0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005be2:	4b09      	ldr	r3, [pc, #36]	; (8005c08 <HAL_RCC_ClockConfig+0x1d4>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	4618      	mov	r0, r3
 8005be8:	f7fe f946 	bl	8003e78 <HAL_InitTick>

  return HAL_OK;
 8005bec:	2300      	movs	r3, #0
}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	3710      	adds	r7, #16
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd80      	pop	{r7, pc}
 8005bf6:	bf00      	nop
 8005bf8:	40023c00 	.word	0x40023c00
 8005bfc:	40023800 	.word	0x40023800
 8005c00:	080069e4 	.word	0x080069e4
 8005c04:	20000108 	.word	0x20000108
 8005c08:	2000010c 	.word	0x2000010c

08005c0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c0e:	b085      	sub	sp, #20
 8005c10:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005c12:	2300      	movs	r3, #0
 8005c14:	607b      	str	r3, [r7, #4]
 8005c16:	2300      	movs	r3, #0
 8005c18:	60fb      	str	r3, [r7, #12]
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005c22:	4b50      	ldr	r3, [pc, #320]	; (8005d64 <HAL_RCC_GetSysClockFreq+0x158>)
 8005c24:	689b      	ldr	r3, [r3, #8]
 8005c26:	f003 030c 	and.w	r3, r3, #12
 8005c2a:	2b04      	cmp	r3, #4
 8005c2c:	d007      	beq.n	8005c3e <HAL_RCC_GetSysClockFreq+0x32>
 8005c2e:	2b08      	cmp	r3, #8
 8005c30:	d008      	beq.n	8005c44 <HAL_RCC_GetSysClockFreq+0x38>
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	f040 808d 	bne.w	8005d52 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005c38:	4b4b      	ldr	r3, [pc, #300]	; (8005d68 <HAL_RCC_GetSysClockFreq+0x15c>)
 8005c3a:	60bb      	str	r3, [r7, #8]
      break;
 8005c3c:	e08c      	b.n	8005d58 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005c3e:	4b4b      	ldr	r3, [pc, #300]	; (8005d6c <HAL_RCC_GetSysClockFreq+0x160>)
 8005c40:	60bb      	str	r3, [r7, #8]
      break;
 8005c42:	e089      	b.n	8005d58 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005c44:	4b47      	ldr	r3, [pc, #284]	; (8005d64 <HAL_RCC_GetSysClockFreq+0x158>)
 8005c46:	685b      	ldr	r3, [r3, #4]
 8005c48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005c4c:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005c4e:	4b45      	ldr	r3, [pc, #276]	; (8005d64 <HAL_RCC_GetSysClockFreq+0x158>)
 8005c50:	685b      	ldr	r3, [r3, #4]
 8005c52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d023      	beq.n	8005ca2 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c5a:	4b42      	ldr	r3, [pc, #264]	; (8005d64 <HAL_RCC_GetSysClockFreq+0x158>)
 8005c5c:	685b      	ldr	r3, [r3, #4]
 8005c5e:	099b      	lsrs	r3, r3, #6
 8005c60:	f04f 0400 	mov.w	r4, #0
 8005c64:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005c68:	f04f 0200 	mov.w	r2, #0
 8005c6c:	ea03 0501 	and.w	r5, r3, r1
 8005c70:	ea04 0602 	and.w	r6, r4, r2
 8005c74:	4a3d      	ldr	r2, [pc, #244]	; (8005d6c <HAL_RCC_GetSysClockFreq+0x160>)
 8005c76:	fb02 f106 	mul.w	r1, r2, r6
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	fb02 f205 	mul.w	r2, r2, r5
 8005c80:	440a      	add	r2, r1
 8005c82:	493a      	ldr	r1, [pc, #232]	; (8005d6c <HAL_RCC_GetSysClockFreq+0x160>)
 8005c84:	fba5 0101 	umull	r0, r1, r5, r1
 8005c88:	1853      	adds	r3, r2, r1
 8005c8a:	4619      	mov	r1, r3
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	f04f 0400 	mov.w	r4, #0
 8005c92:	461a      	mov	r2, r3
 8005c94:	4623      	mov	r3, r4
 8005c96:	f7fa ff65 	bl	8000b64 <__aeabi_uldivmod>
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	460c      	mov	r4, r1
 8005c9e:	60fb      	str	r3, [r7, #12]
 8005ca0:	e049      	b.n	8005d36 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005ca2:	4b30      	ldr	r3, [pc, #192]	; (8005d64 <HAL_RCC_GetSysClockFreq+0x158>)
 8005ca4:	685b      	ldr	r3, [r3, #4]
 8005ca6:	099b      	lsrs	r3, r3, #6
 8005ca8:	f04f 0400 	mov.w	r4, #0
 8005cac:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005cb0:	f04f 0200 	mov.w	r2, #0
 8005cb4:	ea03 0501 	and.w	r5, r3, r1
 8005cb8:	ea04 0602 	and.w	r6, r4, r2
 8005cbc:	4629      	mov	r1, r5
 8005cbe:	4632      	mov	r2, r6
 8005cc0:	f04f 0300 	mov.w	r3, #0
 8005cc4:	f04f 0400 	mov.w	r4, #0
 8005cc8:	0154      	lsls	r4, r2, #5
 8005cca:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005cce:	014b      	lsls	r3, r1, #5
 8005cd0:	4619      	mov	r1, r3
 8005cd2:	4622      	mov	r2, r4
 8005cd4:	1b49      	subs	r1, r1, r5
 8005cd6:	eb62 0206 	sbc.w	r2, r2, r6
 8005cda:	f04f 0300 	mov.w	r3, #0
 8005cde:	f04f 0400 	mov.w	r4, #0
 8005ce2:	0194      	lsls	r4, r2, #6
 8005ce4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005ce8:	018b      	lsls	r3, r1, #6
 8005cea:	1a5b      	subs	r3, r3, r1
 8005cec:	eb64 0402 	sbc.w	r4, r4, r2
 8005cf0:	f04f 0100 	mov.w	r1, #0
 8005cf4:	f04f 0200 	mov.w	r2, #0
 8005cf8:	00e2      	lsls	r2, r4, #3
 8005cfa:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005cfe:	00d9      	lsls	r1, r3, #3
 8005d00:	460b      	mov	r3, r1
 8005d02:	4614      	mov	r4, r2
 8005d04:	195b      	adds	r3, r3, r5
 8005d06:	eb44 0406 	adc.w	r4, r4, r6
 8005d0a:	f04f 0100 	mov.w	r1, #0
 8005d0e:	f04f 0200 	mov.w	r2, #0
 8005d12:	02a2      	lsls	r2, r4, #10
 8005d14:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005d18:	0299      	lsls	r1, r3, #10
 8005d1a:	460b      	mov	r3, r1
 8005d1c:	4614      	mov	r4, r2
 8005d1e:	4618      	mov	r0, r3
 8005d20:	4621      	mov	r1, r4
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	f04f 0400 	mov.w	r4, #0
 8005d28:	461a      	mov	r2, r3
 8005d2a:	4623      	mov	r3, r4
 8005d2c:	f7fa ff1a 	bl	8000b64 <__aeabi_uldivmod>
 8005d30:	4603      	mov	r3, r0
 8005d32:	460c      	mov	r4, r1
 8005d34:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005d36:	4b0b      	ldr	r3, [pc, #44]	; (8005d64 <HAL_RCC_GetSysClockFreq+0x158>)
 8005d38:	685b      	ldr	r3, [r3, #4]
 8005d3a:	0c1b      	lsrs	r3, r3, #16
 8005d3c:	f003 0303 	and.w	r3, r3, #3
 8005d40:	3301      	adds	r3, #1
 8005d42:	005b      	lsls	r3, r3, #1
 8005d44:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8005d46:	68fa      	ldr	r2, [r7, #12]
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d4e:	60bb      	str	r3, [r7, #8]
      break;
 8005d50:	e002      	b.n	8005d58 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005d52:	4b05      	ldr	r3, [pc, #20]	; (8005d68 <HAL_RCC_GetSysClockFreq+0x15c>)
 8005d54:	60bb      	str	r3, [r7, #8]
      break;
 8005d56:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005d58:	68bb      	ldr	r3, [r7, #8]
}
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	3714      	adds	r7, #20
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d62:	bf00      	nop
 8005d64:	40023800 	.word	0x40023800
 8005d68:	00f42400 	.word	0x00f42400
 8005d6c:	017d7840 	.word	0x017d7840

08005d70 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b084      	sub	sp, #16
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d101      	bne.n	8005d82 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005d7e:	2301      	movs	r3, #1
 8005d80:	e09d      	b.n	8005ebe <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d108      	bne.n	8005d9c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	685b      	ldr	r3, [r3, #4]
 8005d8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d92:	d009      	beq.n	8005da8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2200      	movs	r2, #0
 8005d98:	61da      	str	r2, [r3, #28]
 8005d9a:	e005      	b.n	8005da8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2200      	movs	r2, #0
 8005da0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2200      	movs	r2, #0
 8005da6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2200      	movs	r2, #0
 8005dac:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005db4:	b2db      	uxtb	r3, r3
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d106      	bne.n	8005dc8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005dc2:	6878      	ldr	r0, [r7, #4]
 8005dc4:	f7fd fefa 	bl	8003bbc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2202      	movs	r2, #2
 8005dcc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	681a      	ldr	r2, [r3, #0]
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005dde:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	68db      	ldr	r3, [r3, #12]
 8005de4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005de8:	d902      	bls.n	8005df0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005dea:	2300      	movs	r3, #0
 8005dec:	60fb      	str	r3, [r7, #12]
 8005dee:	e002      	b.n	8005df6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005df0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005df4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	68db      	ldr	r3, [r3, #12]
 8005dfa:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005dfe:	d007      	beq.n	8005e10 <HAL_SPI_Init+0xa0>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	68db      	ldr	r3, [r3, #12]
 8005e04:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005e08:	d002      	beq.n	8005e10 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	685b      	ldr	r3, [r3, #4]
 8005e14:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	689b      	ldr	r3, [r3, #8]
 8005e1c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005e20:	431a      	orrs	r2, r3
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	691b      	ldr	r3, [r3, #16]
 8005e26:	f003 0302 	and.w	r3, r3, #2
 8005e2a:	431a      	orrs	r2, r3
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	695b      	ldr	r3, [r3, #20]
 8005e30:	f003 0301 	and.w	r3, r3, #1
 8005e34:	431a      	orrs	r2, r3
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	699b      	ldr	r3, [r3, #24]
 8005e3a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005e3e:	431a      	orrs	r2, r3
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	69db      	ldr	r3, [r3, #28]
 8005e44:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005e48:	431a      	orrs	r2, r3
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6a1b      	ldr	r3, [r3, #32]
 8005e4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e52:	ea42 0103 	orr.w	r1, r2, r3
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e5a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	430a      	orrs	r2, r1
 8005e64:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	699b      	ldr	r3, [r3, #24]
 8005e6a:	0c1b      	lsrs	r3, r3, #16
 8005e6c:	f003 0204 	and.w	r2, r3, #4
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e74:	f003 0310 	and.w	r3, r3, #16
 8005e78:	431a      	orrs	r2, r3
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e7e:	f003 0308 	and.w	r3, r3, #8
 8005e82:	431a      	orrs	r2, r3
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	68db      	ldr	r3, [r3, #12]
 8005e88:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005e8c:	ea42 0103 	orr.w	r1, r2, r3
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	430a      	orrs	r2, r1
 8005e9c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	69da      	ldr	r2, [r3, #28]
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005eac:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2201      	movs	r2, #1
 8005eb8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005ebc:	2300      	movs	r3, #0
}
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	3710      	adds	r7, #16
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	bd80      	pop	{r7, pc}

08005ec6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ec6:	b580      	push	{r7, lr}
 8005ec8:	b088      	sub	sp, #32
 8005eca:	af00      	add	r7, sp, #0
 8005ecc:	60f8      	str	r0, [r7, #12]
 8005ece:	60b9      	str	r1, [r7, #8]
 8005ed0:	603b      	str	r3, [r7, #0]
 8005ed2:	4613      	mov	r3, r2
 8005ed4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005ee0:	2b01      	cmp	r3, #1
 8005ee2:	d101      	bne.n	8005ee8 <HAL_SPI_Transmit+0x22>
 8005ee4:	2302      	movs	r3, #2
 8005ee6:	e158      	b.n	800619a <HAL_SPI_Transmit+0x2d4>
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	2201      	movs	r2, #1
 8005eec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005ef0:	f7fe f806 	bl	8003f00 <HAL_GetTick>
 8005ef4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005ef6:	88fb      	ldrh	r3, [r7, #6]
 8005ef8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005f00:	b2db      	uxtb	r3, r3
 8005f02:	2b01      	cmp	r3, #1
 8005f04:	d002      	beq.n	8005f0c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005f06:	2302      	movs	r3, #2
 8005f08:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005f0a:	e13d      	b.n	8006188 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d002      	beq.n	8005f18 <HAL_SPI_Transmit+0x52>
 8005f12:	88fb      	ldrh	r3, [r7, #6]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d102      	bne.n	8005f1e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005f18:	2301      	movs	r3, #1
 8005f1a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005f1c:	e134      	b.n	8006188 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	2203      	movs	r2, #3
 8005f22:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	68ba      	ldr	r2, [r7, #8]
 8005f30:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	88fa      	ldrh	r2, [r7, #6]
 8005f36:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	88fa      	ldrh	r2, [r7, #6]
 8005f3c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	2200      	movs	r2, #0
 8005f42:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	2200      	movs	r2, #0
 8005f48:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	2200      	movs	r2, #0
 8005f58:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	689b      	ldr	r3, [r3, #8]
 8005f64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f68:	d10f      	bne.n	8005f8a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	681a      	ldr	r2, [r3, #0]
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f78:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	681a      	ldr	r2, [r3, #0]
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005f88:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f94:	2b40      	cmp	r3, #64	; 0x40
 8005f96:	d007      	beq.n	8005fa8 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	681a      	ldr	r2, [r3, #0]
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005fa6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	68db      	ldr	r3, [r3, #12]
 8005fac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005fb0:	d94b      	bls.n	800604a <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	685b      	ldr	r3, [r3, #4]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d002      	beq.n	8005fc0 <HAL_SPI_Transmit+0xfa>
 8005fba:	8afb      	ldrh	r3, [r7, #22]
 8005fbc:	2b01      	cmp	r3, #1
 8005fbe:	d13e      	bne.n	800603e <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fc4:	881a      	ldrh	r2, [r3, #0]
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fd0:	1c9a      	adds	r2, r3, #2
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fda:	b29b      	uxth	r3, r3
 8005fdc:	3b01      	subs	r3, #1
 8005fde:	b29a      	uxth	r2, r3
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005fe4:	e02b      	b.n	800603e <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	689b      	ldr	r3, [r3, #8]
 8005fec:	f003 0302 	and.w	r3, r3, #2
 8005ff0:	2b02      	cmp	r3, #2
 8005ff2:	d112      	bne.n	800601a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ff8:	881a      	ldrh	r2, [r3, #0]
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006004:	1c9a      	adds	r2, r3, #2
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800600e:	b29b      	uxth	r3, r3
 8006010:	3b01      	subs	r3, #1
 8006012:	b29a      	uxth	r2, r3
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006018:	e011      	b.n	800603e <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800601a:	f7fd ff71 	bl	8003f00 <HAL_GetTick>
 800601e:	4602      	mov	r2, r0
 8006020:	69bb      	ldr	r3, [r7, #24]
 8006022:	1ad3      	subs	r3, r2, r3
 8006024:	683a      	ldr	r2, [r7, #0]
 8006026:	429a      	cmp	r2, r3
 8006028:	d803      	bhi.n	8006032 <HAL_SPI_Transmit+0x16c>
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006030:	d102      	bne.n	8006038 <HAL_SPI_Transmit+0x172>
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d102      	bne.n	800603e <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8006038:	2303      	movs	r3, #3
 800603a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800603c:	e0a4      	b.n	8006188 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006042:	b29b      	uxth	r3, r3
 8006044:	2b00      	cmp	r3, #0
 8006046:	d1ce      	bne.n	8005fe6 <HAL_SPI_Transmit+0x120>
 8006048:	e07c      	b.n	8006144 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	685b      	ldr	r3, [r3, #4]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d002      	beq.n	8006058 <HAL_SPI_Transmit+0x192>
 8006052:	8afb      	ldrh	r3, [r7, #22]
 8006054:	2b01      	cmp	r3, #1
 8006056:	d170      	bne.n	800613a <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800605c:	b29b      	uxth	r3, r3
 800605e:	2b01      	cmp	r3, #1
 8006060:	d912      	bls.n	8006088 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006066:	881a      	ldrh	r2, [r3, #0]
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006072:	1c9a      	adds	r2, r3, #2
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800607c:	b29b      	uxth	r3, r3
 800607e:	3b02      	subs	r3, #2
 8006080:	b29a      	uxth	r2, r3
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006086:	e058      	b.n	800613a <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	330c      	adds	r3, #12
 8006092:	7812      	ldrb	r2, [r2, #0]
 8006094:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800609a:	1c5a      	adds	r2, r3, #1
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060a4:	b29b      	uxth	r3, r3
 80060a6:	3b01      	subs	r3, #1
 80060a8:	b29a      	uxth	r2, r3
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80060ae:	e044      	b.n	800613a <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	689b      	ldr	r3, [r3, #8]
 80060b6:	f003 0302 	and.w	r3, r3, #2
 80060ba:	2b02      	cmp	r3, #2
 80060bc:	d12b      	bne.n	8006116 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060c2:	b29b      	uxth	r3, r3
 80060c4:	2b01      	cmp	r3, #1
 80060c6:	d912      	bls.n	80060ee <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060cc:	881a      	ldrh	r2, [r3, #0]
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060d8:	1c9a      	adds	r2, r3, #2
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060e2:	b29b      	uxth	r3, r3
 80060e4:	3b02      	subs	r3, #2
 80060e6:	b29a      	uxth	r2, r3
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	87da      	strh	r2, [r3, #62]	; 0x3e
 80060ec:	e025      	b.n	800613a <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	330c      	adds	r3, #12
 80060f8:	7812      	ldrb	r2, [r2, #0]
 80060fa:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006100:	1c5a      	adds	r2, r3, #1
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800610a:	b29b      	uxth	r3, r3
 800610c:	3b01      	subs	r3, #1
 800610e:	b29a      	uxth	r2, r3
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006114:	e011      	b.n	800613a <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006116:	f7fd fef3 	bl	8003f00 <HAL_GetTick>
 800611a:	4602      	mov	r2, r0
 800611c:	69bb      	ldr	r3, [r7, #24]
 800611e:	1ad3      	subs	r3, r2, r3
 8006120:	683a      	ldr	r2, [r7, #0]
 8006122:	429a      	cmp	r2, r3
 8006124:	d803      	bhi.n	800612e <HAL_SPI_Transmit+0x268>
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	f1b3 3fff 	cmp.w	r3, #4294967295
 800612c:	d102      	bne.n	8006134 <HAL_SPI_Transmit+0x26e>
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d102      	bne.n	800613a <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8006134:	2303      	movs	r3, #3
 8006136:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006138:	e026      	b.n	8006188 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800613e:	b29b      	uxth	r3, r3
 8006140:	2b00      	cmp	r3, #0
 8006142:	d1b5      	bne.n	80060b0 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006144:	69ba      	ldr	r2, [r7, #24]
 8006146:	6839      	ldr	r1, [r7, #0]
 8006148:	68f8      	ldr	r0, [r7, #12]
 800614a:	f000 f949 	bl	80063e0 <SPI_EndRxTxTransaction>
 800614e:	4603      	mov	r3, r0
 8006150:	2b00      	cmp	r3, #0
 8006152:	d002      	beq.n	800615a <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	2220      	movs	r2, #32
 8006158:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	689b      	ldr	r3, [r3, #8]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d10a      	bne.n	8006178 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006162:	2300      	movs	r3, #0
 8006164:	613b      	str	r3, [r7, #16]
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	68db      	ldr	r3, [r3, #12]
 800616c:	613b      	str	r3, [r7, #16]
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	689b      	ldr	r3, [r3, #8]
 8006174:	613b      	str	r3, [r7, #16]
 8006176:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800617c:	2b00      	cmp	r3, #0
 800617e:	d002      	beq.n	8006186 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8006180:	2301      	movs	r3, #1
 8006182:	77fb      	strb	r3, [r7, #31]
 8006184:	e000      	b.n	8006188 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8006186:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	2201      	movs	r2, #1
 800618c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	2200      	movs	r2, #0
 8006194:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006198:	7ffb      	ldrb	r3, [r7, #31]
}
 800619a:	4618      	mov	r0, r3
 800619c:	3720      	adds	r7, #32
 800619e:	46bd      	mov	sp, r7
 80061a0:	bd80      	pop	{r7, pc}
	...

080061a4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b088      	sub	sp, #32
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	60f8      	str	r0, [r7, #12]
 80061ac:	60b9      	str	r1, [r7, #8]
 80061ae:	603b      	str	r3, [r7, #0]
 80061b0:	4613      	mov	r3, r2
 80061b2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80061b4:	f7fd fea4 	bl	8003f00 <HAL_GetTick>
 80061b8:	4602      	mov	r2, r0
 80061ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061bc:	1a9b      	subs	r3, r3, r2
 80061be:	683a      	ldr	r2, [r7, #0]
 80061c0:	4413      	add	r3, r2
 80061c2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80061c4:	f7fd fe9c 	bl	8003f00 <HAL_GetTick>
 80061c8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80061ca:	4b39      	ldr	r3, [pc, #228]	; (80062b0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	015b      	lsls	r3, r3, #5
 80061d0:	0d1b      	lsrs	r3, r3, #20
 80061d2:	69fa      	ldr	r2, [r7, #28]
 80061d4:	fb02 f303 	mul.w	r3, r2, r3
 80061d8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80061da:	e054      	b.n	8006286 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061e2:	d050      	beq.n	8006286 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80061e4:	f7fd fe8c 	bl	8003f00 <HAL_GetTick>
 80061e8:	4602      	mov	r2, r0
 80061ea:	69bb      	ldr	r3, [r7, #24]
 80061ec:	1ad3      	subs	r3, r2, r3
 80061ee:	69fa      	ldr	r2, [r7, #28]
 80061f0:	429a      	cmp	r2, r3
 80061f2:	d902      	bls.n	80061fa <SPI_WaitFlagStateUntilTimeout+0x56>
 80061f4:	69fb      	ldr	r3, [r7, #28]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d13d      	bne.n	8006276 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	685a      	ldr	r2, [r3, #4]
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006208:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	685b      	ldr	r3, [r3, #4]
 800620e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006212:	d111      	bne.n	8006238 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	689b      	ldr	r3, [r3, #8]
 8006218:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800621c:	d004      	beq.n	8006228 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	689b      	ldr	r3, [r3, #8]
 8006222:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006226:	d107      	bne.n	8006238 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	681a      	ldr	r2, [r3, #0]
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006236:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800623c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006240:	d10f      	bne.n	8006262 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	681a      	ldr	r2, [r3, #0]
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006250:	601a      	str	r2, [r3, #0]
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	681a      	ldr	r2, [r3, #0]
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006260:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	2201      	movs	r2, #1
 8006266:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	2200      	movs	r2, #0
 800626e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006272:	2303      	movs	r3, #3
 8006274:	e017      	b.n	80062a6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006276:	697b      	ldr	r3, [r7, #20]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d101      	bne.n	8006280 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800627c:	2300      	movs	r3, #0
 800627e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006280:	697b      	ldr	r3, [r7, #20]
 8006282:	3b01      	subs	r3, #1
 8006284:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	689a      	ldr	r2, [r3, #8]
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	4013      	ands	r3, r2
 8006290:	68ba      	ldr	r2, [r7, #8]
 8006292:	429a      	cmp	r2, r3
 8006294:	bf0c      	ite	eq
 8006296:	2301      	moveq	r3, #1
 8006298:	2300      	movne	r3, #0
 800629a:	b2db      	uxtb	r3, r3
 800629c:	461a      	mov	r2, r3
 800629e:	79fb      	ldrb	r3, [r7, #7]
 80062a0:	429a      	cmp	r2, r3
 80062a2:	d19b      	bne.n	80061dc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80062a4:	2300      	movs	r3, #0
}
 80062a6:	4618      	mov	r0, r3
 80062a8:	3720      	adds	r7, #32
 80062aa:	46bd      	mov	sp, r7
 80062ac:	bd80      	pop	{r7, pc}
 80062ae:	bf00      	nop
 80062b0:	20000108 	.word	0x20000108

080062b4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b08a      	sub	sp, #40	; 0x28
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	60f8      	str	r0, [r7, #12]
 80062bc:	60b9      	str	r1, [r7, #8]
 80062be:	607a      	str	r2, [r7, #4]
 80062c0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80062c2:	2300      	movs	r3, #0
 80062c4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80062c6:	f7fd fe1b 	bl	8003f00 <HAL_GetTick>
 80062ca:	4602      	mov	r2, r0
 80062cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ce:	1a9b      	subs	r3, r3, r2
 80062d0:	683a      	ldr	r2, [r7, #0]
 80062d2:	4413      	add	r3, r2
 80062d4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80062d6:	f7fd fe13 	bl	8003f00 <HAL_GetTick>
 80062da:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	330c      	adds	r3, #12
 80062e2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80062e4:	4b3d      	ldr	r3, [pc, #244]	; (80063dc <SPI_WaitFifoStateUntilTimeout+0x128>)
 80062e6:	681a      	ldr	r2, [r3, #0]
 80062e8:	4613      	mov	r3, r2
 80062ea:	009b      	lsls	r3, r3, #2
 80062ec:	4413      	add	r3, r2
 80062ee:	00da      	lsls	r2, r3, #3
 80062f0:	1ad3      	subs	r3, r2, r3
 80062f2:	0d1b      	lsrs	r3, r3, #20
 80062f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062f6:	fb02 f303 	mul.w	r3, r2, r3
 80062fa:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80062fc:	e060      	b.n	80063c0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006304:	d107      	bne.n	8006316 <SPI_WaitFifoStateUntilTimeout+0x62>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d104      	bne.n	8006316 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800630c:	69fb      	ldr	r3, [r7, #28]
 800630e:	781b      	ldrb	r3, [r3, #0]
 8006310:	b2db      	uxtb	r3, r3
 8006312:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006314:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	f1b3 3fff 	cmp.w	r3, #4294967295
 800631c:	d050      	beq.n	80063c0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800631e:	f7fd fdef 	bl	8003f00 <HAL_GetTick>
 8006322:	4602      	mov	r2, r0
 8006324:	6a3b      	ldr	r3, [r7, #32]
 8006326:	1ad3      	subs	r3, r2, r3
 8006328:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800632a:	429a      	cmp	r2, r3
 800632c:	d902      	bls.n	8006334 <SPI_WaitFifoStateUntilTimeout+0x80>
 800632e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006330:	2b00      	cmp	r3, #0
 8006332:	d13d      	bne.n	80063b0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	685a      	ldr	r2, [r3, #4]
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006342:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	685b      	ldr	r3, [r3, #4]
 8006348:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800634c:	d111      	bne.n	8006372 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	689b      	ldr	r3, [r3, #8]
 8006352:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006356:	d004      	beq.n	8006362 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	689b      	ldr	r3, [r3, #8]
 800635c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006360:	d107      	bne.n	8006372 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	681a      	ldr	r2, [r3, #0]
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006370:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006376:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800637a:	d10f      	bne.n	800639c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	681a      	ldr	r2, [r3, #0]
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800638a:	601a      	str	r2, [r3, #0]
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	681a      	ldr	r2, [r3, #0]
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800639a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	2201      	movs	r2, #1
 80063a0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	2200      	movs	r2, #0
 80063a8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80063ac:	2303      	movs	r3, #3
 80063ae:	e010      	b.n	80063d2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80063b0:	69bb      	ldr	r3, [r7, #24]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d101      	bne.n	80063ba <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80063b6:	2300      	movs	r3, #0
 80063b8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80063ba:	69bb      	ldr	r3, [r7, #24]
 80063bc:	3b01      	subs	r3, #1
 80063be:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	689a      	ldr	r2, [r3, #8]
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	4013      	ands	r3, r2
 80063ca:	687a      	ldr	r2, [r7, #4]
 80063cc:	429a      	cmp	r2, r3
 80063ce:	d196      	bne.n	80062fe <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80063d0:	2300      	movs	r3, #0
}
 80063d2:	4618      	mov	r0, r3
 80063d4:	3728      	adds	r7, #40	; 0x28
 80063d6:	46bd      	mov	sp, r7
 80063d8:	bd80      	pop	{r7, pc}
 80063da:	bf00      	nop
 80063dc:	20000108 	.word	0x20000108

080063e0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b088      	sub	sp, #32
 80063e4:	af02      	add	r7, sp, #8
 80063e6:	60f8      	str	r0, [r7, #12]
 80063e8:	60b9      	str	r1, [r7, #8]
 80063ea:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	9300      	str	r3, [sp, #0]
 80063f0:	68bb      	ldr	r3, [r7, #8]
 80063f2:	2200      	movs	r2, #0
 80063f4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80063f8:	68f8      	ldr	r0, [r7, #12]
 80063fa:	f7ff ff5b 	bl	80062b4 <SPI_WaitFifoStateUntilTimeout>
 80063fe:	4603      	mov	r3, r0
 8006400:	2b00      	cmp	r3, #0
 8006402:	d007      	beq.n	8006414 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006408:	f043 0220 	orr.w	r2, r3, #32
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006410:	2303      	movs	r3, #3
 8006412:	e046      	b.n	80064a2 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006414:	4b25      	ldr	r3, [pc, #148]	; (80064ac <SPI_EndRxTxTransaction+0xcc>)
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a25      	ldr	r2, [pc, #148]	; (80064b0 <SPI_EndRxTxTransaction+0xd0>)
 800641a:	fba2 2303 	umull	r2, r3, r2, r3
 800641e:	0d5b      	lsrs	r3, r3, #21
 8006420:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006424:	fb02 f303 	mul.w	r3, r2, r3
 8006428:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	685b      	ldr	r3, [r3, #4]
 800642e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006432:	d112      	bne.n	800645a <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	9300      	str	r3, [sp, #0]
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	2200      	movs	r2, #0
 800643c:	2180      	movs	r1, #128	; 0x80
 800643e:	68f8      	ldr	r0, [r7, #12]
 8006440:	f7ff feb0 	bl	80061a4 <SPI_WaitFlagStateUntilTimeout>
 8006444:	4603      	mov	r3, r0
 8006446:	2b00      	cmp	r3, #0
 8006448:	d016      	beq.n	8006478 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800644e:	f043 0220 	orr.w	r2, r3, #32
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8006456:	2303      	movs	r3, #3
 8006458:	e023      	b.n	80064a2 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800645a:	697b      	ldr	r3, [r7, #20]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d00a      	beq.n	8006476 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8006460:	697b      	ldr	r3, [r7, #20]
 8006462:	3b01      	subs	r3, #1
 8006464:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	689b      	ldr	r3, [r3, #8]
 800646c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006470:	2b80      	cmp	r3, #128	; 0x80
 8006472:	d0f2      	beq.n	800645a <SPI_EndRxTxTransaction+0x7a>
 8006474:	e000      	b.n	8006478 <SPI_EndRxTxTransaction+0x98>
        break;
 8006476:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	9300      	str	r3, [sp, #0]
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	2200      	movs	r2, #0
 8006480:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006484:	68f8      	ldr	r0, [r7, #12]
 8006486:	f7ff ff15 	bl	80062b4 <SPI_WaitFifoStateUntilTimeout>
 800648a:	4603      	mov	r3, r0
 800648c:	2b00      	cmp	r3, #0
 800648e:	d007      	beq.n	80064a0 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006494:	f043 0220 	orr.w	r2, r3, #32
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800649c:	2303      	movs	r3, #3
 800649e:	e000      	b.n	80064a2 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 80064a0:	2300      	movs	r3, #0
}
 80064a2:	4618      	mov	r0, r3
 80064a4:	3718      	adds	r7, #24
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd80      	pop	{r7, pc}
 80064aa:	bf00      	nop
 80064ac:	20000108 	.word	0x20000108
 80064b0:	165e9f81 	.word	0x165e9f81

080064b4 <_Znwj>:
 80064b4:	b510      	push	{r4, lr}
 80064b6:	2800      	cmp	r0, #0
 80064b8:	bf14      	ite	ne
 80064ba:	4604      	movne	r4, r0
 80064bc:	2401      	moveq	r4, #1
 80064be:	4620      	mov	r0, r4
 80064c0:	f000 f8c6 	bl	8006650 <malloc>
 80064c4:	b930      	cbnz	r0, 80064d4 <_Znwj+0x20>
 80064c6:	f000 f807 	bl	80064d8 <_ZSt15get_new_handlerv>
 80064ca:	b908      	cbnz	r0, 80064d0 <_Znwj+0x1c>
 80064cc:	f000 f88e 	bl	80065ec <abort>
 80064d0:	4780      	blx	r0
 80064d2:	e7f4      	b.n	80064be <_Znwj+0xa>
 80064d4:	bd10      	pop	{r4, pc}
	...

080064d8 <_ZSt15get_new_handlerv>:
 80064d8:	4b02      	ldr	r3, [pc, #8]	; (80064e4 <_ZSt15get_new_handlerv+0xc>)
 80064da:	6818      	ldr	r0, [r3, #0]
 80064dc:	f3bf 8f5b 	dmb	ish
 80064e0:	4770      	bx	lr
 80064e2:	bf00      	nop
 80064e4:	200001d4 	.word	0x200001d4

080064e8 <_ZdlPv>:
 80064e8:	f000 b8ba 	b.w	8006660 <free>

080064ec <_ZNSaIcEC1Ev>:
 80064ec:	4770      	bx	lr

080064ee <_ZNSaIcED1Ev>:
 80064ee:	4770      	bx	lr

080064f0 <_ZSt17__throw_bad_allocv>:
 80064f0:	b508      	push	{r3, lr}
 80064f2:	f000 f87b 	bl	80065ec <abort>

080064f6 <_ZSt19__throw_logic_errorPKc>:
 80064f6:	b508      	push	{r3, lr}
 80064f8:	f000 f878 	bl	80065ec <abort>

080064fc <_ZSt20__throw_length_errorPKc>:
 80064fc:	b508      	push	{r3, lr}
 80064fe:	f000 f875 	bl	80065ec <abort>

08006502 <_ZNSt11char_traitsIcE4copyEPcPKcj>:
 8006502:	b10a      	cbz	r2, 8006508 <_ZNSt11char_traitsIcE4copyEPcPKcj+0x6>
 8006504:	f000 b8b4 	b.w	8006670 <memcpy>
 8006508:	4770      	bx	lr
	...

0800650c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 800650c:	b508      	push	{r3, lr}
 800650e:	680b      	ldr	r3, [r1, #0]
 8006510:	2b00      	cmp	r3, #0
 8006512:	da02      	bge.n	800651a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0xe>
 8006514:	4809      	ldr	r0, [pc, #36]	; (800653c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x30>)
 8006516:	f7ff fff1 	bl	80064fc <_ZSt20__throw_length_errorPKc>
 800651a:	4293      	cmp	r3, r2
 800651c:	d908      	bls.n	8006530 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x24>
 800651e:	0052      	lsls	r2, r2, #1
 8006520:	4293      	cmp	r3, r2
 8006522:	d205      	bcs.n	8006530 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x24>
 8006524:	2a00      	cmp	r2, #0
 8006526:	bfb6      	itet	lt
 8006528:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
 800652c:	600a      	strge	r2, [r1, #0]
 800652e:	600b      	strlt	r3, [r1, #0]
 8006530:	6808      	ldr	r0, [r1, #0]
 8006532:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8006536:	3001      	adds	r0, #1
 8006538:	f7ff bfbc 	b.w	80064b4 <_Znwj>
 800653c:	08006a26 	.word	0x08006a26

08006540 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 8006540:	4603      	mov	r3, r0
 8006542:	f853 0b08 	ldr.w	r0, [r3], #8
 8006546:	4298      	cmp	r0, r3
 8006548:	d001      	beq.n	800654e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 800654a:	f7ff bfcd 	b.w	80064e8 <_ZdlPv>
 800654e:	4770      	bx	lr

08006550 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 8006550:	2a01      	cmp	r2, #1
 8006552:	b510      	push	{r4, lr}
 8006554:	d102      	bne.n	800655c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xc>
 8006556:	780a      	ldrb	r2, [r1, #0]
 8006558:	7002      	strb	r2, [r0, #0]
 800655a:	bd10      	pop	{r4, pc}
 800655c:	f7ff ffd1 	bl	8006502 <_ZNSt11char_traitsIcE4copyEPcPKcj>
 8006560:	e7fb      	b.n	800655a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xa>

08006562 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 8006562:	b508      	push	{r3, lr}
 8006564:	1a52      	subs	r2, r2, r1
 8006566:	f7ff fff3 	bl	8006550 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800656a:	bd08      	pop	{r3, pc}

0800656c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 800656c:	b510      	push	{r4, lr}
 800656e:	4604      	mov	r4, r0
 8006570:	f7ff ffe6 	bl	8006540 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8006574:	4620      	mov	r0, r4
 8006576:	bd10      	pop	{r4, pc}

08006578 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 8006578:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800657a:	4604      	mov	r4, r0
 800657c:	4616      	mov	r6, r2
 800657e:	460d      	mov	r5, r1
 8006580:	b919      	cbnz	r1, 800658a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 8006582:	b112      	cbz	r2, 800658a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 8006584:	480d      	ldr	r0, [pc, #52]	; (80065bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 8006586:	f7ff ffb6 	bl	80064f6 <_ZSt19__throw_logic_errorPKc>
 800658a:	1b73      	subs	r3, r6, r5
 800658c:	2b0f      	cmp	r3, #15
 800658e:	9301      	str	r3, [sp, #4]
 8006590:	d907      	bls.n	80065a2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
 8006592:	2200      	movs	r2, #0
 8006594:	a901      	add	r1, sp, #4
 8006596:	4620      	mov	r0, r4
 8006598:	f7ff ffb8 	bl	800650c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800659c:	9b01      	ldr	r3, [sp, #4]
 800659e:	6020      	str	r0, [r4, #0]
 80065a0:	60a3      	str	r3, [r4, #8]
 80065a2:	4632      	mov	r2, r6
 80065a4:	4629      	mov	r1, r5
 80065a6:	6820      	ldr	r0, [r4, #0]
 80065a8:	f7ff ffdb 	bl	8006562 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 80065ac:	9b01      	ldr	r3, [sp, #4]
 80065ae:	6822      	ldr	r2, [r4, #0]
 80065b0:	6063      	str	r3, [r4, #4]
 80065b2:	2100      	movs	r1, #0
 80065b4:	54d1      	strb	r1, [r2, r3]
 80065b6:	b002      	add	sp, #8
 80065b8:	bd70      	pop	{r4, r5, r6, pc}
 80065ba:	bf00      	nop
 80065bc:	080069fc 	.word	0x080069fc

080065c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 80065c0:	b538      	push	{r3, r4, r5, lr}
 80065c2:	f100 0308 	add.w	r3, r0, #8
 80065c6:	4604      	mov	r4, r0
 80065c8:	6003      	str	r3, [r0, #0]
 80065ca:	460d      	mov	r5, r1
 80065cc:	b159      	cbz	r1, 80065e6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x26>
 80065ce:	4608      	mov	r0, r1
 80065d0:	f7f9 fe1a 	bl	8000208 <strlen>
 80065d4:	182a      	adds	r2, r5, r0
 80065d6:	4620      	mov	r0, r4
 80065d8:	f04f 0300 	mov.w	r3, #0
 80065dc:	4629      	mov	r1, r5
 80065de:	f7ff ffcb 	bl	8006578 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 80065e2:	4620      	mov	r0, r4
 80065e4:	bd38      	pop	{r3, r4, r5, pc}
 80065e6:	f04f 32ff 	mov.w	r2, #4294967295
 80065ea:	e7f4      	b.n	80065d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x16>

080065ec <abort>:
 80065ec:	b508      	push	{r3, lr}
 80065ee:	2006      	movs	r0, #6
 80065f0:	f000 f94a 	bl	8006888 <raise>
 80065f4:	2001      	movs	r0, #1
 80065f6:	f7fd fbb7 	bl	8003d68 <_exit>
	...

080065fc <__errno>:
 80065fc:	4b01      	ldr	r3, [pc, #4]	; (8006604 <__errno+0x8>)
 80065fe:	6818      	ldr	r0, [r3, #0]
 8006600:	4770      	bx	lr
 8006602:	bf00      	nop
 8006604:	20000114 	.word	0x20000114

08006608 <__libc_init_array>:
 8006608:	b570      	push	{r4, r5, r6, lr}
 800660a:	4e0d      	ldr	r6, [pc, #52]	; (8006640 <__libc_init_array+0x38>)
 800660c:	4c0d      	ldr	r4, [pc, #52]	; (8006644 <__libc_init_array+0x3c>)
 800660e:	1ba4      	subs	r4, r4, r6
 8006610:	10a4      	asrs	r4, r4, #2
 8006612:	2500      	movs	r5, #0
 8006614:	42a5      	cmp	r5, r4
 8006616:	d109      	bne.n	800662c <__libc_init_array+0x24>
 8006618:	4e0b      	ldr	r6, [pc, #44]	; (8006648 <__libc_init_array+0x40>)
 800661a:	4c0c      	ldr	r4, [pc, #48]	; (800664c <__libc_init_array+0x44>)
 800661c:	f000 f952 	bl	80068c4 <_init>
 8006620:	1ba4      	subs	r4, r4, r6
 8006622:	10a4      	asrs	r4, r4, #2
 8006624:	2500      	movs	r5, #0
 8006626:	42a5      	cmp	r5, r4
 8006628:	d105      	bne.n	8006636 <__libc_init_array+0x2e>
 800662a:	bd70      	pop	{r4, r5, r6, pc}
 800662c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006630:	4798      	blx	r3
 8006632:	3501      	adds	r5, #1
 8006634:	e7ee      	b.n	8006614 <__libc_init_array+0xc>
 8006636:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800663a:	4798      	blx	r3
 800663c:	3501      	adds	r5, #1
 800663e:	e7f2      	b.n	8006626 <__libc_init_array+0x1e>
 8006640:	08006a48 	.word	0x08006a48
 8006644:	08006a48 	.word	0x08006a48
 8006648:	08006a48 	.word	0x08006a48
 800664c:	08006a50 	.word	0x08006a50

08006650 <malloc>:
 8006650:	4b02      	ldr	r3, [pc, #8]	; (800665c <malloc+0xc>)
 8006652:	4601      	mov	r1, r0
 8006654:	6818      	ldr	r0, [r3, #0]
 8006656:	f000 b885 	b.w	8006764 <_malloc_r>
 800665a:	bf00      	nop
 800665c:	20000114 	.word	0x20000114

08006660 <free>:
 8006660:	4b02      	ldr	r3, [pc, #8]	; (800666c <free+0xc>)
 8006662:	4601      	mov	r1, r0
 8006664:	6818      	ldr	r0, [r3, #0]
 8006666:	f000 b82f 	b.w	80066c8 <_free_r>
 800666a:	bf00      	nop
 800666c:	20000114 	.word	0x20000114

08006670 <memcpy>:
 8006670:	b510      	push	{r4, lr}
 8006672:	1e43      	subs	r3, r0, #1
 8006674:	440a      	add	r2, r1
 8006676:	4291      	cmp	r1, r2
 8006678:	d100      	bne.n	800667c <memcpy+0xc>
 800667a:	bd10      	pop	{r4, pc}
 800667c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006680:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006684:	e7f7      	b.n	8006676 <memcpy+0x6>

08006686 <memmove>:
 8006686:	4288      	cmp	r0, r1
 8006688:	b510      	push	{r4, lr}
 800668a:	eb01 0302 	add.w	r3, r1, r2
 800668e:	d807      	bhi.n	80066a0 <memmove+0x1a>
 8006690:	1e42      	subs	r2, r0, #1
 8006692:	4299      	cmp	r1, r3
 8006694:	d00a      	beq.n	80066ac <memmove+0x26>
 8006696:	f811 4b01 	ldrb.w	r4, [r1], #1
 800669a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800669e:	e7f8      	b.n	8006692 <memmove+0xc>
 80066a0:	4283      	cmp	r3, r0
 80066a2:	d9f5      	bls.n	8006690 <memmove+0xa>
 80066a4:	1881      	adds	r1, r0, r2
 80066a6:	1ad2      	subs	r2, r2, r3
 80066a8:	42d3      	cmn	r3, r2
 80066aa:	d100      	bne.n	80066ae <memmove+0x28>
 80066ac:	bd10      	pop	{r4, pc}
 80066ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80066b2:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80066b6:	e7f7      	b.n	80066a8 <memmove+0x22>

080066b8 <memset>:
 80066b8:	4402      	add	r2, r0
 80066ba:	4603      	mov	r3, r0
 80066bc:	4293      	cmp	r3, r2
 80066be:	d100      	bne.n	80066c2 <memset+0xa>
 80066c0:	4770      	bx	lr
 80066c2:	f803 1b01 	strb.w	r1, [r3], #1
 80066c6:	e7f9      	b.n	80066bc <memset+0x4>

080066c8 <_free_r>:
 80066c8:	b538      	push	{r3, r4, r5, lr}
 80066ca:	4605      	mov	r5, r0
 80066cc:	2900      	cmp	r1, #0
 80066ce:	d045      	beq.n	800675c <_free_r+0x94>
 80066d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80066d4:	1f0c      	subs	r4, r1, #4
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	bfb8      	it	lt
 80066da:	18e4      	addlt	r4, r4, r3
 80066dc:	f000 f8f0 	bl	80068c0 <__malloc_lock>
 80066e0:	4a1f      	ldr	r2, [pc, #124]	; (8006760 <_free_r+0x98>)
 80066e2:	6813      	ldr	r3, [r2, #0]
 80066e4:	4610      	mov	r0, r2
 80066e6:	b933      	cbnz	r3, 80066f6 <_free_r+0x2e>
 80066e8:	6063      	str	r3, [r4, #4]
 80066ea:	6014      	str	r4, [r2, #0]
 80066ec:	4628      	mov	r0, r5
 80066ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80066f2:	f000 b8e6 	b.w	80068c2 <__malloc_unlock>
 80066f6:	42a3      	cmp	r3, r4
 80066f8:	d90c      	bls.n	8006714 <_free_r+0x4c>
 80066fa:	6821      	ldr	r1, [r4, #0]
 80066fc:	1862      	adds	r2, r4, r1
 80066fe:	4293      	cmp	r3, r2
 8006700:	bf04      	itt	eq
 8006702:	681a      	ldreq	r2, [r3, #0]
 8006704:	685b      	ldreq	r3, [r3, #4]
 8006706:	6063      	str	r3, [r4, #4]
 8006708:	bf04      	itt	eq
 800670a:	1852      	addeq	r2, r2, r1
 800670c:	6022      	streq	r2, [r4, #0]
 800670e:	6004      	str	r4, [r0, #0]
 8006710:	e7ec      	b.n	80066ec <_free_r+0x24>
 8006712:	4613      	mov	r3, r2
 8006714:	685a      	ldr	r2, [r3, #4]
 8006716:	b10a      	cbz	r2, 800671c <_free_r+0x54>
 8006718:	42a2      	cmp	r2, r4
 800671a:	d9fa      	bls.n	8006712 <_free_r+0x4a>
 800671c:	6819      	ldr	r1, [r3, #0]
 800671e:	1858      	adds	r0, r3, r1
 8006720:	42a0      	cmp	r0, r4
 8006722:	d10b      	bne.n	800673c <_free_r+0x74>
 8006724:	6820      	ldr	r0, [r4, #0]
 8006726:	4401      	add	r1, r0
 8006728:	1858      	adds	r0, r3, r1
 800672a:	4282      	cmp	r2, r0
 800672c:	6019      	str	r1, [r3, #0]
 800672e:	d1dd      	bne.n	80066ec <_free_r+0x24>
 8006730:	6810      	ldr	r0, [r2, #0]
 8006732:	6852      	ldr	r2, [r2, #4]
 8006734:	605a      	str	r2, [r3, #4]
 8006736:	4401      	add	r1, r0
 8006738:	6019      	str	r1, [r3, #0]
 800673a:	e7d7      	b.n	80066ec <_free_r+0x24>
 800673c:	d902      	bls.n	8006744 <_free_r+0x7c>
 800673e:	230c      	movs	r3, #12
 8006740:	602b      	str	r3, [r5, #0]
 8006742:	e7d3      	b.n	80066ec <_free_r+0x24>
 8006744:	6820      	ldr	r0, [r4, #0]
 8006746:	1821      	adds	r1, r4, r0
 8006748:	428a      	cmp	r2, r1
 800674a:	bf04      	itt	eq
 800674c:	6811      	ldreq	r1, [r2, #0]
 800674e:	6852      	ldreq	r2, [r2, #4]
 8006750:	6062      	str	r2, [r4, #4]
 8006752:	bf04      	itt	eq
 8006754:	1809      	addeq	r1, r1, r0
 8006756:	6021      	streq	r1, [r4, #0]
 8006758:	605c      	str	r4, [r3, #4]
 800675a:	e7c7      	b.n	80066ec <_free_r+0x24>
 800675c:	bd38      	pop	{r3, r4, r5, pc}
 800675e:	bf00      	nop
 8006760:	200001d8 	.word	0x200001d8

08006764 <_malloc_r>:
 8006764:	b570      	push	{r4, r5, r6, lr}
 8006766:	1ccd      	adds	r5, r1, #3
 8006768:	f025 0503 	bic.w	r5, r5, #3
 800676c:	3508      	adds	r5, #8
 800676e:	2d0c      	cmp	r5, #12
 8006770:	bf38      	it	cc
 8006772:	250c      	movcc	r5, #12
 8006774:	2d00      	cmp	r5, #0
 8006776:	4606      	mov	r6, r0
 8006778:	db01      	blt.n	800677e <_malloc_r+0x1a>
 800677a:	42a9      	cmp	r1, r5
 800677c:	d903      	bls.n	8006786 <_malloc_r+0x22>
 800677e:	230c      	movs	r3, #12
 8006780:	6033      	str	r3, [r6, #0]
 8006782:	2000      	movs	r0, #0
 8006784:	bd70      	pop	{r4, r5, r6, pc}
 8006786:	f000 f89b 	bl	80068c0 <__malloc_lock>
 800678a:	4a21      	ldr	r2, [pc, #132]	; (8006810 <_malloc_r+0xac>)
 800678c:	6814      	ldr	r4, [r2, #0]
 800678e:	4621      	mov	r1, r4
 8006790:	b991      	cbnz	r1, 80067b8 <_malloc_r+0x54>
 8006792:	4c20      	ldr	r4, [pc, #128]	; (8006814 <_malloc_r+0xb0>)
 8006794:	6823      	ldr	r3, [r4, #0]
 8006796:	b91b      	cbnz	r3, 80067a0 <_malloc_r+0x3c>
 8006798:	4630      	mov	r0, r6
 800679a:	f000 f83d 	bl	8006818 <_sbrk_r>
 800679e:	6020      	str	r0, [r4, #0]
 80067a0:	4629      	mov	r1, r5
 80067a2:	4630      	mov	r0, r6
 80067a4:	f000 f838 	bl	8006818 <_sbrk_r>
 80067a8:	1c43      	adds	r3, r0, #1
 80067aa:	d124      	bne.n	80067f6 <_malloc_r+0x92>
 80067ac:	230c      	movs	r3, #12
 80067ae:	6033      	str	r3, [r6, #0]
 80067b0:	4630      	mov	r0, r6
 80067b2:	f000 f886 	bl	80068c2 <__malloc_unlock>
 80067b6:	e7e4      	b.n	8006782 <_malloc_r+0x1e>
 80067b8:	680b      	ldr	r3, [r1, #0]
 80067ba:	1b5b      	subs	r3, r3, r5
 80067bc:	d418      	bmi.n	80067f0 <_malloc_r+0x8c>
 80067be:	2b0b      	cmp	r3, #11
 80067c0:	d90f      	bls.n	80067e2 <_malloc_r+0x7e>
 80067c2:	600b      	str	r3, [r1, #0]
 80067c4:	50cd      	str	r5, [r1, r3]
 80067c6:	18cc      	adds	r4, r1, r3
 80067c8:	4630      	mov	r0, r6
 80067ca:	f000 f87a 	bl	80068c2 <__malloc_unlock>
 80067ce:	f104 000b 	add.w	r0, r4, #11
 80067d2:	1d23      	adds	r3, r4, #4
 80067d4:	f020 0007 	bic.w	r0, r0, #7
 80067d8:	1ac3      	subs	r3, r0, r3
 80067da:	d0d3      	beq.n	8006784 <_malloc_r+0x20>
 80067dc:	425a      	negs	r2, r3
 80067de:	50e2      	str	r2, [r4, r3]
 80067e0:	e7d0      	b.n	8006784 <_malloc_r+0x20>
 80067e2:	428c      	cmp	r4, r1
 80067e4:	684b      	ldr	r3, [r1, #4]
 80067e6:	bf16      	itet	ne
 80067e8:	6063      	strne	r3, [r4, #4]
 80067ea:	6013      	streq	r3, [r2, #0]
 80067ec:	460c      	movne	r4, r1
 80067ee:	e7eb      	b.n	80067c8 <_malloc_r+0x64>
 80067f0:	460c      	mov	r4, r1
 80067f2:	6849      	ldr	r1, [r1, #4]
 80067f4:	e7cc      	b.n	8006790 <_malloc_r+0x2c>
 80067f6:	1cc4      	adds	r4, r0, #3
 80067f8:	f024 0403 	bic.w	r4, r4, #3
 80067fc:	42a0      	cmp	r0, r4
 80067fe:	d005      	beq.n	800680c <_malloc_r+0xa8>
 8006800:	1a21      	subs	r1, r4, r0
 8006802:	4630      	mov	r0, r6
 8006804:	f000 f808 	bl	8006818 <_sbrk_r>
 8006808:	3001      	adds	r0, #1
 800680a:	d0cf      	beq.n	80067ac <_malloc_r+0x48>
 800680c:	6025      	str	r5, [r4, #0]
 800680e:	e7db      	b.n	80067c8 <_malloc_r+0x64>
 8006810:	200001d8 	.word	0x200001d8
 8006814:	200001dc 	.word	0x200001dc

08006818 <_sbrk_r>:
 8006818:	b538      	push	{r3, r4, r5, lr}
 800681a:	4c06      	ldr	r4, [pc, #24]	; (8006834 <_sbrk_r+0x1c>)
 800681c:	2300      	movs	r3, #0
 800681e:	4605      	mov	r5, r0
 8006820:	4608      	mov	r0, r1
 8006822:	6023      	str	r3, [r4, #0]
 8006824:	f7fd faaa 	bl	8003d7c <_sbrk>
 8006828:	1c43      	adds	r3, r0, #1
 800682a:	d102      	bne.n	8006832 <_sbrk_r+0x1a>
 800682c:	6823      	ldr	r3, [r4, #0]
 800682e:	b103      	cbz	r3, 8006832 <_sbrk_r+0x1a>
 8006830:	602b      	str	r3, [r5, #0]
 8006832:	bd38      	pop	{r3, r4, r5, pc}
 8006834:	20000304 	.word	0x20000304

08006838 <_raise_r>:
 8006838:	291f      	cmp	r1, #31
 800683a:	b538      	push	{r3, r4, r5, lr}
 800683c:	4604      	mov	r4, r0
 800683e:	460d      	mov	r5, r1
 8006840:	d904      	bls.n	800684c <_raise_r+0x14>
 8006842:	2316      	movs	r3, #22
 8006844:	6003      	str	r3, [r0, #0]
 8006846:	f04f 30ff 	mov.w	r0, #4294967295
 800684a:	bd38      	pop	{r3, r4, r5, pc}
 800684c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800684e:	b112      	cbz	r2, 8006856 <_raise_r+0x1e>
 8006850:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006854:	b94b      	cbnz	r3, 800686a <_raise_r+0x32>
 8006856:	4620      	mov	r0, r4
 8006858:	f000 f830 	bl	80068bc <_getpid_r>
 800685c:	462a      	mov	r2, r5
 800685e:	4601      	mov	r1, r0
 8006860:	4620      	mov	r0, r4
 8006862:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006866:	f000 b817 	b.w	8006898 <_kill_r>
 800686a:	2b01      	cmp	r3, #1
 800686c:	d00a      	beq.n	8006884 <_raise_r+0x4c>
 800686e:	1c59      	adds	r1, r3, #1
 8006870:	d103      	bne.n	800687a <_raise_r+0x42>
 8006872:	2316      	movs	r3, #22
 8006874:	6003      	str	r3, [r0, #0]
 8006876:	2001      	movs	r0, #1
 8006878:	e7e7      	b.n	800684a <_raise_r+0x12>
 800687a:	2400      	movs	r4, #0
 800687c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006880:	4628      	mov	r0, r5
 8006882:	4798      	blx	r3
 8006884:	2000      	movs	r0, #0
 8006886:	e7e0      	b.n	800684a <_raise_r+0x12>

08006888 <raise>:
 8006888:	4b02      	ldr	r3, [pc, #8]	; (8006894 <raise+0xc>)
 800688a:	4601      	mov	r1, r0
 800688c:	6818      	ldr	r0, [r3, #0]
 800688e:	f7ff bfd3 	b.w	8006838 <_raise_r>
 8006892:	bf00      	nop
 8006894:	20000114 	.word	0x20000114

08006898 <_kill_r>:
 8006898:	b538      	push	{r3, r4, r5, lr}
 800689a:	4c07      	ldr	r4, [pc, #28]	; (80068b8 <_kill_r+0x20>)
 800689c:	2300      	movs	r3, #0
 800689e:	4605      	mov	r5, r0
 80068a0:	4608      	mov	r0, r1
 80068a2:	4611      	mov	r1, r2
 80068a4:	6023      	str	r3, [r4, #0]
 80068a6:	f7fd fa4f 	bl	8003d48 <_kill>
 80068aa:	1c43      	adds	r3, r0, #1
 80068ac:	d102      	bne.n	80068b4 <_kill_r+0x1c>
 80068ae:	6823      	ldr	r3, [r4, #0]
 80068b0:	b103      	cbz	r3, 80068b4 <_kill_r+0x1c>
 80068b2:	602b      	str	r3, [r5, #0]
 80068b4:	bd38      	pop	{r3, r4, r5, pc}
 80068b6:	bf00      	nop
 80068b8:	20000304 	.word	0x20000304

080068bc <_getpid_r>:
 80068bc:	f7fd ba3c 	b.w	8003d38 <_getpid>

080068c0 <__malloc_lock>:
 80068c0:	4770      	bx	lr

080068c2 <__malloc_unlock>:
 80068c2:	4770      	bx	lr

080068c4 <_init>:
 80068c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068c6:	bf00      	nop
 80068c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068ca:	bc08      	pop	{r3}
 80068cc:	469e      	mov	lr, r3
 80068ce:	4770      	bx	lr

080068d0 <_fini>:
 80068d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068d2:	bf00      	nop
 80068d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068d6:	bc08      	pop	{r3}
 80068d8:	469e      	mov	lr, r3
 80068da:	4770      	bx	lr
